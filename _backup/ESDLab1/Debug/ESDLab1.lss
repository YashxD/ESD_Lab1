
ESDLab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  000046ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000453c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000fe  00802000  0000453c  000045f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000007f  008020fe  008020fe  00004732  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004732  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004790  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006b0  00000000  00000000  000047d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00018680  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000061a4  00000000  00000000  0001d500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000b771  00000000  00000000  000236a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000020c8  00000000  00000000  0002ee18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000331d8  00000000  00000000  00030ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac75  00000000  00000000  000640b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000770  00000000  00000000  0006ed30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000bdaf  00000000  00000000  0006f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
       2:	00 00       	nop
       4:	2b c1       	rjmp	.+598    	; 0x25c <__bad_interrupt>
       6:	00 00       	nop
       8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
       a:	00 00       	nop
       c:	27 c1       	rjmp	.+590    	; 0x25c <__bad_interrupt>
       e:	00 00       	nop
      10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
      12:	00 00       	nop
      14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
      16:	00 00       	nop
      18:	21 c1       	rjmp	.+578    	; 0x25c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1f c1       	rjmp	.+574    	; 0x25c <__bad_interrupt>
      1e:	00 00       	nop
      20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
      22:	00 00       	nop
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c1       	rjmp	.+562    	; 0x25c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__bad_interrupt>
      2e:	00 00       	nop
      30:	15 c1       	rjmp	.+554    	; 0x25c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_13>
      38:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_14>
      3c:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_15>
      40:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_16>
      44:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_17>
      48:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_18>
      4c:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_19>
      50:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_20>
      54:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_21>
      58:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__vector_22>
      5c:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_23>
      60:	fd c0       	rjmp	.+506    	; 0x25c <__bad_interrupt>
      62:	00 00       	nop
      64:	fb c0       	rjmp	.+502    	; 0x25c <__bad_interrupt>
      66:	00 00       	nop
      68:	f9 c0       	rjmp	.+498    	; 0x25c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f7 c0       	rjmp	.+494    	; 0x25c <__bad_interrupt>
      6e:	00 00       	nop
      70:	f5 c0       	rjmp	.+490    	; 0x25c <__bad_interrupt>
      72:	00 00       	nop
      74:	f3 c0       	rjmp	.+486    	; 0x25c <__bad_interrupt>
      76:	00 00       	nop
      78:	f1 c0       	rjmp	.+482    	; 0x25c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ef c0       	rjmp	.+478    	; 0x25c <__bad_interrupt>
      7e:	00 00       	nop
      80:	ed c0       	rjmp	.+474    	; 0x25c <__bad_interrupt>
      82:	00 00       	nop
      84:	eb c0       	rjmp	.+470    	; 0x25c <__bad_interrupt>
      86:	00 00       	nop
      88:	e9 c0       	rjmp	.+466    	; 0x25c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 c0       	rjmp	.+462    	; 0x25c <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c0       	rjmp	.+458    	; 0x25c <__bad_interrupt>
      92:	00 00       	nop
      94:	e3 c0       	rjmp	.+454    	; 0x25c <__bad_interrupt>
      96:	00 00       	nop
      98:	e1 c0       	rjmp	.+450    	; 0x25c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_39>
      a0:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__vector_40>
      a4:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_41>
      a8:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__vector_42>
      ac:	d7 c0       	rjmp	.+430    	; 0x25c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d5 c0       	rjmp	.+426    	; 0x25c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d3 c0       	rjmp	.+422    	; 0x25c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__vector_46>
      bc:	0c 94 95 10 	jmp	0x212a	; 0x212a <__vector_47>
      c0:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__vector_48>
      c4:	0c 94 05 11 	jmp	0x220a	; 0x220a <__vector_49>
      c8:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__vector_50>
      cc:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__vector_51>
      d0:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_52>
      d4:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__vector_53>
      d8:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_54>
      dc:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__vector_55>
      e0:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__vector_56>
      e4:	bb c0       	rjmp	.+374    	; 0x25c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b9 c0       	rjmp	.+370    	; 0x25c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b7 c0       	rjmp	.+366    	; 0x25c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b5 c0       	rjmp	.+362    	; 0x25c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b3 c0       	rjmp	.+358    	; 0x25c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b1 c0       	rjmp	.+354    	; 0x25c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	af c0       	rjmp	.+350    	; 0x25c <__bad_interrupt>
      fe:	00 00       	nop
     100:	ad c0       	rjmp	.+346    	; 0x25c <__bad_interrupt>
     102:	00 00       	nop
     104:	ab c0       	rjmp	.+342    	; 0x25c <__bad_interrupt>
     106:	00 00       	nop
     108:	a9 c0       	rjmp	.+338    	; 0x25c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a7 c0       	rjmp	.+334    	; 0x25c <__bad_interrupt>
     10e:	00 00       	nop
     110:	a5 c0       	rjmp	.+330    	; 0x25c <__bad_interrupt>
     112:	00 00       	nop
     114:	a3 c0       	rjmp	.+326    	; 0x25c <__bad_interrupt>
     116:	00 00       	nop
     118:	a1 c0       	rjmp	.+322    	; 0x25c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_71>
     120:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__vector_72>
     124:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__vector_73>
     128:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_74>
     12c:	97 c0       	rjmp	.+302    	; 0x25c <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__vector_76>
     134:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_77>
     138:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_78>
     13c:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_79>
     140:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_80>
     144:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__vector_81>
     148:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_82>
     14c:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_83>
     150:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_84>
     154:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_85>
     158:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_86>
     15c:	7f c0       	rjmp	.+254    	; 0x25c <__bad_interrupt>
     15e:	00 00       	nop
     160:	7d c0       	rjmp	.+250    	; 0x25c <__bad_interrupt>
     162:	00 00       	nop
     164:	7b c0       	rjmp	.+246    	; 0x25c <__bad_interrupt>
     166:	00 00       	nop
     168:	79 c0       	rjmp	.+242    	; 0x25c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	77 c0       	rjmp	.+238    	; 0x25c <__bad_interrupt>
     16e:	00 00       	nop
     170:	75 c0       	rjmp	.+234    	; 0x25c <__bad_interrupt>
     172:	00 00       	nop
     174:	73 c0       	rjmp	.+230    	; 0x25c <__bad_interrupt>
     176:	00 00       	nop
     178:	71 c0       	rjmp	.+226    	; 0x25c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6f c0       	rjmp	.+222    	; 0x25c <__bad_interrupt>
     17e:	00 00       	nop
     180:	6d c0       	rjmp	.+218    	; 0x25c <__bad_interrupt>
     182:	00 00       	nop
     184:	6b c0       	rjmp	.+214    	; 0x25c <__bad_interrupt>
     186:	00 00       	nop
     188:	69 c0       	rjmp	.+210    	; 0x25c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	67 c0       	rjmp	.+206    	; 0x25c <__bad_interrupt>
     18e:	00 00       	nop
     190:	65 c0       	rjmp	.+202    	; 0x25c <__bad_interrupt>
     192:	00 00       	nop
     194:	63 c0       	rjmp	.+198    	; 0x25c <__bad_interrupt>
     196:	00 00       	nop
     198:	61 c0       	rjmp	.+194    	; 0x25c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5f c0       	rjmp	.+190    	; 0x25c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__vector_104>
     1a2:	00 00       	nop
     1a4:	5b c0       	rjmp	.+182    	; 0x25c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	59 c0       	rjmp	.+178    	; 0x25c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__vector_107>
     1b0:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__vector_108>
     1b4:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_109>
     1b8:	0c 94 35 13 	jmp	0x266a	; 0x266a <__vector_110>
     1bc:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__vector_111>
     1c0:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__vector_112>
     1c4:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_113>
     1c8:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_114>
     1cc:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_115>
     1d0:	0c 94 85 14 	jmp	0x290a	; 0x290a <__vector_116>
     1d4:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__vector_117>
     1d8:	41 c0       	rjmp	.+130    	; 0x25c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3d c0       	rjmp	.+122    	; 0x25c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3b c0       	rjmp	.+118    	; 0x25c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	39 c0       	rjmp	.+114    	; 0x25c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	37 c0       	rjmp	.+110    	; 0x25c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	35 c0       	rjmp	.+106    	; 0x25c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	23 05       	cpc	r18, r3
     1f6:	46 06       	cpc	r4, r22
     1f8:	65 04       	cpc	r6, r5
     1fa:	46 06       	cpc	r4, r22
     1fc:	46 06       	cpc	r4, r22
     1fe:	46 06       	cpc	r4, r22
     200:	c3 05       	cpc	r28, r3
     202:	46 06       	cpc	r4, r22
     204:	5f 05       	cpc	r21, r15
     206:	b8 04       	cpc	r11, r8
     208:	46 06       	cpc	r4, r22
     20a:	46 06       	cpc	r4, r22
     20c:	a4 04       	cpc	r10, r4
     20e:	ae 04       	cpc	r10, r14

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df e3       	ldi	r29, 0x3F	; 63
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0c bf       	out	0x3c, r16	; 60
     220:	18 be       	out	0x38, r1	; 56
     222:	19 be       	out	0x39, r1	; 57
     224:	1a be       	out	0x3a, r1	; 58
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_copy_data>:
     228:	10 e2       	ldi	r17, 0x20	; 32
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ec e3       	ldi	r30, 0x3C	; 60
     230:	f5 e4       	ldi	r31, 0x45	; 69
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ae 3f       	cpi	r26, 0xFE	; 254
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59

00000244 <__do_clear_bss>:
     244:	21 e2       	ldi	r18, 0x21	; 33
     246:	ae ef       	ldi	r26, 0xFE	; 254
     248:	b0 e2       	ldi	r27, 0x20	; 32
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	ad 37       	cpi	r26, 0x7D	; 125
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <main>
     258:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <__vector_104>:
 * the argument specified when the handler was installed..
 *
 * \return  Nothing.
 */
ISR(SENSOR_BOARD_PORT_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	08 b6       	in	r0, 0x38	; 56
     26a:	0f 92       	push	r0
     26c:	18 be       	out	0x38, r1	; 56
     26e:	09 b6       	in	r0, 0x39	; 57
     270:	0f 92       	push	r0
     272:	19 be       	out	0x39, r1	; 57
     274:	0b b6       	in	r0, 0x3b	; 59
     276:	0f 92       	push	r0
     278:	1b be       	out	0x3b, r1	; 59
     27a:	2f 93       	push	r18
     27c:	3f 93       	push	r19
     27e:	4f 93       	push	r20
     280:	5f 93       	push	r21
     282:	6f 93       	push	r22
     284:	7f 93       	push	r23
     286:	8f 93       	push	r24
     288:	9f 93       	push	r25
     28a:	af 93       	push	r26
     28c:	bf 93       	push	r27
     28e:	ef 93       	push	r30
     290:	ff 93       	push	r31
	PORT_t *const port = &(SENSOR_BOARD_PORT);

	/* Call the interrupt handler (if any). */
	if (sensor_pin3_handler && (port->IN & PIN2_bm)) {
     292:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <sensor_pin3_handler>
     296:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <sensor_pin3_handler+0x1>
     29a:	30 97       	sbiw	r30, 0x00	; 0
     29c:	51 f0       	breq	.+20     	; 0x2b2 <__vector_104+0x54>
     29e:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <__vector_104+0x54>
		/* Note: header pin 3 = io port pin 2 */
		sensor_pin3_handler(sensor_pin3_arg);
     2a6:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <sensor_pin3_arg>
     2aa:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <sensor_pin3_arg+0x1>
     2ae:	19 95       	eicall
     2b0:	1f c0       	rjmp	.+62     	; 0x2f0 <__vector_104+0x92>
	} else if (sensor_pin4_handler && (port->IN & PIN3_bm)) {
     2b2:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <sensor_pin4_handler>
     2b6:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <sensor_pin4_handler+0x1>
     2ba:	30 97       	sbiw	r30, 0x00	; 0
     2bc:	51 f0       	breq	.+20     	; 0x2d2 <__vector_104+0x74>
     2be:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     2c2:	83 ff       	sbrs	r24, 3
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__vector_104+0x74>
		/* Note: header pin 4 = io port pin 3 */
		sensor_pin4_handler(sensor_pin4_arg);
     2c6:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <sensor_pin4_arg>
     2ca:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <sensor_pin4_arg+0x1>
     2ce:	19 95       	eicall
     2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <__vector_104+0x92>
	} else if (sensor_pin5_handler && (port->IN & PIN4_bm)) {
     2d2:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <sensor_pin5_handler>
     2d6:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <sensor_pin5_handler+0x1>
     2da:	30 97       	sbiw	r30, 0x00	; 0
     2dc:	49 f0       	breq	.+18     	; 0x2f0 <__vector_104+0x92>
     2de:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     2e2:	84 ff       	sbrs	r24, 4
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <__vector_104+0x92>
		/* Note: header pin 5 = io port pin 4 */
		sensor_pin5_handler(sensor_pin5_arg);
     2e6:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <__data_end>
     2ea:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <__data_end+0x1>
     2ee:	19 95       	eicall
	}

	/* Clear the port interrupt flag */
	port->INTFLAGS = PORT_INT0IF_bm;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <__TEXT_REGION_LENGTH__+0x7006ac>
}
     2f6:	ff 91       	pop	r31
     2f8:	ef 91       	pop	r30
     2fa:	bf 91       	pop	r27
     2fc:	af 91       	pop	r26
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	7f 91       	pop	r23
     304:	6f 91       	pop	r22
     306:	5f 91       	pop	r21
     308:	4f 91       	pop	r20
     30a:	3f 91       	pop	r19
     30c:	2f 91       	pop	r18
     30e:	0f 90       	pop	r0
     310:	0b be       	out	0x3b, r0	; 59
     312:	0f 90       	pop	r0
     314:	09 be       	out	0x39, r0	; 57
     316:	0f 90       	pop	r0
     318:	08 be       	out	0x38, r0	; 56
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <sensor_board_irq_connect>:
 *
 * \return  bool        true if the call succeeds, else false.
 */
bool sensor_board_irq_connect(uint32_t gpio_pin,
		SENSOR_IRQ_HANDLER handler, void *arg)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <sensor_board_irq_connect+0x6>
     32a:	1f 92       	push	r1
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	f9 01       	movw	r30, r18
	PORT_t *sensor_port;
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
     332:	41 15       	cp	r20, r1
     334:	51 05       	cpc	r21, r1
     336:	09 f4       	brne	.+2      	; 0x33a <sensor_board_irq_connect+0x16>
     338:	6e c0       	rjmp	.+220    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     33a:	3f b7       	in	r19, 0x3f	; 63
     33c:	3c 83       	std	Y+4, r19	; 0x04
	cpu_irq_disable();
     33e:	f8 94       	cli
	return flags;
     340:	3c 81       	ldd	r19, Y+4	; 0x04

	/* Save the interrupt flag state and disable MCU interrupts. */

	irqflags_t const irq_flags = cpu_irq_save();

	cpu_irq_disable();
     342:	f8 94       	cli

	/* Initialize an interrupt for a specified I/O pin. */

	if (SENSOR_BOARD_PIN3 == gpio_pin) {
     344:	6a 32       	cpi	r22, 0x2A	; 42
     346:	71 05       	cpc	r23, r1
     348:	81 05       	cpc	r24, r1
     34a:	91 05       	cpc	r25, r1
     34c:	e9 f4       	brne	.+58     	; 0x388 <sensor_board_irq_connect+0x64>
		sensor_pin3_handler = handler;
     34e:	40 93 08 21 	sts	0x2108, r20	; 0x802108 <sensor_pin3_handler>
     352:	50 93 09 21 	sts	0x2109, r21	; 0x802109 <sensor_pin3_handler+0x1>
		sensor_pin3_arg     = arg;
     356:	e0 93 06 21 	sts	0x2106, r30	; 0x802106 <sensor_pin3_arg>
     35a:	f0 93 07 21 	sts	0x2107, r31	; 0x802107 <sensor_pin3_arg+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN3_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN3);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     35e:	e0 ea       	ldi	r30, 0xA0	; 160
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN3);
     366:	82 85       	ldd	r24, Z+10	; 0x0a
     368:	84 60       	ori	r24, 0x04	; 4
     36a:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     36c:	8f b7       	in	r24, 0x3f	; 63
     36e:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     370:	f8 94       	cli
	return flags;
     372:	9b 81       	ldd	r25, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     374:	e2 eb       	ldi	r30, 0xB2	; 178
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	80 81       	ld	r24, Z
     37a:	88 7f       	andi	r24, 0xF8	; 248
     37c:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     37e:	80 81       	ld	r24, Z
     380:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     382:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN3,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	45 c0       	rjmp	.+138    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	} else if (SENSOR_BOARD_PIN4 == gpio_pin) {
     388:	6b 32       	cpi	r22, 0x2B	; 43
     38a:	71 05       	cpc	r23, r1
     38c:	81 05       	cpc	r24, r1
     38e:	91 05       	cpc	r25, r1
     390:	e9 f4       	brne	.+58     	; 0x3cc <sensor_board_irq_connect+0xa8>
		sensor_pin4_handler = handler;
     392:	40 93 04 21 	sts	0x2104, r20	; 0x802104 <sensor_pin4_handler>
     396:	50 93 05 21 	sts	0x2105, r21	; 0x802105 <sensor_pin4_handler+0x1>
		sensor_pin4_arg     = arg;
     39a:	e0 93 02 21 	sts	0x2102, r30	; 0x802102 <sensor_pin4_arg>
     39e:	f0 93 03 21 	sts	0x2103, r31	; 0x802103 <sensor_pin4_arg+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN4_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN4);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     3a2:	e0 ea       	ldi	r30, 0xA0	; 160
     3a4:	f6 e0       	ldi	r31, 0x06	; 6
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN4);
     3aa:	82 85       	ldd	r24, Z+10	; 0x0a
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3b0:	8f b7       	in	r24, 0x3f	; 63
     3b2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3b4:	f8 94       	cli
	return flags;
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     3b8:	e3 eb       	ldi	r30, 0xB3	; 179
     3ba:	f6 e0       	ldi	r31, 0x06	; 6
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     3c2:	80 81       	ld	r24, Z
     3c4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3c6:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN4,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	23 c0       	rjmp	.+70     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	} else if (SENSOR_BOARD_PIN5 == gpio_pin) {
     3cc:	6c 32       	cpi	r22, 0x2C	; 44
     3ce:	71 05       	cpc	r23, r1
     3d0:	81 05       	cpc	r24, r1
     3d2:	91 05       	cpc	r25, r1
     3d4:	e9 f4       	brne	.+58     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		sensor_pin5_handler = handler;
     3d6:	40 93 00 21 	sts	0x2100, r20	; 0x802100 <sensor_pin5_handler>
     3da:	50 93 01 21 	sts	0x2101, r21	; 0x802101 <sensor_pin5_handler+0x1>
		sensor_pin5_arg     = arg;
     3de:	e0 93 fe 20 	sts	0x20FE, r30	; 0x8020fe <__data_end>
     3e2:	f0 93 ff 20 	sts	0x20FF, r31	; 0x8020ff <__data_end+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN5_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN5);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     3e6:	e0 ea       	ldi	r30, 0xA0	; 160
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN5);
     3ee:	82 85       	ldd	r24, Z+10	; 0x0a
     3f0:	80 61       	ori	r24, 0x10	; 16
     3f2:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f4:	8f b7       	in	r24, 0x3f	; 63
     3f6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3f8:	f8 94       	cli
	return flags;
     3fa:	99 81       	ldd	r25, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     3fc:	e4 eb       	ldi	r30, 0xB4	; 180
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	80 81       	ld	r24, Z
     402:	88 7f       	andi	r24, 0xF8	; 248
     404:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     406:	80 81       	ld	r24, Z
     408:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     40a:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN5,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 * \return  bool        true if the call succeeds, else false.
 */
bool sensor_board_irq_connect(uint32_t gpio_pin,
		SENSOR_IRQ_HANDLER handler, void *arg)
{
	bool status = false;
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	3f bf       	out	0x3f, r19	; 63

	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
     414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
		return status;
     416:	80 e0       	ldi	r24, 0x00	; 0
	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
}
     418:	24 96       	adiw	r28, 0x04	; 4
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <sensor_board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	64 e0       	ldi	r22, 0x04	; 4
     42a:	80 ea       	ldi	r24, 0xA0	; 160
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <ioport_configure_port_pin>
#elif (EXT_BOARD == SENSORS_XPLAINED_BREADBOARD)
	gpio_configure_pin(SENSOR_BOARD_PIN4, PIN_INPUT_FLAGS);
#endif

	/* Global Interrupt Disable */
	cpu_irq_disable();
     432:	f8 94       	cli

	/* Initialize interrupt vector table support. */
	irq_initialize_vectors();
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	/* Global Interrupt Enable */
	cpu_irq_enable();
     43a:	78 94       	sei
     43c:	08 95       	ret

0000043e <sfh7770_event>:
 * @param  enable    Enable flag: true = enable event, false = disable event
 * @return bool      true if the call succeeds, else false is returned
 */
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	1f 92       	push	r1
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	7b 01       	movw	r14, r22
     45c:	6a 01       	movw	r12, r20
     45e:	a2 2e       	mov	r10, r18
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;

	uint8_t int_set = sensor_bus_get(hal, SFH7770_INT_SET);
     460:	fc 01       	movw	r30, r24
     462:	00 81       	ld	r16, Z
     464:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     466:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	ae 01       	movw	r20, r28
     46e:	4f 5f       	subi	r20, 0xFF	; 255
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	62 e9       	ldi	r22, 0x92	; 146
     474:	c8 01       	movw	r24, r16
     476:	0e 94 c6 0a 	call	0x158c	; 0x158c <bus_read>

	return data;
     47a:	89 81       	ldd	r24, Y+1	; 0x01

	if (sensor_event & SENSOR_EVENT_NEAR_PROXIMITY) {
     47c:	f0 fe       	sbrs	r15, 0
     47e:	1a c0       	rjmp	.+52     	; 0x4b4 <sfh7770_event+0x76>
		if (callback) {
     480:	c1 14       	cp	r12, r1
     482:	d1 04       	cpc	r13, r1
     484:	69 f0       	breq	.+26     	; 0x4a0 <sfh7770_event+0x62>
			event_cb[0] = *callback;
     486:	f6 01       	movw	r30, r12
     488:	40 81       	ld	r20, Z
     48a:	51 81       	ldd	r21, Z+1	; 0x01
     48c:	62 81       	ldd	r22, Z+2	; 0x02
     48e:	73 81       	ldd	r23, Z+3	; 0x03
     490:	40 93 15 20 	sts	0x2015, r20	; 0x802015 <event_cb>
     494:	50 93 16 20 	sts	0x2016, r21	; 0x802016 <event_cb+0x1>
     498:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <event_cb+0x2>
     49c:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <event_cb+0x3>
		}

		if (enable) {
     4a0:	aa 20       	and	r10, r10
     4a2:	21 f0       	breq	.+8      	; 0x4ac <sfh7770_event+0x6e>
			int_set |= INT_MODE_PS;
     4a4:	81 60       	ori	r24, 0x01	; 1
		} else {
			int_set &= ~INT_MODE_PS;
		}

		status = true;
     4a6:	bb 24       	eor	r11, r11
     4a8:	b3 94       	inc	r11
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <sfh7770_event+0x78>
		}

		if (enable) {
			int_set |= INT_MODE_PS;
		} else {
			int_set &= ~INT_MODE_PS;
     4ac:	8e 7f       	andi	r24, 0xFE	; 254
		}

		status = true;
     4ae:	bb 24       	eor	r11, r11
     4b0:	b3 94       	inc	r11
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <sfh7770_event+0x78>
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     4b4:	b1 2c       	mov	r11, r1
		}

		status = true;
	}

	if (sensor_event & SENSOR_EVENT_LOW_LIGHT) {
     4b6:	f3 fe       	sbrs	r15, 3
     4b8:	19 c0       	rjmp	.+50     	; 0x4ec <sfh7770_event+0xae>
		if (callback) {
     4ba:	c1 14       	cp	r12, r1
     4bc:	d1 04       	cpc	r13, r1
     4be:	69 f0       	breq	.+26     	; 0x4da <sfh7770_event+0x9c>
			event_cb[1] = *callback;
     4c0:	f6 01       	movw	r30, r12
     4c2:	40 81       	ld	r20, Z
     4c4:	51 81       	ldd	r21, Z+1	; 0x01
     4c6:	62 81       	ldd	r22, Z+2	; 0x02
     4c8:	73 81       	ldd	r23, Z+3	; 0x03
     4ca:	40 93 19 20 	sts	0x2019, r20	; 0x802019 <event_cb+0x4>
     4ce:	50 93 1a 20 	sts	0x201A, r21	; 0x80201a <event_cb+0x5>
     4d2:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <event_cb+0x6>
     4d6:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <event_cb+0x7>
		}

		if (enable) {
     4da:	aa 20       	and	r10, r10
     4dc:	21 f0       	breq	.+8      	; 0x4e6 <sfh7770_event+0xa8>
			int_set |= INT_MODE_ALS;
     4de:	82 60       	ori	r24, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     4e0:	bb 24       	eor	r11, r11
     4e2:	b3 94       	inc	r11
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <sfh7770_event+0xae>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     4e6:	8d 7f       	andi	r24, 0xFD	; 253
		}

		status = true;
     4e8:	bb 24       	eor	r11, r11
     4ea:	b3 94       	inc	r11
	}

	if (sensor_event & SENSOR_EVENT_HIGH_LIGHT) {
     4ec:	f4 fe       	sbrs	r15, 4
     4ee:	19 c0       	rjmp	.+50     	; 0x522 <sfh7770_event+0xe4>
		if (callback) {
     4f0:	c1 14       	cp	r12, r1
     4f2:	d1 04       	cpc	r13, r1
     4f4:	69 f0       	breq	.+26     	; 0x510 <sfh7770_event+0xd2>
			event_cb[2] = *callback;
     4f6:	f6 01       	movw	r30, r12
     4f8:	40 81       	ld	r20, Z
     4fa:	51 81       	ldd	r21, Z+1	; 0x01
     4fc:	62 81       	ldd	r22, Z+2	; 0x02
     4fe:	73 81       	ldd	r23, Z+3	; 0x03
     500:	40 93 1d 20 	sts	0x201D, r20	; 0x80201d <event_cb+0x8>
     504:	50 93 1e 20 	sts	0x201E, r21	; 0x80201e <event_cb+0x9>
     508:	60 93 1f 20 	sts	0x201F, r22	; 0x80201f <event_cb+0xa>
     50c:	70 93 20 20 	sts	0x2020, r23	; 0x802020 <event_cb+0xb>
		}

		if (enable) {
     510:	aa 20       	and	r10, r10
     512:	21 f0       	breq	.+8      	; 0x51c <sfh7770_event+0xde>
			int_set |= INT_MODE_ALS;
     514:	82 60       	ori	r24, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     516:	bb 24       	eor	r11, r11
     518:	b3 94       	inc	r11
     51a:	03 c0       	rjmp	.+6      	; 0x522 <sfh7770_event+0xe4>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     51c:	8d 7f       	andi	r24, 0xFD	; 253
		}

		status = true;
     51e:	bb 24       	eor	r11, r11
     520:	b3 94       	inc	r11
     522:	89 83       	std	Y+1, r24	; 0x01
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	ae 01       	movw	r20, r28
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	62 e9       	ldi	r22, 0x92	; 146
     530:	c8 01       	movw	r24, r16
     532:	0e 94 08 0b 	call	0x1610	; 0x1610 <bus_write>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     536:	1a 82       	std	Y+2, r1	; 0x02
	bus_read(bus, addr, &data, sizeof(uint8_t));
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	ae 01       	movw	r20, r28
     53e:	4e 5f       	subi	r20, 0xFE	; 254
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	62 e9       	ldi	r22, 0x92	; 146
     544:	c8 01       	movw	r24, r16
     546:	0e 94 c6 0a 	call	0x158c	; 0x158c <bus_read>
	sensor_bus_put(hal, SFH7770_INT_SET, int_set);

	int_set = sensor_bus_get(hal, SFH7770_INT_SET);

	return status;
}
     54a:	8b 2d       	mov	r24, r11
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	bf 90       	pop	r11
     562:	af 90       	pop	r10
     564:	08 95       	ret

00000566 <sfh7770_read>:
 * @param data      The address where data values are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_read(sensor_t *sensor, sensor_read_t type,
		sensor_data_t *data)
{
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	00 d0       	rcall	.+0      	; 0x570 <sfh7770_read+0xa>
     570:	1f 92       	push	r1
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	fc 01       	movw	r30, r24
     578:	8a 01       	movw	r16, r20
	sensor_hal_t *const hal = sensor->hal;
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01

	switch (type) {
     57e:	65 30       	cpi	r22, 0x05	; 5
     580:	31 f0       	breq	.+12     	; 0x58e <sfh7770_read+0x28>
     582:	67 30       	cpi	r22, 0x07	; 7
     584:	01 f1       	breq	.+64     	; 0x5c6 <sfh7770_read+0x60>
     586:	63 30       	cpi	r22, 0x03	; 3
     588:	09 f0       	breq	.+2      	; 0x58c <sfh7770_read+0x26>
     58a:	93 c0       	rjmp	.+294    	; 0x6b2 <sfh7770_read+0x14c>
     58c:	74 c0       	rjmp	.+232    	; 0x676 <sfh7770_read+0x110>
	light_data;

	/* Read and combine two light level data registers
	 *   NOTE:  LSB register must be read first!
	 */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_DATA_LSB,
     58e:	22 e0       	ldi	r18, 0x02	; 2
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	ae 01       	movw	r20, r28
     594:	4f 5f       	subi	r20, 0xFF	; 255
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	6c e8       	ldi	r22, 0x8C	; 140
     59a:	f8 d7       	rcall	.+4080   	; 0x158c <bus_read>
			(uint8_t *)&light_data, sizeof(light_data));

	/* Device uses lux for internal values, so raw is the same as scaled */
	data->light.value = (uint32_t)((light_data.msb << 8) | light_data.lsb);
     59c:	4a 81       	ldd	r20, Y+2	; 0x02
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	54 2f       	mov	r21, r20
     5a2:	44 27       	eor	r20, r20
     5a4:	29 81       	ldd	r18, Y+1	; 0x01
     5a6:	42 2b       	or	r20, r18
     5a8:	05 2e       	mov	r0, r21
     5aa:	00 0c       	add	r0, r0
     5ac:	66 0b       	sbc	r22, r22
     5ae:	77 0b       	sbc	r23, r23
     5b0:	f8 01       	movw	r30, r16
     5b2:	40 83       	st	Z, r20
     5b4:	51 83       	std	Z+1, r21	; 0x01
     5b6:	62 83       	std	Z+2, r22	; 0x02
     5b8:	73 83       	std	Z+3, r23	; 0x03

	return (count == sizeof(light_data));
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	02 97       	sbiw	r24, 0x02	; 2
     5be:	09 f4       	brne	.+2      	; 0x5c2 <sfh7770_read+0x5c>
     5c0:	7d c0       	rjmp	.+250    	; 0x6bc <sfh7770_read+0x156>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
{
	sensor_hal_t *const hal = sensor->hal;

	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);
     5c4:	7b c0       	rjmp	.+246    	; 0x6bc <sfh7770_read+0x156>
		uint8_t ps_data_led3;
	}
	regs;

	/* Read three LED proximity measurements + status */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_PS_STATUS,
     5c6:	24 e0       	ldi	r18, 0x04	; 4
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	ae 01       	movw	r20, r28
     5cc:	4f 5f       	subi	r20, 0xFF	; 255
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	6e e8       	ldi	r22, 0x8E	; 142
     5d2:	dc d7       	rcall	.+4024   	; 0x158c <bus_read>
			(uint8_t *)&regs, sizeof(regs));

	/* Fill in return values based on "scaled" or raw selection */
	if (data->scaled) {
     5d4:	f8 01       	movw	r30, r16
     5d6:	20 89       	ldd	r18, Z+16	; 0x10
     5d8:	22 23       	and	r18, r18
     5da:	79 f1       	breq	.+94     	; 0x63a <sfh7770_read+0xd4>
		/* Use internal device threshold status to determine values */
		data->proximity.value[0]
			= (regs.als_ps_status & PS_LED1_THRESH) ?
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	21 fd       	sbrc	r18, 1
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <sfh7770_read+0x84>
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	ba 01       	movw	r22, r20
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <sfh7770_read+0x8c>
     5ea:	43 e0       	ldi	r20, 0x03	; 3
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	f8 01       	movw	r30, r16
     5f4:	40 83       	st	Z, r20
     5f6:	51 83       	std	Z+1, r21	; 0x01
     5f8:	62 83       	std	Z+2, r22	; 0x02
     5fa:	73 83       	std	Z+3, r23	; 0x03
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[1]
			= (regs.als_ps_status & PS_LED2_THRESH) ?
     5fc:	23 fd       	sbrc	r18, 3
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <sfh7770_read+0xa2>
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	ba 01       	movw	r22, r20
     606:	04 c0       	rjmp	.+8      	; 0x610 <sfh7770_read+0xaa>
     608:	43 e0       	ldi	r20, 0x03	; 3
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	f8 01       	movw	r30, r16
     612:	44 83       	std	Z+4, r20	; 0x04
     614:	55 83       	std	Z+5, r21	; 0x05
     616:	66 83       	std	Z+6, r22	; 0x06
     618:	77 83       	std	Z+7, r23	; 0x07
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[2]
			= (regs.als_ps_status & PS_LED3_THRESH) ?
     61a:	25 fd       	sbrc	r18, 5
     61c:	04 c0       	rjmp	.+8      	; 0x626 <sfh7770_read+0xc0>
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	ba 01       	movw	r22, r20
     624:	04 c0       	rjmp	.+8      	; 0x62e <sfh7770_read+0xc8>
     626:	43 e0       	ldi	r20, 0x03	; 3
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	f8 01       	movw	r30, r16
     630:	40 87       	std	Z+8, r20	; 0x08
     632:	51 87       	std	Z+9, r21	; 0x09
     634:	62 87       	std	Z+10, r22	; 0x0a
     636:	73 87       	std	Z+11, r23	; 0x0b
     638:	19 c0       	rjmp	.+50     	; 0x66c <sfh7770_read+0x106>
				PROXIMITY_NEAR : PROXIMITY_NONE;
	} else {
		/* Use internal raw values */
		data->proximity.value[0] = (int32_t)regs.ps_data_led1;
     63a:	4a 81       	ldd	r20, Y+2	; 0x02
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	f8 01       	movw	r30, r16
     644:	40 83       	st	Z, r20
     646:	51 83       	std	Z+1, r21	; 0x01
     648:	62 83       	std	Z+2, r22	; 0x02
     64a:	73 83       	std	Z+3, r23	; 0x03
		data->proximity.value[1] = (int32_t)regs.ps_data_led2;
     64c:	4b 81       	ldd	r20, Y+3	; 0x03
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	44 83       	std	Z+4, r20	; 0x04
     656:	55 83       	std	Z+5, r21	; 0x05
     658:	66 83       	std	Z+6, r22	; 0x06
     65a:	77 83       	std	Z+7, r23	; 0x07
		data->proximity.value[2] = (int32_t)regs.ps_data_led3;
     65c:	4c 81       	ldd	r20, Y+4	; 0x04
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	40 87       	std	Z+8, r20	; 0x08
     666:	51 87       	std	Z+9, r21	; 0x09
     668:	62 87       	std	Z+10, r22	; 0x0a
     66a:	73 87       	std	Z+11, r23	; 0x0b
	}

	return (count == sizeof(regs));
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	04 97       	sbiw	r24, 0x04	; 4
     670:	29 f1       	breq	.+74     	; 0x6bc <sfh7770_read+0x156>
     672:	20 e0       	ldi	r18, 0x00	; 0
	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);
     674:	23 c0       	rjmp	.+70     	; 0x6bc <sfh7770_read+0x156>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     676:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	ae 01       	movw	r20, r28
     67e:	4f 5f       	subi	r20, 0xFF	; 255
     680:	5f 4f       	sbci	r21, 0xFF	; 255
     682:	6a e8       	ldi	r22, 0x8A	; 138
     684:	83 d7       	rcall	.+3846   	; 0x158c <bus_read>

	return data;
     686:	89 81       	ldd	r24, Y+1	; 0x01
 */
static bool sfh7770_device_id(sensor_hal_t *hal, sensor_data_t *data)
{
	uint8_t const part_id = sensor_bus_get(hal, SFH7770_PART_ID);

	data->device.id = (uint32_t)(part_id & PART_ID_MASK) >> PART_ID_SHIFT;
     688:	48 2f       	mov	r20, r24
     68a:	42 95       	swap	r20
     68c:	4f 70       	andi	r20, 0x0F	; 15
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	f8 01       	movw	r30, r16
     696:	40 83       	st	Z, r20
     698:	51 83       	std	Z+1, r21	; 0x01
     69a:	62 83       	std	Z+2, r22	; 0x02
     69c:	73 83       	std	Z+3, r23	; 0x03
	data->device.version = (uint32_t)(part_id & PART_REV_MASK);
     69e:	8f 70       	andi	r24, 0x0F	; 15
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	84 83       	std	Z+4, r24	; 0x04
     6a8:	95 83       	std	Z+5, r25	; 0x05
     6aa:	a6 83       	std	Z+6, r26	; 0x06
     6ac:	b7 83       	std	Z+7, r27	; 0x07

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);

	case SENSOR_READ_ID:
		return sfh7770_device_id(hal, data);
     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <sfh7770_read+0x156>

	default:
		sensor->err = SENSOR_ERR_FUNCTION;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	92 e8       	ldi	r25, 0x82	; 130
     6b6:	87 83       	std	Z+7, r24	; 0x07
     6b8:	90 87       	std	Z+8, r25	; 0x08
		return false;
     6ba:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     6bc:	82 2f       	mov	r24, r18
     6be:	24 96       	adiw	r28, 0x04	; 4
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <sfh7770_isr>:
 *
 * @param arg       The address of the driver sensor_hal_t descriptor.
 * @return Nothing.
 */
static void sfh7770_isr(volatile void *arg)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	27 97       	sbiw	r28, 0x07	; 7
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	8c 01       	movw	r16, r24
		uint8_t int_set;        /* interrupt status */
	}
	regs;

	/* Do not wait for a busy bus when reading data. */
	hal->bus.no_wait = true;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	f8 01       	movw	r30, r16
     6e6:	86 83       	std	Z+6, r24	; 0x06
	sensor_bus_read(hal, hal->burst_addr, (uint8_t *)&regs, sizeof(regs));
     6e8:	27 e0       	ldi	r18, 0x07	; 7
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	ae 01       	movw	r20, r28
     6ee:	4f 5f       	subi	r20, 0xFF	; 255
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	67 81       	ldd	r22, Z+7	; 0x07
     6f4:	c8 01       	movw	r24, r16
     6f6:	4a d7       	rcall	.+3732   	; 0x158c <bus_read>
	hal->bus.no_wait = false;
     6f8:	f8 01       	movw	r30, r16
     6fa:	16 82       	std	Z+6, r1	; 0x06

	if (STATUS_OK == hal->bus.status) {
     6fc:	85 81       	ldd	r24, Z+5	; 0x05
     6fe:	81 11       	cpse	r24, r1
		static sensor_event_data_t event_data = {.data.scaled = true};

		event_data.data.timestamp = sensor_timestamp();
     700:	bb c0       	rjmp	.+374    	; 0x878 <sfh7770_isr+0x1aa>
     702:	fc d7       	rcall	.+4088   	; 0x16fc <sensor_timestamp>
     704:	e0 e0       	ldi	r30, 0x00	; 0
     706:	f0 e2       	ldi	r31, 0x20	; 32
     708:	60 8b       	std	Z+16, r22	; 0x10
     70a:	71 8b       	std	Z+17, r23	; 0x11
     70c:	82 8b       	std	Z+18, r24	; 0x12
     70e:	93 8b       	std	Z+19, r25	; 0x13
		event_data.event = SENSOR_EVENT_UNKNOWN;
     710:	10 82       	st	Z, r1
     712:	11 82       	std	Z+1, r1	; 0x01

		/*
		 * Determine the interrupt source then combine measurement
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	80 76       	andi	r24, 0x60	; 96

		uint16_t const light_level
			= ((regs.als_data_msb << 8) | regs.als_data_lsb);

		switch (int_source) {
     718:	80 32       	cpi	r24, 0x20	; 32
     71a:	09 f4       	brne	.+2      	; 0x71e <sfh7770_isr+0x50>
     71c:	4e c0       	rjmp	.+156    	; 0x7ba <sfh7770_isr+0xec>
     71e:	18 f4       	brcc	.+6      	; 0x726 <sfh7770_isr+0x58>
     720:	88 23       	and	r24, r24
     722:	41 f0       	breq	.+16     	; 0x734 <sfh7770_isr+0x66>
     724:	a9 c0       	rjmp	.+338    	; 0x878 <sfh7770_isr+0x1aa>
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	09 f4       	brne	.+2      	; 0x72c <sfh7770_isr+0x5e>
     72a:	47 c0       	rjmp	.+142    	; 0x7ba <sfh7770_isr+0xec>
     72c:	80 36       	cpi	r24, 0x60	; 96
     72e:	09 f0       	breq	.+2      	; 0x732 <sfh7770_isr+0x64>
     730:	a3 c0       	rjmp	.+326    	; 0x878 <sfh7770_isr+0x1aa>
     732:	43 c0       	rjmp	.+134    	; 0x7ba <sfh7770_isr+0xec>
		 * Determine the interrupt source then combine measurement
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);

		uint16_t const light_level
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	98 2f       	mov	r25, r24
     73a:	88 27       	eor	r24, r24
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	82 2b       	or	r24, r18

		switch (int_source) {
		case INT_SOURCE_ALS:

			/* Determine if low or high light interrupt */
			if (light_level >= high_light_threshold) {
     740:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <high_light_threshold>
     744:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <high_light_threshold+0x1>
     748:	82 17       	cp	r24, r18
     74a:	93 07       	cpc	r25, r19
     74c:	b8 f0       	brcs	.+46     	; 0x77c <sfh7770_isr+0xae>
				event_data.event = SENSOR_EVENT_HIGH_LIGHT;
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f0 e2       	ldi	r31, 0x20	; 32
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e1       	ldi	r19, 0x10	; 16
     756:	20 83       	st	Z, r18
     758:	31 83       	std	Z+1, r19	; 0x01
				event_data.data.light.value = light_level;
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	84 83       	std	Z+4, r24	; 0x04
     760:	95 83       	std	Z+5, r25	; 0x05
     762:	a6 83       	std	Z+6, r26	; 0x06
     764:	b7 83       	std	Z+7, r27	; 0x07

				(event_cb[2].handler)(&event_data,
     766:	e5 e1       	ldi	r30, 0x15	; 21
     768:	f0 e2       	ldi	r31, 0x20	; 32
     76a:	62 85       	ldd	r22, Z+10	; 0x0a
     76c:	73 85       	ldd	r23, Z+11	; 0x0b
     76e:	00 84       	ldd	r0, Z+8	; 0x08
     770:	f1 85       	ldd	r31, Z+9	; 0x09
     772:	e0 2d       	mov	r30, r0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e2       	ldi	r25, 0x20	; 32
     778:	19 95       	eicall
     77a:	7e c0       	rjmp	.+252    	; 0x878 <sfh7770_isr+0x1aa>
						event_cb[2].arg);
			} else if (light_level <= low_light_threshold) {
     77c:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <low_light_threshold>
     780:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <low_light_threshold+0x1>
     784:	28 17       	cp	r18, r24
     786:	39 07       	cpc	r19, r25
     788:	08 f4       	brcc	.+2      	; 0x78c <sfh7770_isr+0xbe>
     78a:	76 c0       	rjmp	.+236    	; 0x878 <sfh7770_isr+0x1aa>
				event_data.event = SENSOR_EVENT_LOW_LIGHT;
     78c:	e0 e0       	ldi	r30, 0x00	; 0
     78e:	f0 e2       	ldi	r31, 0x20	; 32
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	38 e0       	ldi	r19, 0x08	; 8
     794:	20 83       	st	Z, r18
     796:	31 83       	std	Z+1, r19	; 0x01
				event_data.data.light.value = light_level;
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	84 83       	std	Z+4, r24	; 0x04
     79e:	95 83       	std	Z+5, r25	; 0x05
     7a0:	a6 83       	std	Z+6, r26	; 0x06
     7a2:	b7 83       	std	Z+7, r27	; 0x07

				(event_cb[1].handler)(&event_data,
     7a4:	e5 e1       	ldi	r30, 0x15	; 21
     7a6:	f0 e2       	ldi	r31, 0x20	; 32
     7a8:	66 81       	ldd	r22, Z+6	; 0x06
     7aa:	77 81       	ldd	r23, Z+7	; 0x07
     7ac:	04 80       	ldd	r0, Z+4	; 0x04
     7ae:	f5 81       	ldd	r31, Z+5	; 0x05
     7b0:	e0 2d       	mov	r30, r0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e2       	ldi	r25, 0x20	; 32
     7b6:	19 95       	eicall
     7b8:	5f c0       	rjmp	.+190    	; 0x878 <sfh7770_isr+0x1aa>

		case INT_SOURCE_LED1:
		case INT_SOURCE_LED2:
		case INT_SOURCE_LED3:

			event_data.event = SENSOR_EVENT_NEAR_PROXIMITY;
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <__data_start>
     7c2:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <__data_start+0x1>

			if (int_source == INT_SOURCE_LED1) {
     7c6:	80 32       	cpi	r24, 0x20	; 32
     7c8:	39 f4       	brne	.+14     	; 0x7d8 <sfh7770_isr+0x10a>
				event_data.channel = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_start+0x2>
     7d2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <__data_start+0x3>
     7d6:	0f c0       	rjmp	.+30     	; 0x7f6 <sfh7770_isr+0x128>
			} else if (int_source == INT_SOURCE_LED2) {
     7d8:	80 34       	cpi	r24, 0x40	; 64
     7da:	39 f4       	brne	.+14     	; 0x7ea <sfh7770_isr+0x11c>
				event_data.channel = 2;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_start+0x2>
     7e4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <__data_start+0x3>
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <sfh7770_isr+0x128>
			} else { /* INT_SOURCE_LED3 */
				event_data.channel = 3;
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_start+0x2>
     7f2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <__data_start+0x3>

			/* Use internal device threshold status to
			 * determine scaled values.
			 */
			event_data.data.proximity.value[0]
				= (regs.als_ps_status & PS_LED1_THRESH) ?
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	81 fd       	sbrc	r24, 1
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <sfh7770_isr+0x136>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	ba 01       	movw	r22, r20
     802:	04 c0       	rjmp	.+8      	; 0x80c <sfh7770_isr+0x13e>
     804:	43 e0       	ldi	r20, 0x03	; 3
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 93 04 20 	sts	0x2004, r20	; 0x802004 <__data_start+0x4>
     810:	50 93 05 20 	sts	0x2005, r21	; 0x802005 <__data_start+0x5>
     814:	60 93 06 20 	sts	0x2006, r22	; 0x802006 <__data_start+0x6>
     818:	70 93 07 20 	sts	0x2007, r23	; 0x802007 <__data_start+0x7>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[1]
				= (regs.als_ps_status & PS_LED2_THRESH) ?
     81c:	83 fd       	sbrc	r24, 3
     81e:	04 c0       	rjmp	.+8      	; 0x828 <sfh7770_isr+0x15a>
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	ba 01       	movw	r22, r20
     826:	04 c0       	rjmp	.+8      	; 0x830 <sfh7770_isr+0x162>
     828:	43 e0       	ldi	r20, 0x03	; 3
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	40 93 08 20 	sts	0x2008, r20	; 0x802008 <__data_start+0x8>
     834:	50 93 09 20 	sts	0x2009, r21	; 0x802009 <__data_start+0x9>
     838:	60 93 0a 20 	sts	0x200A, r22	; 0x80200a <__data_start+0xa>
     83c:	70 93 0b 20 	sts	0x200B, r23	; 0x80200b <__data_start+0xb>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[2]
				= (regs.als_ps_status & PS_LED3_THRESH) ?
     840:	85 fd       	sbrc	r24, 5
     842:	04 c0       	rjmp	.+8      	; 0x84c <sfh7770_isr+0x17e>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	dc 01       	movw	r26, r24
     84a:	04 c0       	rjmp	.+8      	; 0x854 <sfh7770_isr+0x186>
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <__data_start+0xc>
     858:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <__data_start+0xd>
     85c:	a0 93 0e 20 	sts	0x200E, r26	; 0x80200e <__data_start+0xe>
     860:	b0 93 0f 20 	sts	0x200F, r27	; 0x80200f <__data_start+0xf>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			(event_cb[0].handler)(&event_data, event_cb[0].arg);
     864:	e5 e1       	ldi	r30, 0x15	; 21
     866:	f0 e2       	ldi	r31, 0x20	; 32
     868:	62 81       	ldd	r22, Z+2	; 0x02
     86a:	73 81       	ldd	r23, Z+3	; 0x03
     86c:	01 90       	ld	r0, Z+
     86e:	f0 81       	ld	r31, Z
     870:	e0 2d       	mov	r30, r0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e2       	ldi	r25, 0x20	; 32
     876:	19 95       	eicall
		}
	}
}
     878:	27 96       	adiw	r28, 0x07	; 7
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <sfh7770_ioctl>:
 * @param  cmd   Command to execute
 * @param  arg   Argument for command (varies)
 * @return bool  true if the call succeeds, else false is returned.
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	2c 97       	sbiw	r28, 0x0c	; 12
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	9c 01       	movw	r18, r24
	sensor_hal_t *const hal = sensor->hal;
     8a4:	fc 01       	movw	r30, r24
     8a6:	00 81       	ld	r16, Z
     8a8:	11 81       	ldd	r17, Z+1	; 0x01

	bool status = false;

	switch (cmd) {
     8aa:	86 2f       	mov	r24, r22
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	fc 01       	movw	r30, r24
     8b0:	3e 97       	sbiw	r30, 0x0e	; 14
     8b2:	ee 30       	cpi	r30, 0x0E	; 14
     8b4:	f1 05       	cpc	r31, r1
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <sfh7770_ioctl+0x32>
     8b8:	e9 c1       	rjmp	.+978    	; 0xc8c <sfh7770_ioctl+0x404>
     8ba:	7a 01       	movw	r14, r20
     8bc:	d9 01       	movw	r26, r18
     8be:	88 27       	eor	r24, r24
     8c0:	e6 50       	subi	r30, 0x06	; 6
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	8f 4f       	sbci	r24, 0xFF	; 255
     8c6:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__tablejump2__>
	case SENSOR_SET_STATE:
		status
			= sfh7770_set_state(hal, sensor->type,
     8ca:	14 96       	adiw	r26, 0x04	; 4
     8cc:	2d 91       	ld	r18, X+
     8ce:	3c 91       	ld	r19, X
     8d0:	15 97       	sbiw	r26, 0x05	; 5
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_state(sensor_hal_t *hal, sensor_type_t type,
		sensor_state_t state)
{
	switch (state) {
     8d2:	fa 01       	movw	r30, r20
     8d4:	80 81       	ld	r24, Z
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	e1 f0       	breq	.+56     	; 0x912 <sfh7770_ioctl+0x8a>
     8da:	82 30       	cpi	r24, 0x02	; 2
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <sfh7770_ioctl+0x58>
     8de:	dd c1       	rjmp	.+954    	; 0xc9a <sfh7770_ioctl+0x412>
	case SENSOR_STATE_SLEEP:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     8e0:	20 32       	cpi	r18, 0x20	; 32
     8e2:	31 05       	cpc	r19, r1
     8e4:	59 f4       	brne	.+22     	; 0x8fc <sfh7770_ioctl+0x74>
     8e6:	19 86       	std	Y+9, r1	; 0x09
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	ae 01       	movw	r20, r28
     8ee:	47 5f       	subi	r20, 0xF7	; 247
     8f0:	5f 4f       	sbci	r21, 0xFF	; 255
     8f2:	60 e8       	ldi	r22, 0x80	; 128
     8f4:	c8 01       	movw	r24, r16
     8f6:	8c d6       	rcall	.+3352   	; 0x1610 <bus_write>

	default:
		return false;
	}

	return true;
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	e4 c1       	rjmp	.+968    	; 0xcc4 <sfh7770_ioctl+0x43c>
     8fc:	1a 86       	std	Y+10, r1	; 0x0a
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	ae 01       	movw	r20, r28
     904:	46 5f       	subi	r20, 0xF6	; 246
     906:	5f 4f       	sbci	r21, 0xFF	; 255
     908:	61 e8       	ldi	r22, 0x81	; 129
     90a:	c8 01       	movw	r24, r16
     90c:	81 d6       	rcall	.+3330   	; 0x1610 <bus_write>
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	d9 c1       	rjmp	.+946    	; 0xcc4 <sfh7770_ioctl+0x43c>
		}

		break;

	case SENSOR_STATE_NORMAL:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     912:	20 32       	cpi	r18, 0x20	; 32
     914:	31 05       	cpc	r19, r1
     916:	61 f4       	brne	.+24     	; 0x930 <sfh7770_ioctl+0xa8>
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	8b 87       	std	Y+11, r24	; 0x0b
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	ae 01       	movw	r20, r28
     922:	45 5f       	subi	r20, 0xF5	; 245
     924:	5f 4f       	sbci	r21, 0xFF	; 255
     926:	60 e8       	ldi	r22, 0x80	; 128
     928:	c8 01       	movw	r24, r16
     92a:	72 d6       	rcall	.+3300   	; 0x1610 <bus_write>

	default:
		return false;
	}

	return true;
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	ca c1       	rjmp	.+916    	; 0xcc4 <sfh7770_ioctl+0x43c>
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	8c 87       	std	Y+12, r24	; 0x0c
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	ae 01       	movw	r20, r28
     93a:	44 5f       	subi	r20, 0xF4	; 244
     93c:	5f 4f       	sbci	r21, 0xFF	; 255
     93e:	61 e8       	ldi	r22, 0x81	; 129
     940:	c8 01       	movw	r24, r16
     942:	66 d6       	rcall	.+3276   	; 0x1610 <bus_write>
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	be c1       	rjmp	.+892    	; 0xcc4 <sfh7770_ioctl+0x43c>
				*((sensor_state_t *)arg));
		break;

	case SENSOR_ENABLE_EVENT:
		status
			= sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     948:	fa 01       	movw	r30, r20
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	21 e0       	ldi	r18, 0x01	; 1
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	cd 01       	movw	r24, r26
     956:	73 dd       	rcall	.-1306   	; 0x43e <sfh7770_event>
     958:	28 2f       	mov	r18, r24
				true);
		break;
     95a:	b4 c1       	rjmp	.+872    	; 0xcc4 <sfh7770_ioctl+0x43c>

	case SENSOR_DISABLE_EVENT:
		status = sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     95c:	fa 01       	movw	r30, r20
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	cd 01       	movw	r24, r26
     96a:	69 dd       	rcall	.-1326   	; 0x43e <sfh7770_event>
     96c:	28 2f       	mov	r18, r24
				false);
		break;
     96e:	aa c1       	rjmp	.+852    	; 0xcc4 <sfh7770_ioctl+0x43c>

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
     970:	19 96       	adiw	r26, 0x09	; 9
     972:	cd 90       	ld	r12, X+
     974:	dc 90       	ld	r13, X
     976:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	reg_thresh;

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;
     978:	fa 01       	movw	r30, r20
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	22 81       	ldd	r18, Z+2	; 0x02
     97e:	9b 83       	std	Y+3, r25	; 0x03

	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     980:	80 81       	ld	r24, Z
     982:	89 30       	cpi	r24, 0x09	; 9
     984:	09 f4       	brne	.+2      	; 0x988 <sfh7770_ioctl+0x100>
     986:	47 c0       	rjmp	.+142    	; 0xa16 <sfh7770_ioctl+0x18e>
     988:	8a 30       	cpi	r24, 0x0A	; 10
     98a:	21 f0       	breq	.+8      	; 0x994 <sfh7770_ioctl+0x10c>
     98c:	88 30       	cpi	r24, 0x08	; 8
     98e:	09 f0       	breq	.+2      	; 0x992 <sfh7770_ioctl+0x10a>
     990:	56 c0       	rjmp	.+172    	; 0xa3e <sfh7770_ioctl+0x1b6>
     992:	2d c0       	rjmp	.+90     	; 0x9ee <sfh7770_ioctl+0x166>
		                                 **/

		/* Write to sensor register based on current channel (LED
		 * selection)
		 */
		switch (channel) {
     994:	ff ef       	ldi	r31, 0xFF	; 255
     996:	cf 16       	cp	r12, r31
     998:	df 06       	cpc	r13, r31
     99a:	51 f0       	breq	.+20     	; 0x9b0 <sfh7770_ioctl+0x128>
     99c:	0c f4       	brge	.+2      	; 0x9a0 <sfh7770_ioctl+0x118>
     99e:	51 c0       	rjmp	.+162    	; 0xa42 <sfh7770_ioctl+0x1ba>
     9a0:	c6 01       	movw	r24, r12
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	03 97       	sbiw	r24, 0x03	; 3
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <sfh7770_ioctl+0x122>
     9a8:	4c c0       	rjmp	.+152    	; 0xa42 <sfh7770_ioctl+0x1ba>

		case 1:
		case 2:
		case 3:
			led_count = 1;
			index = channel - 1;
     9aa:	ca 94       	dec	r12

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <sfh7770_ioctl+0x12c>
     9b0:	82 e0       	ldi	r24, 0x02	; 2
		 * selection)
		 */
		switch (channel) {
		case SENSOR_CHANNEL_ALL:    /* "channel -1" = all 3 LEDs */
			led_count = 3;
			index = 0;
     9b2:	c1 2c       	mov	r12, r1

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     9b4:	dc 2c       	mov	r13, r12
     9b6:	c8 0e       	add	r12, r24
     9b8:	c3 94       	inc	r12
     9ba:	f7 01       	movw	r30, r14
     9bc:	81 81       	ldd	r24, Z+1	; 0x01
     9be:	88 87       	std	Y+8, r24	; 0x08
     9c0:	63 e9       	ldi	r22, 0x93	; 147
     9c2:	6d 0d       	add	r22, r13
     9c4:	21 e0       	ldi	r18, 0x01	; 1
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	ae 01       	movw	r20, r28
     9ca:	48 5f       	subi	r20, 0xF8	; 248
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	c8 01       	movw	r24, r16
     9d0:	1f d6       	rcall	.+3134   	; 0x1610 <bus_write>
			sensor_bus_put(hal, (SFH7770_PS_THR_LED1 + index),
					(uint8_t)threshold->value);

			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
     9d2:	8d 2d       	mov	r24, r13
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	be 01       	movw	r22, r28
     9dc:	6d 5f       	subi	r22, 0xFD	; 253
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	48 96       	adiw	r24, 0x18	; 24
     9e2:	58 d6       	rcall	.+3248   	; 0x1694 <nvram_write>
			++index;
     9e4:	d3 94       	inc	r13

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     9e6:	dc 10       	cpse	r13, r12
     9e8:	e8 cf       	rjmp	.-48     	; 0x9ba <sfh7770_ioctl+0x132>
			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
			++index;
		}

		result = true;
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	6b c1       	rjmp	.+726    	; 0xcc4 <sfh7770_ioctl+0x43c>
		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:         /* lower light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     9ee:	99 83       	std	Y+1, r25	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     9f0:	2a 83       	std	Y+2, r18	; 0x02
		low_light_threshold = (uint16_t)threshold->value;
     9f2:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <low_light_threshold>
     9f6:	20 93 0f 21 	sts	0x210F, r18	; 0x80210f <low_light_threshold+0x1>
		if (sensor_bus_write(hal, SFH7770_ALS_LO_THR_LSB, &reg_thresh,
     9fa:	22 e0       	ldi	r18, 0x02	; 2
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	ae 01       	movw	r20, r28
     a00:	4f 5f       	subi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	68 e9       	ldi	r22, 0x98	; 152
     a06:	c8 01       	movw	r24, r16
     a08:	03 d6       	rcall	.+3078   	; 0x1610 <bus_write>
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	02 97       	sbiw	r24, 0x02	; 2
     a0e:	09 f4       	brne	.+2      	; 0xa12 <sfh7770_ioctl+0x18a>
     a10:	59 c1       	rjmp	.+690    	; 0xcc4 <sfh7770_ioctl+0x43c>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	57 c1       	rjmp	.+686    	; 0xcc4 <sfh7770_ioctl+0x43c>

		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT:        /* upper light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     a16:	99 83       	std	Y+1, r25	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     a18:	2a 83       	std	Y+2, r18	; 0x02
		high_light_threshold = (uint16_t)threshold->value;
     a1a:	90 93 10 21 	sts	0x2110, r25	; 0x802110 <high_light_threshold>
     a1e:	20 93 11 21 	sts	0x2111, r18	; 0x802111 <high_light_threshold+0x1>
		if (sensor_bus_write(hal, SFH7770_ALS_UP_THR_LSB, &reg_thresh,
     a22:	22 e0       	ldi	r18, 0x02	; 2
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	ae 01       	movw	r20, r28
     a28:	4f 5f       	subi	r20, 0xFF	; 255
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	66 e9       	ldi	r22, 0x96	; 150
     a2e:	c8 01       	movw	r24, r16
     a30:	ef d5       	rcall	.+3038   	; 0x1610 <bus_write>
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	02 97       	sbiw	r24, 0x02	; 2
     a36:	09 f4       	brne	.+2      	; 0xa3a <sfh7770_ioctl+0x1b2>
     a38:	45 c1       	rjmp	.+650    	; 0xcc4 <sfh7770_ioctl+0x43c>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	43 c1       	rjmp	.+646    	; 0xcc4 <sfh7770_ioctl+0x43c>

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;

	bool result = false;
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	41 c1       	rjmp	.+642    	; 0xcc4 <sfh7770_ioctl+0x43c>
			led_count = 1;
			index = channel - 1;
			break;

		default:
			return false;   /* invalid channel selection */
     a42:	20 e0       	ldi	r18, 0x00	; 0
		break;

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;
     a44:	3f c1       	rjmp	.+638    	; 0xcc4 <sfh7770_ioctl+0x43c>
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     a46:	fa 01       	movw	r30, r20
     a48:	80 81       	ld	r24, Z
     a4a:	89 30       	cpi	r24, 0x09	; 9
     a4c:	79 f1       	breq	.+94     	; 0xaac <sfh7770_ioctl+0x224>
     a4e:	8a 30       	cpi	r24, 0x0A	; 10
     a50:	21 f0       	breq	.+8      	; 0xa5a <sfh7770_ioctl+0x1d2>
     a52:	88 30       	cpi	r24, 0x08	; 8
     a54:	09 f0       	breq	.+2      	; 0xa58 <sfh7770_ioctl+0x1d0>
     a56:	23 c1       	rjmp	.+582    	; 0xc9e <sfh7770_ioctl+0x416>
     a58:	20 c0       	rjmp	.+64     	; 0xa9a <sfh7770_ioctl+0x212>
		status = sfh7770_set_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;

	case SENSOR_GET_THRESHOLD:
		status = sfh7770_get_threshold(hal, sensor->channel,
     a5a:	19 96       	adiw	r26, 0x09	; 9
     a5c:	6d 91       	ld	r22, X+
     a5e:	7c 91       	ld	r23, X
     a60:	1a 97       	sbiw	r26, 0x0a	; 10
{
	bool result = false;

	switch (threshold->type) {  /* check threshold type */
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
     a62:	6f 3f       	cpi	r22, 0xFF	; 255
     a64:	ff ef       	ldi	r31, 0xFF	; 255
     a66:	7f 07       	cpc	r23, r31
     a68:	31 f0       	breq	.+12     	; 0xa76 <sfh7770_ioctl+0x1ee>
			/* if "all channels", just use chan #1 value */
			channel = 1;
		}

		if ((channel >= 1) && (channel <= 3)) {
     a6a:	cb 01       	movw	r24, r22
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	03 97       	sbiw	r24, 0x03	; 3
     a70:	08 f0       	brcs	.+2      	; 0xa74 <sfh7770_ioctl+0x1ec>
     a72:	17 c1       	rjmp	.+558    	; 0xca2 <sfh7770_ioctl+0x41a>
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <sfh7770_ioctl+0x1f2>

	switch (threshold->type) {  /* check threshold type */
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
			/* if "all channels", just use chan #1 value */
			channel = 1;
     a76:	61 e0       	ldi	r22, 0x01	; 1
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     a78:	70 e0       	ldi	r23, 0x00	; 0
	bus_read(bus, addr, &data, sizeof(uint8_t));
     a7a:	19 82       	std	Y+1, r1	; 0x01
     a7c:	6e 56       	subi	r22, 0x6E	; 110
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	ae 01       	movw	r20, r28
     a84:	4f 5f       	subi	r20, 0xFF	; 255
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	c8 01       	movw	r24, r16
     a8a:	80 d5       	rcall	.+2816   	; 0x158c <bus_read>

	return data;
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
		}

		if ((channel >= 1) && (channel <= 3)) {
			/* Read corresponding register for LED channel */
			threshold->value = (uint16_t)sensor_bus_get(hal,
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	f7 01       	movw	r30, r14
     a92:	81 83       	std	Z+1, r24	; 0x01
     a94:	92 83       	std	Z+2, r25	; 0x02
					(SFH7770_PS_THR_LED1 + channel - 1));
			result = true;
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	15 c1       	rjmp	.+554    	; 0xcc4 <sfh7770_ioctl+0x43c>
		}

		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:  /* low light level threshold */
		threshold->value = low_light_threshold;
     a9a:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <low_light_threshold>
     a9e:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <low_light_threshold+0x1>
     aa2:	fa 01       	movw	r30, r20
     aa4:	81 83       	std	Z+1, r24	; 0x01
     aa6:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	0c c1       	rjmp	.+536    	; 0xcc4 <sfh7770_ioctl+0x43c>
		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT: /* high light level threshold */
		threshold->value = high_light_threshold;
     aac:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <high_light_threshold>
     ab0:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <high_light_threshold+0x1>
     ab4:	fa 01       	movw	r30, r20
     ab6:	81 83       	std	Z+1, r24	; 0x01
     ab8:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	03 c1       	rjmp	.+518    	; 0xcc4 <sfh7770_ioctl+0x43c>
				(sensor_threshold_desc_t *)arg);
		break;

	case SENSOR_SET_SAMPLE_RATE:
		status
			= sfh7770_set_rate(hal, sensor->type,
     abe:	fa 01       	movw	r30, r20
     ac0:	e0 80       	ld	r14, Z
     ac2:	f1 80       	ldd	r15, Z+1	; 0x01
     ac4:	14 96       	adiw	r26, 0x04	; 4
     ac6:	cd 90       	ld	r12, X+
     ac8:	dc 90       	ld	r13, X
     aca:	15 97       	sbiw	r26, 0x05	; 5
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
     acc:	c5 fe       	sbrs	r12, 5
     ace:	f7 c0       	rjmp	.+494    	; 0xcbe <sfh7770_ioctl+0x436>
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
			if (light_rate_table[i].rate == rate_hz) {
     ad0:	e1 14       	cp	r14, r1
     ad2:	f1 04       	cpc	r15, r1
     ad4:	e1 f0       	breq	.+56     	; 0xb0e <sfh7770_ioctl+0x286>
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	ef 16       	cp	r14, r31
     ada:	f1 04       	cpc	r15, r1
     adc:	79 f0       	breq	.+30     	; 0xafc <sfh7770_ioctl+0x274>
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	e8 16       	cp	r14, r24
     ae2:	f1 04       	cpc	r15, r1
     ae4:	71 f0       	breq	.+28     	; 0xb02 <sfh7770_ioctl+0x27a>
     ae6:	95 e0       	ldi	r25, 0x05	; 5
     ae8:	e9 16       	cp	r14, r25
     aea:	f1 04       	cpc	r15, r1
     aec:	69 f0       	breq	.+26     	; 0xb08 <sfh7770_ioctl+0x280>
     aee:	ea e0       	ldi	r30, 0x0A	; 10
     af0:	ee 16       	cp	r14, r30
     af2:	f1 04       	cpc	r15, r1
     af4:	11 f5       	brne	.+68     	; 0xb3a <sfh7770_ioctl+0x2b2>
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0b c0       	rjmp	.+22     	; 0xb12 <sfh7770_ioctl+0x28a>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <sfh7770_ioctl+0x28a>
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <sfh7770_ioctl+0x28a>
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <sfh7770_ioctl+0x28a>
			if (light_rate_table[i].rate == rate_hz) {
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
				sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
     b12:	fc 01       	movw	r30, r24
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	8e 0f       	add	r24, r30
     b1a:	9f 1f       	adc	r25, r31
     b1c:	fc 01       	movw	r30, r24
     b1e:	e6 53       	subi	r30, 0x36	; 54
     b20:	ff 4d       	sbci	r31, 0xDF	; 223
     b22:	82 81       	ldd	r24, Z+2	; 0x02
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     b24:	8f 83       	std	Y+7, r24	; 0x07
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	ae 01       	movw	r20, r28
     b2c:	49 5f       	subi	r20, 0xF9	; 249
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	66 e8       	ldi	r22, 0x86	; 134
     b32:	c8 01       	movw	r24, r16
     b34:	6d d5       	rcall	.+2778   	; 0x1610 <bus_write>
						light_rate_table[i].reg_val);
				status = true;
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	c3 c0       	rjmp	.+390    	; 0xcc0 <sfh7770_ioctl+0x438>
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     b3a:	d0 fc       	sbrc	r13, 0
     b3c:	ba c0       	rjmp	.+372    	; 0xcb2 <sfh7770_ioctl+0x42a>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	c1 c0       	rjmp	.+386    	; 0xcc4 <sfh7770_ioctl+0x43c>
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
			if (prox_rate_table[i].rate == rate_hz) {
     b42:	43 81       	ldd	r20, Z+3	; 0x03
     b44:	54 81       	ldd	r21, Z+4	; 0x04
     b46:	e4 16       	cp	r14, r20
     b48:	f5 06       	cpc	r15, r21
     b4a:	b9 f4       	brne	.+46     	; 0xb7a <sfh7770_ioctl+0x2f2>
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <sfh7770_ioctl+0x2ca>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
				sensor_bus_put(hal, SFH7770_PS_INTERVAL,
     b52:	fc 01       	movw	r30, r24
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	8e 0f       	add	r24, r30
     b5a:	9f 1f       	adc	r25, r31
     b5c:	fc 01       	movw	r30, r24
     b5e:	e4 55       	subi	r30, 0x54	; 84
     b60:	ff 4d       	sbci	r31, 0xDF	; 223
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	8e 83       	std	Y+6, r24	; 0x06
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	ae 01       	movw	r20, r28
     b6c:	4a 5f       	subi	r20, 0xFA	; 250
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	65 e8       	ldi	r22, 0x85	; 133
     b72:	c8 01       	movw	r24, r16
     b74:	4d d5       	rcall	.+2714   	; 0x1610 <bus_write>
						prox_rate_table[i].reg_val);
				status = true;
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	a5 c0       	rjmp	.+330    	; 0xcc4 <sfh7770_ioctl+0x43c>
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	33 96       	adiw	r30, 0x03	; 3
     b7e:	8a 30       	cpi	r24, 0x0A	; 10
     b80:	91 05       	cpc	r25, r1
     b82:	f9 f6       	brne	.-66     	; 0xb42 <sfh7770_ioctl+0x2ba>
     b84:	9f c0       	rjmp	.+318    	; 0xcc4 <sfh7770_ioctl+0x43c>

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
		if (current_table[i].level == *level_mA) {
     b86:	fa 01       	movw	r30, r20
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	45 30       	cpi	r20, 0x05	; 5
     b8e:	51 05       	cpc	r21, r1
     b90:	51 f0       	breq	.+20     	; 0xba6 <sfh7770_ioctl+0x31e>
     b92:	e9 ed       	ldi	r30, 0xD9	; 217
     b94:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
		if (current_table[i].level == *level_mA) {
     b9a:	23 81       	ldd	r18, Z+3	; 0x03
     b9c:	34 81       	ldd	r19, Z+4	; 0x04
     b9e:	24 17       	cp	r18, r20
     ba0:	35 07       	cpc	r19, r21
     ba2:	a9 f4       	brne	.+42     	; 0xbce <sfh7770_ioctl+0x346>
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <sfh7770_ioctl+0x322>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
			= sfh7770_set_rate(hal, sensor->type,
				*((uint16_t *)arg));
		break;

	case SENSOR_SET_CURRENT:
		status = sfh7770_set_current(hal, sensor->channel,
     baa:	19 96       	adiw	r26, 0x09	; 9
     bac:	ed 90       	ld	r14, X+
     bae:	fc 90       	ld	r15, X
     bb0:	1a 97       	sbiw	r26, 0x0a	; 10
	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
		if (current_table[i].level == *level_mA) {
			curr_setting = current_table[i].field_val;
     bb2:	fc 01       	movw	r30, r24
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	8e 0f       	add	r24, r30
     bba:	9f 1f       	adc	r25, r31
     bbc:	fc 01       	movw	r30, r24
     bbe:	e7 52       	subi	r30, 0x27	; 39
     bc0:	ff 4d       	sbci	r31, 0xDF	; 223
     bc2:	d2 80       	ldd	r13, Z+2	; 0x02
	}

	if (status == true) {   /* if entry was found in table */
		uint8_t reg_val;

		if (channel == SENSOR_CHANNEL_ALL) {
     bc4:	ff ef       	ldi	r31, 0xFF	; 255
     bc6:	ef 16       	cp	r14, r31
     bc8:	ff 06       	cpc	r15, r31
     bca:	69 f5       	brne	.+90     	; 0xc26 <sfh7770_ioctl+0x39e>
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <sfh7770_ioctl+0x354>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	33 96       	adiw	r30, 0x03	; 3
     bd2:	87 30       	cpi	r24, 0x07	; 7
     bd4:	91 05       	cpc	r25, r1
     bd6:	09 f7       	brne	.-62     	; 0xb9a <sfh7770_ioctl+0x312>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     bda:	74 c0       	rjmp	.+232    	; 0xcc4 <sfh7770_ioctl+0x43c>
	bus_read(bus, addr, &data, sizeof(uint8_t));
     bdc:	19 82       	std	Y+1, r1	; 0x01
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	ae 01       	movw	r20, r28
     be4:	4f 5f       	subi	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	62 e8       	ldi	r22, 0x82	; 130
     bea:	c8 01       	movw	r24, r16
     bec:	cf d4       	rcall	.+2462   	; 0x158c <bus_read>

	return data;
     bee:	89 81       	ldd	r24, Y+1	; 0x01

		if (channel == SENSOR_CHANNEL_ALL) {
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			reg_val &= ~(I_LED1_MASK | I_LED2_MASK);
			reg_val
				|= (curr_setting |
     bf0:	80 7c       	andi	r24, 0xC0	; 192
     bf2:	8d 29       	or	r24, r13
     bf4:	9d 2d       	mov	r25, r13
     bf6:	99 0f       	add	r25, r25
     bf8:	99 0f       	add	r25, r25
     bfa:	99 0f       	add	r25, r25
     bfc:	89 2b       	or	r24, r25
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	ae 01       	movw	r20, r28
     c06:	4d 5f       	subi	r20, 0xFD	; 253
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	62 e8       	ldi	r22, 0x82	; 130
     c0c:	c8 01       	movw	r24, r16
     c0e:	00 d5       	rcall	.+2560   	; 0x1610 <bus_write>
     c10:	d9 82       	std	Y+1, r13	; 0x01
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ae 01       	movw	r20, r28
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	63 e8       	ldi	r22, 0x83	; 131
     c1e:	c8 01       	movw	r24, r16
     c20:	f7 d4       	rcall	.+2542   	; 0x1610 <bus_write>
     c22:	21 e0       	ldi	r18, 0x01	; 1
					(curr_setting << I_LED2_SHIFT));
			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else if ((channel == 1) || (channel == 2)) {
     c24:	4f c0       	rjmp	.+158    	; 0xcc4 <sfh7770_ioctl+0x43c>
     c26:	c7 01       	movw	r24, r14
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	02 97       	sbiw	r24, 0x02	; 2
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     c2c:	00 f5       	brcc	.+64     	; 0xc6e <sfh7770_ioctl+0x3e6>
	bus_read(bus, addr, &data, sizeof(uint8_t));
     c2e:	19 82       	std	Y+1, r1	; 0x01
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	ae 01       	movw	r20, r28
     c36:	4f 5f       	subi	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	62 e8       	ldi	r22, 0x82	; 130
     c3c:	c8 01       	movw	r24, r16
     c3e:	a6 d4       	rcall	.+2380   	; 0x158c <bus_read>

	return data;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			if (channel == 1) {
     c42:	ea 94       	dec	r14
     c44:	ef 28       	or	r14, r15
				reg_val &= ~I_LED1_MASK;
     c46:	19 f4       	brne	.+6      	; 0xc4e <sfh7770_ioctl+0x3c6>
				reg_val |= curr_setting;
     c48:	88 7f       	andi	r24, 0xF8	; 248
     c4a:	d8 2a       	or	r13, r24
			} else {
				reg_val &= ~I_LED2_MASK;
				reg_val |= (curr_setting << I_LED2_SHIFT);
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <sfh7770_ioctl+0x3d0>
     c4e:	dd 0c       	add	r13, r13
     c50:	dd 0c       	add	r13, r13
     c52:	dd 0c       	add	r13, r13
     c54:	87 7c       	andi	r24, 0xC7	; 199
     c56:	d8 2a       	or	r13, r24
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     c58:	dc 82       	std	Y+4, r13	; 0x04
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	ae 01       	movw	r20, r28
     c60:	4c 5f       	subi	r20, 0xFC	; 252
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	62 e8       	ldi	r22, 0x82	; 130
     c66:	c8 01       	movw	r24, r16
     c68:	d3 d4       	rcall	.+2470   	; 0x1610 <bus_write>
     c6a:	21 e0       	ldi	r18, 0x01	; 1
			}

			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
		} else if (channel == 3) {
     c6c:	2b c0       	rjmp	.+86     	; 0xcc4 <sfh7770_ioctl+0x43c>
     c6e:	e3 e0       	ldi	r30, 0x03	; 3
     c70:	ee 16       	cp	r14, r30
     c72:	f1 04       	cpc	r15, r1
     c74:	c1 f4       	brne	.+48     	; 0xca6 <sfh7770_ioctl+0x41e>
     c76:	dd 82       	std	Y+5, r13	; 0x05
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	ae 01       	movw	r20, r28
     c7e:	4b 5f       	subi	r20, 0xFB	; 251
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	63 e8       	ldi	r22, 0x83	; 131
     c84:	c8 01       	movw	r24, r16
     c86:	c4 d4       	rcall	.+2440   	; 0x1610 <bus_write>
     c88:	21 e0       	ldi	r18, 0x01	; 1
     c8a:	1c c0       	rjmp	.+56     	; 0xcc4 <sfh7770_ioctl+0x43c>
		status = sfh7770_set_current(hal, sensor->channel,
				(uint16_t *)arg);
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e8       	ldi	r25, 0x80	; 128
     c90:	f9 01       	movw	r30, r18
     c92:	87 83       	std	Z+7, r24	; 0x07
     c94:	90 87       	std	Z+8, r25	; 0x08
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     c96:	20 e0       	ldi	r18, 0x00	; 0
				(uint16_t *)arg);
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
     c98:	15 c0       	rjmp	.+42     	; 0xcc4 <sfh7770_ioctl+0x43c>
		}

		break;

	default:
		return false;
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <sfh7770_ioctl+0x43c>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	11 c0       	rjmp	.+34     	; 0xcc4 <sfh7770_ioctl+0x43c>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <sfh7770_ioctl+0x43c>

			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
		} else if (channel == 3) {
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else {        /* invalid channel selected */
			status = false;
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <sfh7770_ioctl+0x43c>
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
			if (prox_rate_table[i].rate == rate_hz) {
     caa:	e1 14       	cp	r14, r1
     cac:	f1 04       	cpc	r15, r1
     cae:	11 f4       	brne	.+4      	; 0xcb4 <sfh7770_ioctl+0x42c>
     cb0:	4e cf       	rjmp	.-356    	; 0xb4e <sfh7770_ioctl+0x2c6>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	ec ea       	ldi	r30, 0xAC	; 172
     cb6:	f0 e2       	ldi	r31, 0x20	; 32
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	42 cf       	rjmp	.-380    	; 0xb42 <sfh7770_ioctl+0x2ba>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     cbe:	20 e0       	ldi	r18, 0x00	; 0
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     cc0:	d0 fc       	sbrc	r13, 0
     cc2:	f3 cf       	rjmp	.-26     	; 0xcaa <sfh7770_ioctl+0x422>
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
	}

	return status;
}
     cc4:	82 2f       	mov	r24, r18
     cc6:	2c 96       	adiw	r28, 0x0c	; 12
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	08 95       	ret

00000cde <sfh7770_calibrate>:
 * @param info       Unimplemented (ignored) parameter.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_calibrate(sensor_t *sensor,
		sensor_calibration_t calib_type, int step, void *info)
{
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <sfh7770_calibrate+0xe>
     cec:	1f 92       	push	r1
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62

	static uint8_t prox_data[3];
	uint8_t read_data[3];

	/* Validate the specified calibration type */
	if (calib_type != MANUAL_CALIBRATE) {
     cf2:	61 30       	cpi	r22, 0x01	; 1
     cf4:	39 f0       	breq	.+14     	; 0xd04 <sfh7770_calibrate+0x26>
		sensor->err = SENSOR_ERR_PARAMS;
     cf6:	20 e2       	ldi	r18, 0x20	; 32
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	27 83       	std	Z+7, r18	; 0x07
     cfe:	30 87       	std	Z+8, r19	; 0x08
		return false;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	67 c0       	rjmp	.+206    	; 0xdd2 <sfh7770_calibrate+0xf4>
     d04:	8c 01       	movw	r16, r24
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_calibrate(sensor_t *sensor,
		sensor_calibration_t calib_type, int step, void *info)
{
	sensor_hal_t *const hal = sensor->hal;
     d06:	fc 01       	movw	r30, r24
     d08:	e0 80       	ld	r14, Z
     d0a:	f1 80       	ldd	r15, Z+1	; 0x01
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
     d0c:	42 30       	cpi	r20, 0x02	; 2
     d0e:	51 05       	cpc	r21, r1
     d10:	a9 f0       	breq	.+42     	; 0xd3c <sfh7770_calibrate+0x5e>
     d12:	43 30       	cpi	r20, 0x03	; 3
     d14:	51 05       	cpc	r21, r1
     d16:	01 f1       	breq	.+64     	; 0xd58 <sfh7770_calibrate+0x7a>
     d18:	41 30       	cpi	r20, 0x01	; 1
     d1a:	51 05       	cpc	r21, r1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <sfh7770_calibrate+0x42>
     d1e:	53 c0       	rjmp	.+166    	; 0xdc6 <sfh7770_calibrate+0xe8>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     d20:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	ae 01       	movw	r20, r28
     d28:	4c 5f       	subi	r20, 0xFC	; 252
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	6f e8       	ldi	r22, 0x8F	; 143
     d2e:	c7 01       	movw	r24, r14
     d30:	2d d4       	rcall	.+2138   	; 0x158c <bus_read>

	return data;
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
     d34:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <prox_data.6954>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     d38:	81 e0       	ldi	r24, 0x01	; 1

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;
     d3a:	4b c0       	rjmp	.+150    	; 0xdd2 <sfh7770_calibrate+0xf4>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     d3c:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	ae 01       	movw	r20, r28
     d44:	4c 5f       	subi	r20, 0xFC	; 252
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	60 e9       	ldi	r22, 0x90	; 144
     d4a:	c7 01       	movw	r24, r14
     d4c:	1f d4       	rcall	.+2110   	; 0x158c <bus_read>

	return data;
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
     d50:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <prox_data.6954+0x1>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     d54:	81 e0       	ldi	r24, 0x01	; 1
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
		break;
     d56:	3d c0       	rjmp	.+122    	; 0xdd2 <sfh7770_calibrate+0xf4>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     d58:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	ae 01       	movw	r20, r28
     d60:	4c 5f       	subi	r20, 0xFC	; 252
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	61 e9       	ldi	r22, 0x91	; 145
     d66:	c7 01       	movw	r24, r14
     d68:	11 d4       	rcall	.+2082   	; 0x158c <bus_read>

	return data;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04

	case 3:
		prox_data[2] = sensor_bus_get(hal, SFH7770_PS_DATA_LED3);
     d6c:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <prox_data.6954+0x2>

		/* Write data */
		nvram_write((SFH7770_NVRAM_OFFSET), prox_data,
     d70:	43 e0       	ldi	r20, 0x03	; 3
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	6a e0       	ldi	r22, 0x0A	; 10
     d76:	71 e2       	ldi	r23, 0x21	; 33
     d78:	88 e1       	ldi	r24, 0x18	; 24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	8b d4       	rcall	.+2326   	; 0x1694 <nvram_write>
				sizeof(prox_data));

		/* Read back data and confirm it was written correctly */
		nvram_read(SFH7770_NVRAM_OFFSET, read_data, sizeof(read_data));
     d7e:	43 e0       	ldi	r20, 0x03	; 3
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	be 01       	movw	r22, r28
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	99 d4       	rcall	.+2354   	; 0x16c0 <nvram_read>

		if (memcmp(prox_data, read_data, sizeof(prox_data))) {
     d8e:	43 e0       	ldi	r20, 0x03	; 3
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8a e0       	ldi	r24, 0x0A	; 10
     d9a:	91 e2       	ldi	r25, 0x21	; 33
     d9c:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <memcmp>
     da0:	89 2b       	or	r24, r25
     da2:	39 f0       	breq	.+14     	; 0xdb2 <sfh7770_calibrate+0xd4>
			sensor->err = SENSOR_ERR_IO;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	f8 01       	movw	r30, r16
     daa:	87 83       	std	Z+7, r24	; 0x07
     dac:	90 87       	std	Z+8, r25	; 0x08
			return false;
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	10 c0       	rjmp	.+32     	; 0xdd2 <sfh7770_calibrate+0xf4>
		}

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
     db2:	23 e0       	ldi	r18, 0x03	; 3
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	ae 01       	movw	r20, r28
     db8:	4f 5f       	subi	r20, 0xFF	; 255
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	63 e9       	ldi	r22, 0x93	; 147
     dbe:	c7 01       	movw	r24, r14
     dc0:	27 d4       	rcall	.+2126   	; 0x1610 <bus_write>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     dc2:	81 e0       	ldi	r24, 0x01	; 1

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
				sizeof(read_data));

		break;
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <sfh7770_calibrate+0xf4>

	/* Any other step number is invalid */
	default:
		sensor->err = SENSOR_ERR_PARAMS;
     dc6:	80 e2       	ldi	r24, 0x20	; 32
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	f8 01       	movw	r30, r16
     dcc:	87 83       	std	Z+7, r24	; 0x07
     dce:	90 87       	std	Z+8, r25	; 0x08
		return false;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
     dd2:	24 96       	adiw	r28, 0x04	; 4
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	08 95       	ret

00000de6 <sfh7770_init>:
 * @param sensor    Address of a sensor device descriptor.
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	2b 97       	sbiw	r28, 0x0b	; 11
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	7c 01       	movw	r14, r24
	bool status = false;
	sensor_hal_t *const hal = sensor->hal;
     dfe:	fc 01       	movw	r30, r24
     e00:	00 81       	ld	r16, Z
     e02:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     e04:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ae 01       	movw	r20, r28
     e0c:	4c 5f       	subi	r20, 0xFC	; 252
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	6a e8       	ldi	r22, 0x8A	; 138
     e12:	c8 01       	movw	r24, r16
     e14:	bb d3       	rcall	.+1910   	; 0x158c <bus_read>

	return data;
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
	} prox_thresholds;

	/* Read and check part ID register */
	uint8_t part_id = sensor_bus_get(hal, SFH7770_PART_ID);

	if (part_id == (SFH7770_PART_ID_VAL | SFH7770_PART_REV_VAL)) {
     e18:	84 39       	cpi	r24, 0x94	; 148
     e1a:	09 f0       	breq	.+2      	; 0xe1e <sfh7770_init+0x38>
     e1c:	8e c0       	rjmp	.+284    	; 0xf3a <sfh7770_init+0x154>
			.caps.units          = SENSOR_UNITS_lux,
			.caps.scale          = SENSOR_SCALE_one,
			.caps.name = "SFH7770 Ambient Light & Proximity Sensor"
		};

		sensor->drv = &sfh7770_device;
     e1e:	83 e9       	ldi	r24, 0x93	; 147
     e20:	90 e2       	ldi	r25, 0x20	; 32
     e22:	f7 01       	movw	r30, r14
     e24:	82 83       	std	Z+2, r24	; 0x02
     e26:	93 83       	std	Z+3, r25	; 0x03

		hal->resolution = SFH7770_DATA_RESOLUTION;
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	f8 01       	movw	r30, r16
     e2e:	86 8f       	std	Z+30, r24	; 0x1e
     e30:	97 8f       	std	Z+31, r25	; 0x1f

		/* Set the device burst read starting register address. */
		hal->burst_addr = SFH7770_ALS_DATA_LSB;
     e32:	8c e8       	ldi	r24, 0x8C	; 140
     e34:	87 83       	std	Z+7, r24	; 0x07

		/* Reset device during first init call */
		if (!sfh7770_initialized) {
     e36:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sfh7770_initialized>
     e3a:	81 11       	cpse	r24, r1
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <sfh7770_init+0x6c>
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	8b 87       	std	Y+11, r24	; 0x0b
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	ae 01       	movw	r20, r28
     e48:	45 5f       	subi	r20, 0xF5	; 245
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	60 e8       	ldi	r22, 0x80	; 128
     e4e:	c8 01       	movw	r24, r16
     e50:	df d3       	rcall	.+1982   	; 0x1610 <bus_write>
					ALS_CONTROL_SW_RESET);
		}

		/* Init light sensor functions if specified */

		if (sensor->type & SENSOR_TYPE_LIGHT) {
     e52:	f7 01       	movw	r30, r14
     e54:	84 81       	ldd	r24, Z+4	; 0x04
     e56:	85 ff       	sbrs	r24, 5
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <sfh7770_init+0x9c>
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	89 87       	std	Y+9, r24	; 0x09
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	ae 01       	movw	r20, r28
     e64:	47 5f       	subi	r20, 0xF7	; 247
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	60 e8       	ldi	r22, 0x80	; 128
     e6a:	c8 01       	movw	r24, r16
     e6c:	d1 d3       	rcall	.+1954   	; 0x1610 <bus_write>
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	8a 87       	std	Y+10, r24	; 0x0a
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	ae 01       	movw	r20, r28
     e78:	46 5f       	subi	r20, 0xF6	; 246
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	66 e8       	ldi	r22, 0x86	; 134
     e7e:	c8 01       	movw	r24, r16
     e80:	c7 d3       	rcall	.+1934   	; 0x1610 <bus_write>
			sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
					ALS_INTERVAL_500MS);
		}

		/* Init proximity sensor functions if specified */
		if (sensor->type & SENSOR_TYPE_PROXIMITY) {
     e82:	f7 01       	movw	r30, r14
     e84:	84 81       	ldd	r24, Z+4	; 0x04
     e86:	95 81       	ldd	r25, Z+5	; 0x05
     e88:	90 ff       	sbrs	r25, 0
     e8a:	3a c0       	rjmp	.+116    	; 0xf00 <sfh7770_init+0x11a>
     e8c:	0f 2e       	mov	r0, r31
     e8e:	f3 e0       	ldi	r31, 0x03	; 3
     e90:	ff 2e       	mov	r15, r31
     e92:	f0 2d       	mov	r31, r0
     e94:	fd 82       	std	Y+5, r15	; 0x05
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	ae 01       	movw	r20, r28
     e9c:	4b 5f       	subi	r20, 0xFB	; 251
     e9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ea0:	61 e8       	ldi	r22, 0x81	; 129
     ea2:	c8 01       	movw	r24, r16
     ea4:	b5 d3       	rcall	.+1898   	; 0x1610 <bus_write>
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	8e 83       	std	Y+6, r24	; 0x06
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	ae 01       	movw	r20, r28
     eb0:	4a 5f       	subi	r20, 0xFA	; 250
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	65 e8       	ldi	r22, 0x85	; 133
     eb6:	c8 01       	movw	r24, r16
     eb8:	ab d3       	rcall	.+1878   	; 0x1610 <bus_write>
     eba:	8b ed       	ldi	r24, 0xDB	; 219
     ebc:	8f 83       	std	Y+7, r24	; 0x07
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	ae 01       	movw	r20, r28
     ec4:	49 5f       	subi	r20, 0xF9	; 249
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	62 e8       	ldi	r22, 0x82	; 130
     eca:	c8 01       	movw	r24, r16
     ecc:	a1 d3       	rcall	.+1858   	; 0x1610 <bus_write>
     ece:	f8 86       	std	Y+8, r15	; 0x08
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ae 01       	movw	r20, r28
     ed6:	48 5f       	subi	r20, 0xF8	; 248
     ed8:	5f 4f       	sbci	r21, 0xFF	; 255
     eda:	63 e8       	ldi	r22, 0x83	; 131
     edc:	c8 01       	movw	r24, r16
     ede:	98 d3       	rcall	.+1840   	; 0x1610 <bus_write>
					I_LED2_SHIFT) | led1_curr));

			sensor_bus_put(hal, SFH7770_I_LED_3, led3_curr);

			/* Apply stored proximity thresholds from nvram */
			nvram_read(SFH7770_NVRAM_OFFSET, &prox_thresholds,
     ee0:	43 e0       	ldi	r20, 0x03	; 3
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	be 01       	movw	r22, r28
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	88 e1       	ldi	r24, 0x18	; 24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	e8 d3       	rcall	.+2000   	; 0x16c0 <nvram_read>
					sizeof(prox_thresholds));

			sensor_bus_write(hal, (SFH7770_PS_THR_LED1),
     ef0:	23 e0       	ldi	r18, 0x03	; 3
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	ae 01       	movw	r20, r28
     ef6:	4f 5f       	subi	r20, 0xFF	; 255
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	63 e9       	ldi	r22, 0x93	; 147
     efc:	c8 01       	movw	r24, r16
     efe:	88 d3       	rcall	.+1808   	; 0x1610 <bus_write>
     f00:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sfh7770_initialized>
					&prox_thresholds,
					sizeof(prox_thresholds));
		}

		if (!sfh7770_initialized) {
     f04:	81 11       	cpse	r24, r1
     f06:	15 c0       	rjmp	.+42     	; 0xf32 <sfh7770_init+0x14c>
     f08:	1c 82       	std	Y+4, r1	; 0x04
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	ae 01       	movw	r20, r28
     f10:	4c 5f       	subi	r20, 0xFC	; 252
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	62 e9       	ldi	r22, 0x92	; 146
     f16:	c8 01       	movw	r24, r16
     f18:	7b d3       	rcall	.+1782   	; 0x1610 <bus_write>
     f1a:	f8 01       	movw	r30, r16
			 * latched).
			 */
			sensor_bus_put(hal, SFH7770_INT_SET, 0);

			/* Set up interrupt handler */
			if (STATUS_OK == hal->bus.status) {
     f1c:	85 81       	ldd	r24, Z+5	; 0x05
     f1e:	81 11       	cpse	r24, r1
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <sfh7770_init+0x14c>
				sensor_irq_connect(hal->mcu_sigint, sfh7770_isr, hal);
     f22:	60 85       	ldd	r22, Z+8	; 0x08
     f24:	71 85       	ldd	r23, Z+9	; 0x09
     f26:	82 85       	ldd	r24, Z+10	; 0x0a
     f28:	93 85       	ldd	r25, Z+11	; 0x0b
     f2a:	98 01       	movw	r18, r16
     f2c:	47 e6       	ldi	r20, 0x67	; 103
     f2e:	53 e0       	ldi	r21, 0x03	; 3
     f30:	e9 d3       	rcall	.+2002   	; 0x1704 <sensor_irq_connect>
     f32:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		sfh7770_initialized = true;
     f34:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <sfh7770_initialized>
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <sfh7770_init+0x156>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
	bool status = false;
     f3c:	2b 96       	adiw	r28, 0x0b	; 11
		sfh7770_initialized = true;
		status = true;
	}

	return status;
}
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	08 95       	ret

00000f50 <default_event_handler>:
     f50:	08 95       	ret

00000f52 <sensor_attach>:
		*value = threshold.value;
		status = true;
	}

	return status;
}
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	8b 01       	movw	r16, r22
     f66:	6a 01       	movw	r12, r20
     f68:	79 01       	movw	r14, r18
     f6a:	cb 01       	movw	r24, r22
     f6c:	ce d3       	rcall	.+1948   	; 0x170a <sensor_find>
     f6e:	88 83       	st	Y, r24
     f70:	99 83       	std	Y+1, r25	; 0x01
     f72:	0c 83       	std	Y+4, r16	; 0x04
     f74:	1d 83       	std	Y+5, r17	; 0x05
     f76:	eb 86       	std	Y+11, r14	; 0x0b
     f78:	fc 86       	std	Y+12, r15	; 0x0c
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	79 f0       	breq	.+30     	; 0xf9c <sensor_attach+0x4a>
     f7e:	dc 01       	movw	r26, r24
     f80:	90 96       	adiw	r26, 0x20	; 32
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	91 97       	sbiw	r26, 0x21	; 33
     f88:	b6 01       	movw	r22, r12
     f8a:	ce 01       	movw	r24, r28
     f8c:	19 95       	eicall
     f8e:	88 23       	and	r24, r24
     f90:	29 f0       	breq	.+10     	; 0xf9c <sensor_attach+0x4a>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	8e 83       	std	Y+6, r24	; 0x06
     f96:	1f 82       	std	Y+7, r1	; 0x07
     f98:	18 86       	std	Y+8, r1	; 0x08
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <sensor_attach+0x54>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	8f 83       	std	Y+7, r24	; 0x07
     fa2:	98 87       	std	Y+8, r25	; 0x08
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	08 95       	ret

00000fb8 <sensor_read>:
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	dc 01       	movw	r26, r24
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	13 97       	sbiw	r26, 0x03	; 3
     fc8:	01 90       	ld	r0, Z+
     fca:	f0 81       	ld	r31, Z
     fcc:	e0 2d       	mov	r30, r0
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	31 f0       	breq	.+12     	; 0xfde <sensor_read+0x26>
     fd2:	ea 01       	movw	r28, r20
     fd4:	19 95       	eicall
     fd6:	18 2f       	mov	r17, r24
     fd8:	81 11       	cpse	r24, r1
     fda:	08 c0       	rjmp	.+16     	; 0xfec <sensor_read+0x34>
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <sensor_read+0x3e>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	32 e8       	ldi	r19, 0x82	; 130
     fe2:	fc 01       	movw	r30, r24
     fe4:	27 83       	std	Z+7, r18	; 0x07
     fe6:	30 87       	std	Z+8, r19	; 0x08
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <sensor_read+0x3e>
     fec:	87 d3       	rcall	.+1806   	; 0x16fc <sensor_timestamp>
     fee:	6c 87       	std	Y+12, r22	; 0x0c
     ff0:	7d 87       	std	Y+13, r23	; 0x0d
     ff2:	8e 87       	std	Y+14, r24	; 0x0e
     ff4:	9f 87       	std	Y+15, r25	; 0x0f
     ff6:	81 2f       	mov	r24, r17
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	08 95       	ret

00001000 <sensor_ioctl>:
 * @param   cmd     Specifies the IOCTL command.
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	1f 92       	push	r1
    100e:	1f 92       	push	r1
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	bool result = false;

	switch (cmd) {
    1014:	6d 30       	cpi	r22, 0x0D	; 13
    1016:	09 f4       	brne	.+2      	; 0x101a <sensor_ioctl+0x1a>
    1018:	c5 c0       	rjmp	.+394    	; 0x11a4 <sensor_ioctl+0x1a4>
    101a:	8c 01       	movw	r16, r24
    101c:	6e 30       	cpi	r22, 0x0E	; 14
    101e:	30 f4       	brcc	.+12     	; 0x102c <sensor_ioctl+0x2c>
    1020:	69 30       	cpi	r22, 0x09	; 9
    1022:	71 f0       	breq	.+28     	; 0x1040 <sensor_ioctl+0x40>
    1024:	6a 30       	cpi	r22, 0x0A	; 10
    1026:	09 f4       	brne	.+2      	; 0x102a <sensor_ioctl+0x2a>
    1028:	64 c0       	rjmp	.+200    	; 0x10f2 <sensor_ioctl+0xf2>
    102a:	f5 c0       	rjmp	.+490    	; 0x1216 <sensor_ioctl+0x216>
    102c:	62 31       	cpi	r22, 0x12	; 18
    102e:	09 f4       	brne	.+2      	; 0x1032 <sensor_ioctl+0x32>
    1030:	6a c0       	rjmp	.+212    	; 0x1106 <sensor_ioctl+0x106>
    1032:	66 31       	cpi	r22, 0x16	; 22
    1034:	09 f4       	brne	.+2      	; 0x1038 <sensor_ioctl+0x38>
    1036:	c0 c0       	rjmp	.+384    	; 0x11b8 <sensor_ioctl+0x1b8>
    1038:	61 31       	cpi	r22, 0x11	; 17
    103a:	09 f0       	breq	.+2      	; 0x103e <sensor_ioctl+0x3e>
    103c:	ec c0       	rjmp	.+472    	; 0x1216 <sensor_ioctl+0x216>
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <sensor_ioctl+0x54>
	case SENSOR_GET_RANGE:
		*((int16_t *)arg) = sensor->hal->range;
    1040:	dc 01       	movw	r26, r24
    1042:	ed 91       	ld	r30, X+
    1044:	fc 91       	ld	r31, X
    1046:	80 8d       	ldd	r24, Z+24	; 0x18
    1048:	91 8d       	ldd	r25, Z+25	; 0x19
    104a:	fa 01       	movw	r30, r20
    104c:	80 83       	st	Z, r24
    104e:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    1050:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1052:	f6 c0       	rjmp	.+492    	; 0x1240 <sensor_ioctl+0x240>
	{
		int16_t const range = *(int16_t *)arg;

		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
    1054:	fc 01       	movw	r30, r24
    1056:	a2 81       	ldd	r26, Z+2	; 0x02
    1058:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
    105a:	a6 3f       	cpi	r26, 0xF6	; 246
    105c:	ff ef       	ldi	r31, 0xFF	; 255
    105e:	bf 07       	cpc	r27, r31
    1060:	09 f4       	brne	.+2      	; 0x1064 <sensor_ioctl+0x64>
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <sensor_ioctl+0xe4>
    1064:	51 96       	adiw	r26, 0x11	; 17
    1066:	6d 91       	ld	r22, X+
    1068:	7c 91       	ld	r23, X
    106a:	52 97       	sbiw	r26, 0x12	; 18
    106c:	61 15       	cp	r22, r1
    106e:	71 05       	cpc	r23, r1
    1070:	c9 f1       	breq	.+114    	; 0x10e4 <sensor_ioctl+0xe4>
		for (int i = 0; i < caps->range_count; ++i) {
    1072:	1d 96       	adiw	r26, 0x0d	; 13
    1074:	8d 91       	ld	r24, X+
    1076:	9c 91       	ld	r25, X
    1078:	1e 97       	sbiw	r26, 0x0e	; 14
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	99 f1       	breq	.+102    	; 0x10e4 <sensor_ioctl+0xe4>
		result = true;
		break;

	case SENSOR_SET_RANGE:
	{
		int16_t const range = *(int16_t *)arg;
    107e:	fa 01       	movw	r30, r20
    1080:	e0 80       	ld	r14, Z
    1082:	f1 80       	ldd	r15, Z+1	; 0x01
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
			if (caps->range_table[i].range_units == range) {
    1084:	fb 01       	movw	r30, r22
    1086:	20 81       	ld	r18, Z
    1088:	31 81       	ldd	r19, Z+1	; 0x01
    108a:	e2 16       	cp	r14, r18
    108c:	f3 06       	cpc	r15, r19
    108e:	99 f4       	brne	.+38     	; 0x10b6 <sensor_ioctl+0xb6>
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <sensor_ioctl+0xa0>
    1092:	33 96       	adiw	r30, 0x03	; 3
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	e2 16       	cp	r14, r18
    109a:	f3 06       	cpc	r15, r19
    109c:	81 f4       	brne	.+32     	; 0x10be <sensor_ioctl+0xbe>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <sensor_ioctl+0xa4>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
				*index = i;
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	9a 83       	std	Y+2, r25	; 0x02
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	ed 91       	ld	r30, X+
    10ac:	fc 91       	ld	r31, X
    10ae:	13 97       	sbiw	r26, 0x03	; 3
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	51 f4       	brne	.+20     	; 0x10c8 <sensor_ioctl+0xc8>
    10b4:	17 c0       	rjmp	.+46     	; 0x10e4 <sensor_ioctl+0xe4>
    10b6:	fb 01       	movw	r30, r22
    10b8:	ac 01       	movw	r20, r24
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
			if (caps->range_table[i].range_units == range) {
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	84 17       	cp	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	31 f7       	brne	.-52     	; 0x1092 <sensor_ioctl+0x92>
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <sensor_ioctl+0xe4>
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    10c8:	ae 01       	movw	r20, r28
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	61 e1       	ldi	r22, 0x11	; 17
    10d0:	c8 01       	movw	r24, r16
    10d2:	19 95       	eicall
		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
    10d4:	88 23       	and	r24, r24
    10d6:	31 f0       	breq	.+12     	; 0x10e4 <sensor_ioctl+0xe4>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->range = range;
    10d8:	d8 01       	movw	r26, r16
    10da:	ed 91       	ld	r30, X+
    10dc:	fc 91       	ld	r31, X
    10de:	e0 8e       	std	Z+24, r14	; 0x18
    10e0:	f1 8e       	std	Z+25, r15	; 0x19
    10e2:	ae c0       	rjmp	.+348    	; 0x1240 <sensor_ioctl+0x240>
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	f8 01       	movw	r30, r16
    10ea:	87 83       	std	Z+7, r24	; 0x07
    10ec:	90 87       	std	Z+8, r25	; 0x08
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	a7 c0       	rjmp	.+334    	; 0x1240 <sensor_ioctl+0x240>

		break;
	}

	case SENSOR_GET_BANDWIDTH:
		*((int16_t *)arg) = sensor->hal->bandwidth;
    10f2:	dc 01       	movw	r26, r24
    10f4:	ed 91       	ld	r30, X+
    10f6:	fc 91       	ld	r31, X
    10f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    10fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    10fc:	fa 01       	movw	r30, r20
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1104:	9d c0       	rjmp	.+314    	; 0x1240 <sensor_ioctl+0x240>
	case SENSOR_SET_BANDWIDTH:
	{
		int16_t const bandwidth_Hz = *(int16_t *)arg;

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
    1106:	fc 01       	movw	r30, r24
    1108:	a2 81       	ldd	r26, Z+2	; 0x02
    110a:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
    110c:	a6 3f       	cpi	r26, 0xF6	; 246
    110e:	ff ef       	ldi	r31, 0xFF	; 255
    1110:	bf 07       	cpc	r27, r31
    1112:	09 f4       	brne	.+2      	; 0x1116 <sensor_ioctl+0x116>
    1114:	40 c0       	rjmp	.+128    	; 0x1196 <sensor_ioctl+0x196>
    1116:	53 96       	adiw	r26, 0x13	; 19
    1118:	6d 91       	ld	r22, X+
    111a:	7c 91       	ld	r23, X
    111c:	54 97       	sbiw	r26, 0x14	; 20
    111e:	61 15       	cp	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	c9 f1       	breq	.+114    	; 0x1196 <sensor_ioctl+0x196>
		for (int i = 0; i < caps->band_count; ++i) {
    1124:	1f 96       	adiw	r26, 0x0f	; 15
    1126:	8d 91       	ld	r24, X+
    1128:	9c 91       	ld	r25, X
    112a:	50 97       	sbiw	r26, 0x10	; 16
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	99 f1       	breq	.+102    	; 0x1196 <sensor_ioctl+0x196>
		result = true;
		break;

	case SENSOR_SET_BANDWIDTH:
	{
		int16_t const bandwidth_Hz = *(int16_t *)arg;
    1130:	fa 01       	movw	r30, r20
    1132:	e0 80       	ld	r14, Z
    1134:	f1 80       	ldd	r15, Z+1	; 0x01
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
			if (caps->band_table[i].bandwidth_Hz == band) {
    1136:	fb 01       	movw	r30, r22
    1138:	20 81       	ld	r18, Z
    113a:	31 81       	ldd	r19, Z+1	; 0x01
    113c:	e2 16       	cp	r14, r18
    113e:	f3 06       	cpc	r15, r19
    1140:	99 f4       	brne	.+38     	; 0x1168 <sensor_ioctl+0x168>
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <sensor_ioctl+0x152>
    1144:	33 96       	adiw	r30, 0x03	; 3
    1146:	20 81       	ld	r18, Z
    1148:	31 81       	ldd	r19, Z+1	; 0x01
    114a:	e2 16       	cp	r14, r18
    114c:	f3 06       	cpc	r15, r19
    114e:	81 f4       	brne	.+32     	; 0x1170 <sensor_ioctl+0x170>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <sensor_ioctl+0x156>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
				*index = i;
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    115a:	12 96       	adiw	r26, 0x02	; 2
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	13 97       	sbiw	r26, 0x03	; 3
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	51 f4       	brne	.+20     	; 0x117a <sensor_ioctl+0x17a>
    1166:	17 c0       	rjmp	.+46     	; 0x1196 <sensor_ioctl+0x196>
    1168:	fb 01       	movw	r30, r22
    116a:	ac 01       	movw	r20, r24
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
			if (caps->band_table[i].bandwidth_Hz == band) {
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	48 17       	cp	r20, r24
    1174:	59 07       	cpc	r21, r25
    1176:	31 f7       	brne	.-52     	; 0x1144 <sensor_ioctl+0x144>
    1178:	0e c0       	rjmp	.+28     	; 0x1196 <sensor_ioctl+0x196>
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    117a:	ae 01       	movw	r20, r28
    117c:	4f 5f       	subi	r20, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	62 e1       	ldi	r22, 0x12	; 18
    1182:	c8 01       	movw	r24, r16
    1184:	19 95       	eicall

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
    1186:	88 23       	and	r24, r24
    1188:	31 f0       	breq	.+12     	; 0x1196 <sensor_ioctl+0x196>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->bandwidth = bandwidth_Hz;
    118a:	d8 01       	movw	r26, r16
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	e2 8e       	std	Z+26, r14	; 0x1a
    1192:	f3 8e       	std	Z+27, r15	; 0x1b
    1194:	55 c0       	rjmp	.+170    	; 0x1240 <sensor_ioctl+0x240>
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	f8 01       	movw	r30, r16
    119c:	87 83       	std	Z+7, r24	; 0x07
    119e:	90 87       	std	Z+8, r25	; 0x08
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	4e c0       	rjmp	.+156    	; 0x1240 <sensor_ioctl+0x240>

		break;
	}

	case SENSOR_GET_SAMPLE_RATE:
		*((int16_t *)arg) = sensor->hal->sample_rate;
    11a4:	dc 01       	movw	r26, r24
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    11ac:	95 8d       	ldd	r25, Z+29	; 0x1d
    11ae:	fa 01       	movw	r30, r20
    11b0:	80 83       	st	Z, r24
    11b2:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
		break;
    11b6:	44 c0       	rjmp	.+136    	; 0x1240 <sensor_ioctl+0x240>

	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
    11b8:	dc 01       	movw	r26, r24
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	ed 91       	ld	r30, X+
    11be:	fc 91       	ld	r31, X
    11c0:	13 97       	sbiw	r26, 0x03	; 3
    11c2:	02 80       	ldd	r0, Z+2	; 0x02
    11c4:	f3 81       	ldd	r31, Z+3	; 0x03
    11c6:	e0 2d       	mov	r30, r0
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	41 f0       	breq	.+16     	; 0x11dc <sensor_ioctl+0x1dc>
		result = true;
		break;

	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;
    11cc:	da 01       	movw	r26, r20
    11ce:	ed 90       	ld	r14, X+
    11d0:	fc 90       	ld	r15, X

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
    11d2:	66 e1       	ldi	r22, 0x16	; 22
    11d4:	19 95       	eicall
    11d6:	81 11       	cpse	r24, r1
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <sensor_ioctl+0x1ea>
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <sensor_ioctl+0x1f8>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	92 e8       	ldi	r25, 0x82	; 130
    11e0:	f8 01       	movw	r30, r16
    11e2:	87 83       	std	Z+7, r24	; 0x07
    11e4:	90 87       	std	Z+8, r25	; 0x08
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	2b c0       	rjmp	.+86     	; 0x1240 <sensor_ioctl+0x240>
	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
			sensor->hal->sample_rate = sample_Hz;
    11ea:	d8 01       	movw	r26, r16
    11ec:	ed 91       	ld	r30, X+
    11ee:	fc 91       	ld	r31, X
    11f0:	e4 8e       	std	Z+28, r14	; 0x1c
    11f2:	f5 8e       	std	Z+29, r15	; 0x1d
			result = true;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	24 c0       	rjmp	.+72     	; 0x1240 <sensor_ioctl+0x240>
		} else if (SENSOR_ERR_FUNCTION != sensor->err) {
    11f8:	f8 01       	movw	r30, r16
    11fa:	87 81       	ldd	r24, Z+7	; 0x07
    11fc:	90 85       	ldd	r25, Z+8	; 0x08
    11fe:	81 15       	cp	r24, r1
    1200:	92 48       	sbci	r25, 0x82	; 130
    1202:	e9 f0       	breq	.+58     	; 0x123e <sensor_ioctl+0x23e>
			sensor->err = SENSOR_ERR_PARAMS;
    1204:	80 e2       	ldi	r24, 0x20	; 32
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	d8 01       	movw	r26, r16
    120a:	17 96       	adiw	r26, 0x07	; 7
    120c:	8d 93       	st	X+, r24
    120e:	9c 93       	st	X, r25
    1210:	18 97       	sbiw	r26, 0x08	; 8
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	15 c0       	rjmp	.+42     	; 0x1240 <sensor_ioctl+0x240>

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    1216:	d8 01       	movw	r26, r16
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	ed 91       	ld	r30, X+
    121c:	fc 91       	ld	r31, X
    121e:	13 97       	sbiw	r26, 0x03	; 3
    1220:	02 80       	ldd	r0, Z+2	; 0x02
    1222:	f3 81       	ldd	r31, Z+3	; 0x03
    1224:	e0 2d       	mov	r30, r0
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	19 f0       	breq	.+6      	; 0x1230 <sensor_ioctl+0x230>
    122a:	c8 01       	movw	r24, r16
    122c:	19 95       	eicall
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <sensor_ioctl+0x240>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	92 e8       	ldi	r25, 0x82	; 130
    1234:	f8 01       	movw	r30, r16
    1236:	87 83       	std	Z+7, r24	; 0x07
    1238:	90 87       	std	Z+8, r25	; 0x08

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <sensor_ioctl+0x240>
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    123e:	80 e0       	ldi	r24, 0x00	; 0
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
		break;
	}

	return result;
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	08 95       	ret

00001252 <bus_init>:
 */
uint8_t bus_reg_fieldget(bus_desc_t *bus, uint8_t addr, uint8_t mask)
{
	uint8_t const value = mask & bus_get(bus, addr);
	return (value / (mask & ~(mask << 1)));
}
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	29 97       	sbiw	r28, 0x09	; 9
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	8c 01       	movw	r16, r24
    1266:	fe 01       	movw	r30, r28
    1268:	31 96       	adiw	r30, 0x01	; 1
    126a:	89 e0       	ldi	r24, 0x09	; 9
    126c:	df 01       	movw	r26, r30
    126e:	1d 92       	st	X+, r1
    1270:	8a 95       	dec	r24
    1272:	e9 f7       	brne	.-6      	; 0x126e <bus_init+0x1c>
    1274:	49 83       	std	Y+1, r20	; 0x01
    1276:	5a 83       	std	Y+2, r21	; 0x02
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	7c 83       	std	Y+4, r23	; 0x04
    127c:	9a 01       	movw	r18, r20
    127e:	ab 01       	movw	r20, r22
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	44 1f       	adc	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	78 e4       	ldi	r23, 0x48	; 72
    128c:	88 ee       	ldi	r24, 0xE8	; 232
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodsi4>
    1294:	da 01       	movw	r26, r20
    1296:	c9 01       	movw	r24, r18
    1298:	05 97       	sbiw	r24, 0x05	; 5
    129a:	a1 09       	sbc	r26, r1
    129c:	b1 09       	sbc	r27, r1
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	af 83       	std	Y+7, r26	; 0x07
    12a4:	b8 87       	std	Y+8, r27	; 0x08
    12a6:	01 15       	cp	r16, r1
    12a8:	11 05       	cpc	r17, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <bus_init+0x5c>
    12ac:	5d c1       	rjmp	.+698    	; 0x1568 <bus_init+0x316>
    12ae:	00 3c       	cpi	r16, 0xC0	; 192
    12b0:	11 05       	cpc	r17, r1
    12b2:	29 f4       	brne	.+10     	; 0x12be <bus_init+0x6c>
    12b4:	60 e1       	ldi	r22, 0x10	; 16
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    12bc:	55 c1       	rjmp	.+682    	; 0x1568 <bus_init+0x316>
    12be:	00 34       	cpi	r16, 0x40	; 64
    12c0:	b4 e0       	ldi	r27, 0x04	; 4
    12c2:	1b 07       	cpc	r17, r27
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <bus_init+0x7e>
    12c6:	68 e0       	ldi	r22, 0x08	; 8
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    12ce:	4c c1       	rjmp	.+664    	; 0x1568 <bus_init+0x316>
    12d0:	01 15       	cp	r16, r1
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	18 07       	cpc	r17, r24
    12d6:	29 f4       	brne	.+10     	; 0x12e2 <bus_init+0x90>
    12d8:	64 e0       	ldi	r22, 0x04	; 4
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    12e0:	43 c1       	rjmp	.+646    	; 0x1568 <bus_init+0x316>
    12e2:	00 38       	cpi	r16, 0x80	; 128
    12e4:	a1 e0       	ldi	r26, 0x01	; 1
    12e6:	1a 07       	cpc	r17, r26
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <bus_init+0xa2>
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    12f2:	3a c1       	rjmp	.+628    	; 0x1568 <bus_init+0x316>
    12f4:	01 15       	cp	r16, r1
    12f6:	b1 e0       	ldi	r27, 0x01	; 1
    12f8:	1b 07       	cpc	r17, r27
    12fa:	29 f4       	brne	.+10     	; 0x1306 <bus_init+0xb4>
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1304:	31 c1       	rjmp	.+610    	; 0x1568 <bus_init+0x316>
    1306:	00 38       	cpi	r16, 0x80	; 128
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	18 07       	cpc	r17, r24
    130c:	29 f4       	brne	.+10     	; 0x1318 <bus_init+0xc6>
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1316:	28 c1       	rjmp	.+592    	; 0x1568 <bus_init+0x316>
    1318:	00 39       	cpi	r16, 0x90	; 144
    131a:	a3 e0       	ldi	r26, 0x03	; 3
    131c:	1a 07       	cpc	r17, r26
    131e:	29 f4       	brne	.+10     	; 0x132a <bus_init+0xd8>
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1328:	1f c1       	rjmp	.+574    	; 0x1568 <bus_init+0x316>
    132a:	01 15       	cp	r16, r1
    132c:	b2 e0       	ldi	r27, 0x02	; 2
    132e:	1b 07       	cpc	r17, r27
    1330:	29 f4       	brne	.+10     	; 0x133c <bus_init+0xea>
    1332:	62 e0       	ldi	r22, 0x02	; 2
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    133a:	16 c1       	rjmp	.+556    	; 0x1568 <bus_init+0x316>
    133c:	00 34       	cpi	r16, 0x40	; 64
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	18 07       	cpc	r17, r24
    1342:	29 f4       	brne	.+10     	; 0x134e <bus_init+0xfc>
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    134c:	0d c1       	rjmp	.+538    	; 0x1568 <bus_init+0x316>
    134e:	01 15       	cp	r16, r1
    1350:	a3 e0       	ldi	r26, 0x03	; 3
    1352:	1a 07       	cpc	r17, r26
    1354:	29 f4       	brne	.+10     	; 0x1360 <bus_init+0x10e>
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    135e:	04 c1       	rjmp	.+520    	; 0x1568 <bus_init+0x316>
    1360:	00 32       	cpi	r16, 0x20	; 32
    1362:	b3 e0       	ldi	r27, 0x03	; 3
    1364:	1b 07       	cpc	r17, r27
    1366:	29 f4       	brne	.+10     	; 0x1372 <bus_init+0x120>
    1368:	64 e0       	ldi	r22, 0x04	; 4
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1370:	fb c0       	rjmp	.+502    	; 0x1568 <bus_init+0x316>
    1372:	01 15       	cp	r16, r1
    1374:	88 e0       	ldi	r24, 0x08	; 8
    1376:	18 07       	cpc	r17, r24
    1378:	29 f4       	brne	.+10     	; 0x1384 <bus_init+0x132>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1382:	f2 c0       	rjmp	.+484    	; 0x1568 <bus_init+0x316>
    1384:	01 15       	cp	r16, r1
    1386:	a9 e0       	ldi	r26, 0x09	; 9
    1388:	1a 07       	cpc	r17, r26
    138a:	29 f4       	brne	.+10     	; 0x1396 <bus_init+0x144>
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1394:	e9 c0       	rjmp	.+466    	; 0x1568 <bus_init+0x316>
    1396:	01 15       	cp	r16, r1
    1398:	ba e0       	ldi	r27, 0x0A	; 10
    139a:	1b 07       	cpc	r17, r27
    139c:	29 f4       	brne	.+10     	; 0x13a8 <bus_init+0x156>
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	85 e0       	ldi	r24, 0x05	; 5
    13a2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    13a6:	e0 c0       	rjmp	.+448    	; 0x1568 <bus_init+0x316>
    13a8:	01 15       	cp	r16, r1
    13aa:	8b e0       	ldi	r24, 0x0B	; 11
    13ac:	18 07       	cpc	r17, r24
    13ae:	29 f4       	brne	.+10     	; 0x13ba <bus_init+0x168>
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    13b8:	d7 c0       	rjmp	.+430    	; 0x1568 <bus_init+0x316>
    13ba:	00 34       	cpi	r16, 0x40	; 64
    13bc:	a8 e0       	ldi	r26, 0x08	; 8
    13be:	1a 07       	cpc	r17, r26
    13c0:	29 f4       	brne	.+10     	; 0x13cc <bus_init+0x17a>
    13c2:	62 e0       	ldi	r22, 0x02	; 2
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    13ca:	ce c0       	rjmp	.+412    	; 0x1568 <bus_init+0x316>
    13cc:	00 34       	cpi	r16, 0x40	; 64
    13ce:	b9 e0       	ldi	r27, 0x09	; 9
    13d0:	1b 07       	cpc	r17, r27
    13d2:	29 f4       	brne	.+10     	; 0x13de <bus_init+0x18c>
    13d4:	62 e0       	ldi	r22, 0x02	; 2
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    13dc:	c5 c0       	rjmp	.+394    	; 0x1568 <bus_init+0x316>
    13de:	00 34       	cpi	r16, 0x40	; 64
    13e0:	8a e0       	ldi	r24, 0x0A	; 10
    13e2:	18 07       	cpc	r17, r24
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <bus_init+0x19e>
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	85 e0       	ldi	r24, 0x05	; 5
    13ea:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    13ee:	bc c0       	rjmp	.+376    	; 0x1568 <bus_init+0x316>
    13f0:	00 34       	cpi	r16, 0x40	; 64
    13f2:	ab e0       	ldi	r26, 0x0B	; 11
    13f4:	1a 07       	cpc	r17, r26
    13f6:	29 f4       	brne	.+10     	; 0x1402 <bus_init+0x1b0>
    13f8:	62 e0       	ldi	r22, 0x02	; 2
    13fa:	86 e0       	ldi	r24, 0x06	; 6
    13fc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1400:	b3 c0       	rjmp	.+358    	; 0x1568 <bus_init+0x316>
    1402:	00 39       	cpi	r16, 0x90	; 144
    1404:	b8 e0       	ldi	r27, 0x08	; 8
    1406:	1b 07       	cpc	r17, r27
    1408:	29 f4       	brne	.+10     	; 0x1414 <bus_init+0x1c2>
    140a:	64 e0       	ldi	r22, 0x04	; 4
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1412:	aa c0       	rjmp	.+340    	; 0x1568 <bus_init+0x316>
    1414:	00 39       	cpi	r16, 0x90	; 144
    1416:	89 e0       	ldi	r24, 0x09	; 9
    1418:	18 07       	cpc	r17, r24
    141a:	29 f4       	brne	.+10     	; 0x1426 <bus_init+0x1d4>
    141c:	64 e0       	ldi	r22, 0x04	; 4
    141e:	84 e0       	ldi	r24, 0x04	; 4
    1420:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1424:	a1 c0       	rjmp	.+322    	; 0x1568 <bus_init+0x316>
    1426:	00 39       	cpi	r16, 0x90	; 144
    1428:	aa e0       	ldi	r26, 0x0A	; 10
    142a:	1a 07       	cpc	r17, r26
    142c:	29 f4       	brne	.+10     	; 0x1438 <bus_init+0x1e6>
    142e:	64 e0       	ldi	r22, 0x04	; 4
    1430:	85 e0       	ldi	r24, 0x05	; 5
    1432:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1436:	98 c0       	rjmp	.+304    	; 0x1568 <bus_init+0x316>
    1438:	00 39       	cpi	r16, 0x90	; 144
    143a:	bb e0       	ldi	r27, 0x0B	; 11
    143c:	1b 07       	cpc	r17, r27
    143e:	29 f4       	brne	.+10     	; 0x144a <bus_init+0x1f8>
    1440:	64 e0       	ldi	r22, 0x04	; 4
    1442:	86 e0       	ldi	r24, 0x06	; 6
    1444:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1448:	8f c0       	rjmp	.+286    	; 0x1568 <bus_init+0x316>
    144a:	00 3c       	cpi	r16, 0xC0	; 192
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	18 07       	cpc	r17, r24
    1450:	29 f4       	brne	.+10     	; 0x145c <bus_init+0x20a>
    1452:	68 e0       	ldi	r22, 0x08	; 8
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    145a:	86 c0       	rjmp	.+268    	; 0x1568 <bus_init+0x316>
    145c:	00 3c       	cpi	r16, 0xC0	; 192
    145e:	a9 e0       	ldi	r26, 0x09	; 9
    1460:	1a 07       	cpc	r17, r26
    1462:	29 f4       	brne	.+10     	; 0x146e <bus_init+0x21c>
    1464:	68 e0       	ldi	r22, 0x08	; 8
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    146c:	7d c0       	rjmp	.+250    	; 0x1568 <bus_init+0x316>
    146e:	00 3c       	cpi	r16, 0xC0	; 192
    1470:	ba e0       	ldi	r27, 0x0A	; 10
    1472:	1b 07       	cpc	r17, r27
    1474:	29 f4       	brne	.+10     	; 0x1480 <bus_init+0x22e>
    1476:	68 e0       	ldi	r22, 0x08	; 8
    1478:	85 e0       	ldi	r24, 0x05	; 5
    147a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    147e:	74 c0       	rjmp	.+232    	; 0x1568 <bus_init+0x316>
    1480:	00 3c       	cpi	r16, 0xC0	; 192
    1482:	8b e0       	ldi	r24, 0x0B	; 11
    1484:	18 07       	cpc	r17, r24
    1486:	29 f4       	brne	.+10     	; 0x1492 <bus_init+0x240>
    1488:	68 e0       	ldi	r22, 0x08	; 8
    148a:	86 e0       	ldi	r24, 0x06	; 6
    148c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <bus_init+0x316>
    1492:	00 3a       	cpi	r16, 0xA0	; 160
    1494:	a8 e0       	ldi	r26, 0x08	; 8
    1496:	1a 07       	cpc	r17, r26
    1498:	29 f4       	brne	.+10     	; 0x14a4 <bus_init+0x252>
    149a:	60 e1       	ldi	r22, 0x10	; 16
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14a2:	62 c0       	rjmp	.+196    	; 0x1568 <bus_init+0x316>
    14a4:	00 3a       	cpi	r16, 0xA0	; 160
    14a6:	b9 e0       	ldi	r27, 0x09	; 9
    14a8:	1b 07       	cpc	r17, r27
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <bus_init+0x264>
    14ac:	60 e1       	ldi	r22, 0x10	; 16
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <bus_init+0x316>
    14b6:	00 3a       	cpi	r16, 0xA0	; 160
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	18 07       	cpc	r17, r24
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <bus_init+0x276>
    14be:	60 e1       	ldi	r22, 0x10	; 16
    14c0:	85 e0       	ldi	r24, 0x05	; 5
    14c2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14c6:	50 c0       	rjmp	.+160    	; 0x1568 <bus_init+0x316>
    14c8:	00 3a       	cpi	r16, 0xA0	; 160
    14ca:	ab e0       	ldi	r26, 0x0B	; 11
    14cc:	1a 07       	cpc	r17, r26
    14ce:	29 f4       	brne	.+10     	; 0x14da <bus_init+0x288>
    14d0:	60 e1       	ldi	r22, 0x10	; 16
    14d2:	86 e0       	ldi	r24, 0x06	; 6
    14d4:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14d8:	47 c0       	rjmp	.+142    	; 0x1568 <bus_init+0x316>
    14da:	00 3b       	cpi	r16, 0xB0	; 176
    14dc:	b8 e0       	ldi	r27, 0x08	; 8
    14de:	1b 07       	cpc	r17, r27
    14e0:	29 f4       	brne	.+10     	; 0x14ec <bus_init+0x29a>
    14e2:	60 e2       	ldi	r22, 0x20	; 32
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14ea:	3e c0       	rjmp	.+124    	; 0x1568 <bus_init+0x316>
    14ec:	00 3b       	cpi	r16, 0xB0	; 176
    14ee:	89 e0       	ldi	r24, 0x09	; 9
    14f0:	18 07       	cpc	r17, r24
    14f2:	29 f4       	brne	.+10     	; 0x14fe <bus_init+0x2ac>
    14f4:	60 e2       	ldi	r22, 0x20	; 32
    14f6:	84 e0       	ldi	r24, 0x04	; 4
    14f8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    14fc:	35 c0       	rjmp	.+106    	; 0x1568 <bus_init+0x316>
    14fe:	00 3b       	cpi	r16, 0xB0	; 176
    1500:	aa e0       	ldi	r26, 0x0A	; 10
    1502:	1a 07       	cpc	r17, r26
    1504:	29 f4       	brne	.+10     	; 0x1510 <bus_init+0x2be>
    1506:	60 e2       	ldi	r22, 0x20	; 32
    1508:	85 e0       	ldi	r24, 0x05	; 5
    150a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <bus_init+0x316>
    1510:	00 3b       	cpi	r16, 0xB0	; 176
    1512:	bb e0       	ldi	r27, 0x0B	; 11
    1514:	1b 07       	cpc	r17, r27
    1516:	29 f4       	brne	.+10     	; 0x1522 <bus_init+0x2d0>
    1518:	60 e2       	ldi	r22, 0x20	; 32
    151a:	86 e0       	ldi	r24, 0x06	; 6
    151c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1520:	23 c0       	rjmp	.+70     	; 0x1568 <bus_init+0x316>
    1522:	00 38       	cpi	r16, 0x80	; 128
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	18 07       	cpc	r17, r24
    1528:	29 f4       	brne	.+10     	; 0x1534 <bus_init+0x2e2>
    152a:	60 e4       	ldi	r22, 0x40	; 64
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1532:	1a c0       	rjmp	.+52     	; 0x1568 <bus_init+0x316>
    1534:	00 39       	cpi	r16, 0x90	; 144
    1536:	a4 e0       	ldi	r26, 0x04	; 4
    1538:	1a 07       	cpc	r17, r26
    153a:	29 f4       	brne	.+10     	; 0x1546 <bus_init+0x2f4>
    153c:	60 e4       	ldi	r22, 0x40	; 64
    153e:	84 e0       	ldi	r24, 0x04	; 4
    1540:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <bus_init+0x316>
    1546:	00 3a       	cpi	r16, 0xA0	; 160
    1548:	b4 e0       	ldi	r27, 0x04	; 4
    154a:	1b 07       	cpc	r17, r27
    154c:	29 f4       	brne	.+10     	; 0x1558 <bus_init+0x306>
    154e:	60 e4       	ldi	r22, 0x40	; 64
    1550:	85 e0       	ldi	r24, 0x05	; 5
    1552:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1556:	08 c0       	rjmp	.+16     	; 0x1568 <bus_init+0x316>
    1558:	00 3b       	cpi	r16, 0xB0	; 176
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	18 07       	cpc	r17, r24
    155e:	21 f4       	brne	.+8      	; 0x1568 <bus_init+0x316>
    1560:	60 e4       	ldi	r22, 0x40	; 64
    1562:	86 e0       	ldi	r24, 0x06	; 6
    1564:	0e 94 bc 1c 	call	0x3978	; 0x3978 <sysclk_enable_module>
    1568:	be 01       	movw	r22, r28
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	c8 01       	movw	r24, r16
    1570:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <twi_master_init>
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	81 11       	cpse	r24, r1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	89 2f       	mov	r24, r25
    157c:	29 96       	adiw	r28, 0x09	; 9
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <bus_read>:
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	2b 97       	sbiw	r28, 0x0b	; 11
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	8c 01       	movw	r16, r24
    15a4:	e2 2e       	mov	r14, r18
    15a6:	f3 2e       	mov	r15, r19
    15a8:	fe 01       	movw	r30, r28
    15aa:	31 96       	adiw	r30, 0x01	; 1
    15ac:	8b e0       	ldi	r24, 0x0B	; 11
    15ae:	df 01       	movw	r26, r30
    15b0:	1d 92       	st	X+, r1
    15b2:	8a 95       	dec	r24
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <bus_read+0x24>
    15b6:	d8 01       	movw	r26, r16
    15b8:	13 96       	adiw	r26, 0x03	; 3
    15ba:	8c 91       	ld	r24, X
    15bc:	13 97       	sbiw	r26, 0x03	; 3
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	6a 83       	std	Y+2, r22	; 0x02
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	4f 83       	std	Y+7, r20	; 0x07
    15cc:	58 87       	std	Y+8, r21	; 0x08
    15ce:	29 87       	std	Y+9, r18	; 0x09
    15d0:	3a 87       	std	Y+10, r19	; 0x0a
    15d2:	16 96       	adiw	r26, 0x06	; 6
    15d4:	8c 91       	ld	r24, X
    15d6:	16 97       	sbiw	r26, 0x06	; 6
    15d8:	8b 87       	std	Y+11, r24	; 0x0b
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	bf 01       	movw	r22, r30
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	12 97       	sbiw	r26, 0x02	; 2
    15e6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <twi_master_transfer>
    15ea:	f8 01       	movw	r30, r16
    15ec:	85 83       	std	Z+5, r24	; 0x05
    15ee:	81 11       	cpse	r24, r1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <bus_read+0x6c>
    15f2:	8e 2d       	mov	r24, r14
    15f4:	9f 2d       	mov	r25, r15
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <bus_read+0x70>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	2b 96       	adiw	r28, 0x0b	; 11
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	08 95       	ret

00001610 <bus_write>:
 * \return The number of Bytes written, which may be less than the
 *         requested number of Bytes in the event of an error.
 */
size_t twi_bus_write(bus_desc_t *bus, uint8_t addr, const void *data,
		size_t count)
{
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	2b 97       	sbiw	r28, 0x0b	; 11
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	8c 01       	movw	r16, r24
    1628:	e2 2e       	mov	r14, r18
    162a:	f3 2e       	mov	r15, r19
	twi_package_t const pkg = {
    162c:	fe 01       	movw	r30, r28
    162e:	31 96       	adiw	r30, 0x01	; 1
    1630:	8b e0       	ldi	r24, 0x0B	; 11
    1632:	df 01       	movw	r26, r30
    1634:	1d 92       	st	X+, r1
    1636:	8a 95       	dec	r24
    1638:	e9 f7       	brne	.-6      	; 0x1634 <bus_write+0x24>
    163a:	d8 01       	movw	r26, r16
    163c:	13 96       	adiw	r26, 0x03	; 3
    163e:	8c 91       	ld	r24, X
    1640:	13 97       	sbiw	r26, 0x03	; 3
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	4f 83       	std	Y+7, r20	; 0x07
    1650:	58 87       	std	Y+8, r21	; 0x08
    1652:	29 87       	std	Y+9, r18	; 0x09
    1654:	3a 87       	std	Y+10, r19	; 0x0a
    1656:	16 96       	adiw	r26, 0x06	; 6
    1658:	8c 91       	ld	r24, X
    165a:	16 97       	sbiw	r26, 0x06	; 6
    165c:	8b 87       	std	Y+11, r24	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	bf 01       	movw	r22, r30
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	8d 91       	ld	r24, X+
    1666:	9c 91       	ld	r25, X
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <twi_master_transfer>
		.buffer      = (void *)data,
		.length      = count,
		.no_wait     = bus->no_wait
	};

	bus->status = twi_master_write((twi_master_t)(bus->id), &pkg);
    166e:	f8 01       	movw	r30, r16
    1670:	85 83       	std	Z+5, r24	; 0x05
	return (STATUS_OK == bus->status) ? count : 0;
    1672:	81 11       	cpse	r24, r1
    1674:	03 c0       	rjmp	.+6      	; 0x167c <bus_write+0x6c>
    1676:	8e 2d       	mov	r24, r14
    1678:	9f 2d       	mov	r25, r15
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <bus_write+0x70>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
}
    1680:	2b 96       	adiw	r28, 0x0b	; 11
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	08 95       	ret

00001694 <nvram_write>:
 * \param   count   the number of Bytes to write
 *
 * \return  Nothing.
 */
void nvram_write(nvram_addr_t dst, const void *src, size_t count)
{
    1694:	0f 93       	push	r16
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	dc 01       	movw	r26, r24
    169c:	eb 01       	movw	r28, r22
    169e:	9a 01       	movw	r18, r20
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    16a0:	e0 ec       	ldi	r30, 0xC0	; 192
    16a2:	f1 e0       	ldi	r31, 0x01	; 1
    16a4:	97 85       	ldd	r25, Z+15	; 0x0f
    16a6:	99 23       	and	r25, r25
    16a8:	ec f3       	brlt	.-6      	; 0x16a4 <nvram_write+0x10>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_write_buffer((flash_addr_t)(dst + SENSOR_NVM_OFFSET),
    16aa:	bd 01       	movw	r22, r26
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	01 e0       	ldi	r16, 0x01	; 1
    16b2:	ae 01       	movw	r20, r28
    16b4:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <nvm_user_sig_write_buffer>

	sysclk_enable_pbb_module(SYSCLK_FLASH_REGS);
	(void)flash_memcpy(flash_addr, src, count, erase_page);
	sysclk_disable_pbb_module(SYSCLK_FLASH_REGS);
#endif
}
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret

000016c0 <nvram_read>:
 * \param   count   the number of Bytes to read
 *
 * \return  Nothing.
 */
void nvram_read(nvram_addr_t src, void *dst, size_t count)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	dc 01       	movw	r26, r24
    16c6:	eb 01       	movw	r28, r22
    16c8:	9a 01       	movw	r18, r20
    16ca:	e0 ec       	ldi	r30, 0xC0	; 192
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	97 85       	ldd	r25, Z+15	; 0x0f
    16d0:	99 23       	and	r25, r25
    16d2:	ec f3       	brlt	.-6      	; 0x16ce <nvram_read+0xe>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_read_buffer((flash_addr_t)(src + SENSOR_NVM_OFFSET), dst,
    16d4:	bd 01       	movw	r22, r26
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	ae 01       	movw	r20, r28
    16dc:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <nvm_user_sig_read_buffer>
			count);
#elif UC3
	memcpy(dst, (void *)(src + SENSOR_NVM_BASE + SENSOR_NVM_OFFSET), count);
#endif
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <__portable_avr_delay_cycles>:
	};

	*dev_count = ARRAYSIZE(sensor_dev_list);

	return sensor_dev_list;
}
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <__portable_avr_delay_cycles+0xa>
    16e8:	61 50       	subi	r22, 0x01	; 1
    16ea:	71 09       	sbc	r23, r1
    16ec:	81 09       	sbc	r24, r1
    16ee:	91 09       	sbc	r25, r1
    16f0:	61 15       	cp	r22, r1
    16f2:	71 05       	cpc	r23, r1
    16f4:	81 05       	cpc	r24, r1
    16f6:	91 05       	cpc	r25, r1
    16f8:	b9 f7       	brne	.-18     	; 0x16e8 <__portable_avr_delay_cycles+0x2>
    16fa:	08 95       	ret

000016fc <sensor_timestamp>:
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	cb 01       	movw	r24, r22
    1702:	08 95       	ret

00001704 <sensor_irq_connect>:
    1704:	0c 94 92 01 	jmp	0x324	; 0x324 <sensor_board_irq_connect>
    1708:	08 95       	ret

0000170a <sensor_find>:
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    170a:	20 91 31 20 	lds	r18, 0x2031	; 0x802031 <sensor_dev_list.6666+0x10>
    170e:	30 91 32 20 	lds	r19, 0x2032	; 0x802032 <sensor_dev_list.6666+0x11>
    1712:	28 23       	and	r18, r24
    1714:	39 23       	and	r19, r25
    1716:	82 17       	cp	r24, r18
    1718:	93 07       	cpc	r25, r19
    171a:	19 f0       	breq	.+6      	; 0x1722 <sensor_find+0x18>
			return &dev_list [index];
		}
	}

	return 0;
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	08 95       	ret
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    1722:	81 e2       	ldi	r24, 0x21	; 33
    1724:	90 e2       	ldi	r25, 0x20	; 32
			return &dev_list [index];
		}
	}

	return 0;
}
    1726:	08 95       	ret

00001728 <sensor_platform_init>:
 * hardware abstraction layer (HAL) for the Xplained Sensor API.
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_platform_init(void)
{
    1728:	cf 93       	push	r28
	bool initialized = false;

	/* Initialize the system clock and all clocks derived from it. */

	sysclk_init();
    172a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <sysclk_init>
	/* Initialize the board (UC3/XMEGA Xplained & Sensor Xplained boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */

	board_init();
    172e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <board_init>

	/* Initialize the sensor bus I/O interface. */

	if (BUSIO_TYPE != BUS_TYPE_UNKNOWN) {
		initialized = sensor_bus_init(&BUSIO_IF, BUSIO_SPEED);
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5a e1       	ldi	r21, 0x1A	; 26
    1736:	66 e0       	ldi	r22, 0x06	; 6
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	80 eb       	ldi	r24, 0xB0	; 176
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	89 dd       	rcall	.-1262   	; 0x1252 <bus_init>
    1740:	c8 2f       	mov	r28, r24
	/* Sensor devices typically require time to settle after power
	 * is applied.  Wait here for a standard time.  (Individual sensor
	 * drivers may need to wait an additional period during initialization
	 * if the device is particularly slow to settle.)
	 */
	delay_ms(SENSOR_START_DELAY_MSEC);
    1742:	6b ea       	ldi	r22, 0xAB	; 171
    1744:	71 e1       	ldi	r23, 0x11	; 17
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	cd df       	rcall	.-102    	; 0x16e6 <__portable_avr_delay_cycles>

	return initialized;
}
    174c:	8c 2f       	mov	r24, r28
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    175c:	2f b7       	in	r18, 0x3f	; 63
    175e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1760:	f8 94       	cli
	return flags;
    1762:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1764:	28 2f       	mov	r18, r24
    1766:	39 2f       	mov	r19, r25
    1768:	21 15       	cp	r18, r1
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	38 07       	cpc	r19, r24
    176e:	29 f4       	brne	.+10     	; 0x177a <adc_set_callback+0x28>
		adca_callback = callback;
    1770:	60 93 75 21 	sts	0x2175, r22	; 0x802175 <adca_callback>
    1774:	70 93 76 21 	sts	0x2176, r23	; 0x802176 <adca_callback+0x1>
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    177a:	20 34       	cpi	r18, 0x40	; 64
    177c:	32 40       	sbci	r19, 0x02	; 2
    177e:	21 f4       	brne	.+8      	; 0x1788 <adc_set_callback+0x36>
		adcb_callback = callback;
    1780:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <adcb_callback>
    1784:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1788:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    178a:	0f 90       	pop	r0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1792:	81 15       	cp	r24, r1
    1794:	22 e0       	ldi	r18, 0x02	; 2
    1796:	92 07       	cpc	r25, r18
    1798:	69 f4       	brne	.+26     	; 0x17b4 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    179a:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <adca_enable_count>
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	98 0f       	add	r25, r24
    17a2:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <adca_enable_count>
    17a6:	81 11       	cpse	r24, r1
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    17aa:	62 e0       	ldi	r22, 0x02	; 2
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <sysclk_enable_module>
    17b2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    17b4:	80 34       	cpi	r24, 0x40	; 64
    17b6:	92 40       	sbci	r25, 0x02	; 2
    17b8:	61 f4       	brne	.+24     	; 0x17d2 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    17ba:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <adcb_enable_count>
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	98 0f       	add	r25, r24
    17c2:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <adcb_enable_count>
    17c6:	81 11       	cpse	r24, r1
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <sysclk_enable_module>
    17d2:	08 95       	ret

000017d4 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    17d4:	81 15       	cp	r24, r1
    17d6:	22 e0       	ldi	r18, 0x02	; 2
    17d8:	92 07       	cpc	r25, r18
    17da:	61 f4       	brne	.+24     	; 0x17f4 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    17dc:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <adca_enable_count>
    17e0:	81 50       	subi	r24, 0x01	; 1
    17e2:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <adca_enable_count>
    17e6:	81 11       	cpse	r24, r1
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <sysclk_disable_module>
    17f2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    17f4:	80 34       	cpi	r24, 0x40	; 64
    17f6:	92 40       	sbci	r25, 0x02	; 2
    17f8:	59 f4       	brne	.+22     	; 0x1810 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    17fa:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <adcb_enable_count>
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <adcb_enable_count>
    1804:	81 11       	cpse	r24, r1
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <sysclk_disable_module>
    1810:	08 95       	ret

00001812 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	1f 92       	push	r1
    181e:	1f 92       	push	r1
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1826:	8f b7       	in	r24, 0x3f	; 63
    1828:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    182a:	f8 94       	cli
	return flags;
    182c:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    182e:	c7 01       	movw	r24, r14
    1830:	b0 df       	rcall	.-160    	; 0x1792 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    1832:	f7 01       	movw	r30, r14
    1834:	80 81       	ld	r24, Z
    1836:	81 60       	ori	r24, 0x01	; 1
    1838:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    183a:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    183c:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <sleepmgr_locks+0x1>
    1840:	8f 3f       	cpi	r24, 0xFF	; 255
    1842:	09 f4       	brne	.+2      	; 0x1846 <adc_enable+0x34>
    1844:	ff cf       	rjmp	.-2      	; 0x1844 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1846:	8f b7       	in	r24, 0x3f	; 63
    1848:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    184a:	f8 94       	cli
	return flags;
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    184e:	e7 e7       	ldi	r30, 0x77	; 119
    1850:	f1 e2       	ldi	r31, 0x21	; 33
    1852:	81 81       	ldd	r24, Z+1	; 0x01
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1858:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	08 95       	ret

0000186a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	08 b6       	in	r0, 0x38	; 56
    1876:	0f 92       	push	r0
    1878:	18 be       	out	0x38, r1	; 56
    187a:	09 b6       	in	r0, 0x39	; 57
    187c:	0f 92       	push	r0
    187e:	19 be       	out	0x39, r1	; 57
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	1b be       	out	0x3b, r1	; 59
    1886:	2f 93       	push	r18
    1888:	3f 93       	push	r19
    188a:	4f 93       	push	r20
    188c:	5f 93       	push	r21
    188e:	6f 93       	push	r22
    1890:	7f 93       	push	r23
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    189e:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcc0_ovf_callback>
    18a2:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcc0_ovf_callback+0x1>
    18a6:	30 97       	sbiw	r30, 0x00	; 0
    18a8:	09 f0       	breq	.+2      	; 0x18ac <__vector_14+0x42>
		tc_tcc0_ovf_callback();
    18aa:	19 95       	eicall
	}
}
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	7f 91       	pop	r23
    18ba:	6f 91       	pop	r22
    18bc:	5f 91       	pop	r21
    18be:	4f 91       	pop	r20
    18c0:	3f 91       	pop	r19
    18c2:	2f 91       	pop	r18
    18c4:	0f 90       	pop	r0
    18c6:	0b be       	out	0x3b, r0	; 59
    18c8:	0f 90       	pop	r0
    18ca:	09 be       	out	0x39, r0	; 57
    18cc:	0f 90       	pop	r0
    18ce:	08 be       	out	0x38, r0	; 56
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	08 b6       	in	r0, 0x38	; 56
    18e6:	0f 92       	push	r0
    18e8:	18 be       	out	0x38, r1	; 56
    18ea:	09 b6       	in	r0, 0x39	; 57
    18ec:	0f 92       	push	r0
    18ee:	19 be       	out	0x39, r1	; 57
    18f0:	0b b6       	in	r0, 0x3b	; 59
    18f2:	0f 92       	push	r0
    18f4:	1b be       	out	0x3b, r1	; 59
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    190e:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcc0_err_callback>
    1912:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcc0_err_callback+0x1>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_15+0x42>
		tc_tcc0_err_callback();
    191a:	19 95       	eicall
	}
}
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	0b be       	out	0x3b, r0	; 59
    1938:	0f 90       	pop	r0
    193a:	09 be       	out	0x39, r0	; 57
    193c:	0f 90       	pop	r0
    193e:	08 be       	out	0x38, r0	; 56
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	08 b6       	in	r0, 0x38	; 56
    1956:	0f 92       	push	r0
    1958:	18 be       	out	0x38, r1	; 56
    195a:	09 b6       	in	r0, 0x39	; 57
    195c:	0f 92       	push	r0
    195e:	19 be       	out	0x39, r1	; 57
    1960:	0b b6       	in	r0, 0x3b	; 59
    1962:	0f 92       	push	r0
    1964:	1b be       	out	0x3b, r1	; 59
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    197e:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcc0_cca_callback>
    1982:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcc0_cca_callback+0x1>
    1986:	30 97       	sbiw	r30, 0x00	; 0
    1988:	09 f0       	breq	.+2      	; 0x198c <__vector_16+0x42>
		tc_tcc0_cca_callback();
    198a:	19 95       	eicall
	}
}
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0b be       	out	0x3b, r0	; 59
    19a8:	0f 90       	pop	r0
    19aa:	09 be       	out	0x39, r0	; 57
    19ac:	0f 90       	pop	r0
    19ae:	08 be       	out	0x38, r0	; 56
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	08 b6       	in	r0, 0x38	; 56
    19c6:	0f 92       	push	r0
    19c8:	18 be       	out	0x38, r1	; 56
    19ca:	09 b6       	in	r0, 0x39	; 57
    19cc:	0f 92       	push	r0
    19ce:	19 be       	out	0x39, r1	; 57
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	1b be       	out	0x3b, r1	; 59
    19d6:	2f 93       	push	r18
    19d8:	3f 93       	push	r19
    19da:	4f 93       	push	r20
    19dc:	5f 93       	push	r21
    19de:	6f 93       	push	r22
    19e0:	7f 93       	push	r23
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    19ee:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcc0_ccb_callback>
    19f2:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcc0_ccb_callback+0x1>
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	09 f0       	breq	.+2      	; 0x19fc <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    19fa:	19 95       	eicall
	}
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	bf 91       	pop	r27
    1a02:	af 91       	pop	r26
    1a04:	9f 91       	pop	r25
    1a06:	8f 91       	pop	r24
    1a08:	7f 91       	pop	r23
    1a0a:	6f 91       	pop	r22
    1a0c:	5f 91       	pop	r21
    1a0e:	4f 91       	pop	r20
    1a10:	3f 91       	pop	r19
    1a12:	2f 91       	pop	r18
    1a14:	0f 90       	pop	r0
    1a16:	0b be       	out	0x3b, r0	; 59
    1a18:	0f 90       	pop	r0
    1a1a:	09 be       	out	0x39, r0	; 57
    1a1c:	0f 90       	pop	r0
    1a1e:	08 be       	out	0x38, r0	; 56
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	08 b6       	in	r0, 0x38	; 56
    1a36:	0f 92       	push	r0
    1a38:	18 be       	out	0x38, r1	; 56
    1a3a:	09 b6       	in	r0, 0x39	; 57
    1a3c:	0f 92       	push	r0
    1a3e:	19 be       	out	0x39, r1	; 57
    1a40:	0b b6       	in	r0, 0x3b	; 59
    1a42:	0f 92       	push	r0
    1a44:	1b be       	out	0x3b, r1	; 59
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1a5e:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcc0_ccc_callback>
    1a62:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcc0_ccc_callback+0x1>
    1a66:	30 97       	sbiw	r30, 0x00	; 0
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    1a6a:	19 95       	eicall
	}
}
    1a6c:	ff 91       	pop	r31
    1a6e:	ef 91       	pop	r30
    1a70:	bf 91       	pop	r27
    1a72:	af 91       	pop	r26
    1a74:	9f 91       	pop	r25
    1a76:	8f 91       	pop	r24
    1a78:	7f 91       	pop	r23
    1a7a:	6f 91       	pop	r22
    1a7c:	5f 91       	pop	r21
    1a7e:	4f 91       	pop	r20
    1a80:	3f 91       	pop	r19
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0b be       	out	0x3b, r0	; 59
    1a88:	0f 90       	pop	r0
    1a8a:	09 be       	out	0x39, r0	; 57
    1a8c:	0f 90       	pop	r0
    1a8e:	08 be       	out	0x38, r0	; 56
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	08 b6       	in	r0, 0x38	; 56
    1aa6:	0f 92       	push	r0
    1aa8:	18 be       	out	0x38, r1	; 56
    1aaa:	09 b6       	in	r0, 0x39	; 57
    1aac:	0f 92       	push	r0
    1aae:	19 be       	out	0x39, r1	; 57
    1ab0:	0b b6       	in	r0, 0x3b	; 59
    1ab2:	0f 92       	push	r0
    1ab4:	1b be       	out	0x3b, r1	; 59
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	af 93       	push	r26
    1ac8:	bf 93       	push	r27
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1ace:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcc0_ccd_callback>
    1ad2:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcc0_ccd_callback+0x1>
    1ad6:	30 97       	sbiw	r30, 0x00	; 0
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    1ada:	19 95       	eicall
	}
}
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	0f 90       	pop	r0
    1af6:	0b be       	out	0x3b, r0	; 59
    1af8:	0f 90       	pop	r0
    1afa:	09 be       	out	0x39, r0	; 57
    1afc:	0f 90       	pop	r0
    1afe:	08 be       	out	0x38, r0	; 56
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	08 b6       	in	r0, 0x38	; 56
    1b16:	0f 92       	push	r0
    1b18:	18 be       	out	0x38, r1	; 56
    1b1a:	09 b6       	in	r0, 0x39	; 57
    1b1c:	0f 92       	push	r0
    1b1e:	19 be       	out	0x39, r1	; 57
    1b20:	0b b6       	in	r0, 0x3b	; 59
    1b22:	0f 92       	push	r0
    1b24:	1b be       	out	0x3b, r1	; 59
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	4f 93       	push	r20
    1b2c:	5f 93       	push	r21
    1b2e:	6f 93       	push	r22
    1b30:	7f 93       	push	r23
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1b3e:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcc1_ovf_callback>
    1b42:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcc1_ovf_callback+0x1>
    1b46:	30 97       	sbiw	r30, 0x00	; 0
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    1b4a:	19 95       	eicall
	}
}
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0b be       	out	0x3b, r0	; 59
    1b68:	0f 90       	pop	r0
    1b6a:	09 be       	out	0x39, r0	; 57
    1b6c:	0f 90       	pop	r0
    1b6e:	08 be       	out	0x38, r0	; 56
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1b7a:	1f 92       	push	r1
    1b7c:	0f 92       	push	r0
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	08 b6       	in	r0, 0x38	; 56
    1b86:	0f 92       	push	r0
    1b88:	18 be       	out	0x38, r1	; 56
    1b8a:	09 b6       	in	r0, 0x39	; 57
    1b8c:	0f 92       	push	r0
    1b8e:	19 be       	out	0x39, r1	; 57
    1b90:	0b b6       	in	r0, 0x3b	; 59
    1b92:	0f 92       	push	r0
    1b94:	1b be       	out	0x3b, r1	; 59
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1bae:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcc1_err_callback>
    1bb2:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcc1_err_callback+0x1>
    1bb6:	30 97       	sbiw	r30, 0x00	; 0
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__vector_21+0x42>
		tc_tcc1_err_callback();
    1bba:	19 95       	eicall
	}
}
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0b be       	out	0x3b, r0	; 59
    1bd8:	0f 90       	pop	r0
    1bda:	09 be       	out	0x39, r0	; 57
    1bdc:	0f 90       	pop	r0
    1bde:	08 be       	out	0x38, r0	; 56
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f 90       	pop	r0
    1be6:	1f 90       	pop	r1
    1be8:	18 95       	reti

00001bea <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1bea:	1f 92       	push	r1
    1bec:	0f 92       	push	r0
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	0f 92       	push	r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	08 b6       	in	r0, 0x38	; 56
    1bf6:	0f 92       	push	r0
    1bf8:	18 be       	out	0x38, r1	; 56
    1bfa:	09 b6       	in	r0, 0x39	; 57
    1bfc:	0f 92       	push	r0
    1bfe:	19 be       	out	0x39, r1	; 57
    1c00:	0b b6       	in	r0, 0x3b	; 59
    1c02:	0f 92       	push	r0
    1c04:	1b be       	out	0x3b, r1	; 59
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1c1e:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <tc_tcc1_cca_callback>
    1c22:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <tc_tcc1_cca_callback+0x1>
    1c26:	30 97       	sbiw	r30, 0x00	; 0
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <__vector_22+0x42>
		tc_tcc1_cca_callback();
    1c2a:	19 95       	eicall
	}
}
    1c2c:	ff 91       	pop	r31
    1c2e:	ef 91       	pop	r30
    1c30:	bf 91       	pop	r27
    1c32:	af 91       	pop	r26
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	7f 91       	pop	r23
    1c3a:	6f 91       	pop	r22
    1c3c:	5f 91       	pop	r21
    1c3e:	4f 91       	pop	r20
    1c40:	3f 91       	pop	r19
    1c42:	2f 91       	pop	r18
    1c44:	0f 90       	pop	r0
    1c46:	0b be       	out	0x3b, r0	; 59
    1c48:	0f 90       	pop	r0
    1c4a:	09 be       	out	0x39, r0	; 57
    1c4c:	0f 90       	pop	r0
    1c4e:	08 be       	out	0x38, r0	; 56
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	08 b6       	in	r0, 0x38	; 56
    1c66:	0f 92       	push	r0
    1c68:	18 be       	out	0x38, r1	; 56
    1c6a:	09 b6       	in	r0, 0x39	; 57
    1c6c:	0f 92       	push	r0
    1c6e:	19 be       	out	0x39, r1	; 57
    1c70:	0b b6       	in	r0, 0x3b	; 59
    1c72:	0f 92       	push	r0
    1c74:	1b be       	out	0x3b, r1	; 59
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1c8e:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <tc_tcc1_ccb_callback>
    1c92:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <tc_tcc1_ccb_callback+0x1>
    1c96:	30 97       	sbiw	r30, 0x00	; 0
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    1c9a:	19 95       	eicall
	}
}
    1c9c:	ff 91       	pop	r31
    1c9e:	ef 91       	pop	r30
    1ca0:	bf 91       	pop	r27
    1ca2:	af 91       	pop	r26
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	7f 91       	pop	r23
    1caa:	6f 91       	pop	r22
    1cac:	5f 91       	pop	r21
    1cae:	4f 91       	pop	r20
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0b be       	out	0x3b, r0	; 59
    1cb8:	0f 90       	pop	r0
    1cba:	09 be       	out	0x39, r0	; 57
    1cbc:	0f 90       	pop	r0
    1cbe:	08 be       	out	0x38, r0	; 56
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	08 b6       	in	r0, 0x38	; 56
    1cd6:	0f 92       	push	r0
    1cd8:	18 be       	out	0x38, r1	; 56
    1cda:	09 b6       	in	r0, 0x39	; 57
    1cdc:	0f 92       	push	r0
    1cde:	19 be       	out	0x39, r1	; 57
    1ce0:	0b b6       	in	r0, 0x3b	; 59
    1ce2:	0f 92       	push	r0
    1ce4:	1b be       	out	0x3b, r1	; 59
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1cfe:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <tc_tcd0_ovf_callback>
    1d02:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <tc_tcd0_ovf_callback+0x1>
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    1d0a:	19 95       	eicall
	}
}
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	bf 91       	pop	r27
    1d12:	af 91       	pop	r26
    1d14:	9f 91       	pop	r25
    1d16:	8f 91       	pop	r24
    1d18:	7f 91       	pop	r23
    1d1a:	6f 91       	pop	r22
    1d1c:	5f 91       	pop	r21
    1d1e:	4f 91       	pop	r20
    1d20:	3f 91       	pop	r19
    1d22:	2f 91       	pop	r18
    1d24:	0f 90       	pop	r0
    1d26:	0b be       	out	0x3b, r0	; 59
    1d28:	0f 90       	pop	r0
    1d2a:	09 be       	out	0x39, r0	; 57
    1d2c:	0f 90       	pop	r0
    1d2e:	08 be       	out	0x38, r0	; 56
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	08 b6       	in	r0, 0x38	; 56
    1d46:	0f 92       	push	r0
    1d48:	18 be       	out	0x38, r1	; 56
    1d4a:	09 b6       	in	r0, 0x39	; 57
    1d4c:	0f 92       	push	r0
    1d4e:	19 be       	out	0x39, r1	; 57
    1d50:	0b b6       	in	r0, 0x3b	; 59
    1d52:	0f 92       	push	r0
    1d54:	1b be       	out	0x3b, r1	; 59
    1d56:	2f 93       	push	r18
    1d58:	3f 93       	push	r19
    1d5a:	4f 93       	push	r20
    1d5c:	5f 93       	push	r21
    1d5e:	6f 93       	push	r22
    1d60:	7f 93       	push	r23
    1d62:	8f 93       	push	r24
    1d64:	9f 93       	push	r25
    1d66:	af 93       	push	r26
    1d68:	bf 93       	push	r27
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1d6e:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <tc_tcd0_err_callback>
    1d72:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <tc_tcd0_err_callback+0x1>
    1d76:	30 97       	sbiw	r30, 0x00	; 0
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <__vector_78+0x42>
		tc_tcd0_err_callback();
    1d7a:	19 95       	eicall
	}
}
    1d7c:	ff 91       	pop	r31
    1d7e:	ef 91       	pop	r30
    1d80:	bf 91       	pop	r27
    1d82:	af 91       	pop	r26
    1d84:	9f 91       	pop	r25
    1d86:	8f 91       	pop	r24
    1d88:	7f 91       	pop	r23
    1d8a:	6f 91       	pop	r22
    1d8c:	5f 91       	pop	r21
    1d8e:	4f 91       	pop	r20
    1d90:	3f 91       	pop	r19
    1d92:	2f 91       	pop	r18
    1d94:	0f 90       	pop	r0
    1d96:	0b be       	out	0x3b, r0	; 59
    1d98:	0f 90       	pop	r0
    1d9a:	09 be       	out	0x39, r0	; 57
    1d9c:	0f 90       	pop	r0
    1d9e:	08 be       	out	0x38, r0	; 56
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	08 b6       	in	r0, 0x38	; 56
    1db6:	0f 92       	push	r0
    1db8:	18 be       	out	0x38, r1	; 56
    1dba:	09 b6       	in	r0, 0x39	; 57
    1dbc:	0f 92       	push	r0
    1dbe:	19 be       	out	0x39, r1	; 57
    1dc0:	0b b6       	in	r0, 0x3b	; 59
    1dc2:	0f 92       	push	r0
    1dc4:	1b be       	out	0x3b, r1	; 59
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	4f 93       	push	r20
    1dcc:	5f 93       	push	r21
    1dce:	6f 93       	push	r22
    1dd0:	7f 93       	push	r23
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1dde:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <tc_tcd0_cca_callback>
    1de2:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <tc_tcd0_cca_callback+0x1>
    1de6:	30 97       	sbiw	r30, 0x00	; 0
    1de8:	09 f0       	breq	.+2      	; 0x1dec <__vector_79+0x42>
		tc_tcd0_cca_callback();
    1dea:	19 95       	eicall
	}
}
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0b be       	out	0x3b, r0	; 59
    1e08:	0f 90       	pop	r0
    1e0a:	09 be       	out	0x39, r0	; 57
    1e0c:	0f 90       	pop	r0
    1e0e:	08 be       	out	0x38, r0	; 56
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	08 b6       	in	r0, 0x38	; 56
    1e26:	0f 92       	push	r0
    1e28:	18 be       	out	0x38, r1	; 56
    1e2a:	09 b6       	in	r0, 0x39	; 57
    1e2c:	0f 92       	push	r0
    1e2e:	19 be       	out	0x39, r1	; 57
    1e30:	0b b6       	in	r0, 0x3b	; 59
    1e32:	0f 92       	push	r0
    1e34:	1b be       	out	0x3b, r1	; 59
    1e36:	2f 93       	push	r18
    1e38:	3f 93       	push	r19
    1e3a:	4f 93       	push	r20
    1e3c:	5f 93       	push	r21
    1e3e:	6f 93       	push	r22
    1e40:	7f 93       	push	r23
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1e4e:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <tc_tcd0_ccb_callback>
    1e52:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <tc_tcd0_ccb_callback+0x1>
    1e56:	30 97       	sbiw	r30, 0x00	; 0
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    1e5a:	19 95       	eicall
	}
}
    1e5c:	ff 91       	pop	r31
    1e5e:	ef 91       	pop	r30
    1e60:	bf 91       	pop	r27
    1e62:	af 91       	pop	r26
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	7f 91       	pop	r23
    1e6a:	6f 91       	pop	r22
    1e6c:	5f 91       	pop	r21
    1e6e:	4f 91       	pop	r20
    1e70:	3f 91       	pop	r19
    1e72:	2f 91       	pop	r18
    1e74:	0f 90       	pop	r0
    1e76:	0b be       	out	0x3b, r0	; 59
    1e78:	0f 90       	pop	r0
    1e7a:	09 be       	out	0x39, r0	; 57
    1e7c:	0f 90       	pop	r0
    1e7e:	08 be       	out	0x38, r0	; 56
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1e8a:	1f 92       	push	r1
    1e8c:	0f 92       	push	r0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	0f 92       	push	r0
    1e92:	11 24       	eor	r1, r1
    1e94:	08 b6       	in	r0, 0x38	; 56
    1e96:	0f 92       	push	r0
    1e98:	18 be       	out	0x38, r1	; 56
    1e9a:	09 b6       	in	r0, 0x39	; 57
    1e9c:	0f 92       	push	r0
    1e9e:	19 be       	out	0x39, r1	; 57
    1ea0:	0b b6       	in	r0, 0x3b	; 59
    1ea2:	0f 92       	push	r0
    1ea4:	1b be       	out	0x3b, r1	; 59
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1ebe:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <tc_tcd0_ccc_callback>
    1ec2:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <tc_tcd0_ccc_callback+0x1>
    1ec6:	30 97       	sbiw	r30, 0x00	; 0
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    1eca:	19 95       	eicall
	}
}
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	bf 91       	pop	r27
    1ed2:	af 91       	pop	r26
    1ed4:	9f 91       	pop	r25
    1ed6:	8f 91       	pop	r24
    1ed8:	7f 91       	pop	r23
    1eda:	6f 91       	pop	r22
    1edc:	5f 91       	pop	r21
    1ede:	4f 91       	pop	r20
    1ee0:	3f 91       	pop	r19
    1ee2:	2f 91       	pop	r18
    1ee4:	0f 90       	pop	r0
    1ee6:	0b be       	out	0x3b, r0	; 59
    1ee8:	0f 90       	pop	r0
    1eea:	09 be       	out	0x39, r0	; 57
    1eec:	0f 90       	pop	r0
    1eee:	08 be       	out	0x38, r0	; 56
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	08 b6       	in	r0, 0x38	; 56
    1f06:	0f 92       	push	r0
    1f08:	18 be       	out	0x38, r1	; 56
    1f0a:	09 b6       	in	r0, 0x39	; 57
    1f0c:	0f 92       	push	r0
    1f0e:	19 be       	out	0x39, r1	; 57
    1f10:	0b b6       	in	r0, 0x3b	; 59
    1f12:	0f 92       	push	r0
    1f14:	1b be       	out	0x3b, r1	; 59
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1f2e:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <tc_tcd0_ccd_callback>
    1f32:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <tc_tcd0_ccd_callback+0x1>
    1f36:	30 97       	sbiw	r30, 0x00	; 0
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    1f3a:	19 95       	eicall
	}
}
    1f3c:	ff 91       	pop	r31
    1f3e:	ef 91       	pop	r30
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	0f 90       	pop	r0
    1f56:	0b be       	out	0x3b, r0	; 59
    1f58:	0f 90       	pop	r0
    1f5a:	09 be       	out	0x39, r0	; 57
    1f5c:	0f 90       	pop	r0
    1f5e:	08 be       	out	0x38, r0	; 56
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	08 b6       	in	r0, 0x38	; 56
    1f76:	0f 92       	push	r0
    1f78:	18 be       	out	0x38, r1	; 56
    1f7a:	09 b6       	in	r0, 0x39	; 57
    1f7c:	0f 92       	push	r0
    1f7e:	19 be       	out	0x39, r1	; 57
    1f80:	0b b6       	in	r0, 0x3b	; 59
    1f82:	0f 92       	push	r0
    1f84:	1b be       	out	0x3b, r1	; 59
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1f9e:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <tc_tcd1_ovf_callback>
    1fa2:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <tc_tcd1_ovf_callback+0x1>
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    1faa:	19 95       	eicall
	}
}
    1fac:	ff 91       	pop	r31
    1fae:	ef 91       	pop	r30
    1fb0:	bf 91       	pop	r27
    1fb2:	af 91       	pop	r26
    1fb4:	9f 91       	pop	r25
    1fb6:	8f 91       	pop	r24
    1fb8:	7f 91       	pop	r23
    1fba:	6f 91       	pop	r22
    1fbc:	5f 91       	pop	r21
    1fbe:	4f 91       	pop	r20
    1fc0:	3f 91       	pop	r19
    1fc2:	2f 91       	pop	r18
    1fc4:	0f 90       	pop	r0
    1fc6:	0b be       	out	0x3b, r0	; 59
    1fc8:	0f 90       	pop	r0
    1fca:	09 be       	out	0x39, r0	; 57
    1fcc:	0f 90       	pop	r0
    1fce:	08 be       	out	0x38, r0	; 56
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	08 b6       	in	r0, 0x38	; 56
    1fe6:	0f 92       	push	r0
    1fe8:	18 be       	out	0x38, r1	; 56
    1fea:	09 b6       	in	r0, 0x39	; 57
    1fec:	0f 92       	push	r0
    1fee:	19 be       	out	0x39, r1	; 57
    1ff0:	0b b6       	in	r0, 0x3b	; 59
    1ff2:	0f 92       	push	r0
    1ff4:	1b be       	out	0x3b, r1	; 59
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    200e:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <tc_tcd1_err_callback>
    2012:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <tc_tcd1_err_callback+0x1>
    2016:	30 97       	sbiw	r30, 0x00	; 0
    2018:	09 f0       	breq	.+2      	; 0x201c <__vector_84+0x42>
		tc_tcd1_err_callback();
    201a:	19 95       	eicall
	}
}
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0b be       	out	0x3b, r0	; 59
    2038:	0f 90       	pop	r0
    203a:	09 be       	out	0x39, r0	; 57
    203c:	0f 90       	pop	r0
    203e:	08 be       	out	0x38, r0	; 56
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	08 b6       	in	r0, 0x38	; 56
    2056:	0f 92       	push	r0
    2058:	18 be       	out	0x38, r1	; 56
    205a:	09 b6       	in	r0, 0x39	; 57
    205c:	0f 92       	push	r0
    205e:	19 be       	out	0x39, r1	; 57
    2060:	0b b6       	in	r0, 0x3b	; 59
    2062:	0f 92       	push	r0
    2064:	1b be       	out	0x3b, r1	; 59
    2066:	2f 93       	push	r18
    2068:	3f 93       	push	r19
    206a:	4f 93       	push	r20
    206c:	5f 93       	push	r21
    206e:	6f 93       	push	r22
    2070:	7f 93       	push	r23
    2072:	8f 93       	push	r24
    2074:	9f 93       	push	r25
    2076:	af 93       	push	r26
    2078:	bf 93       	push	r27
    207a:	ef 93       	push	r30
    207c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    207e:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tcd1_cca_callback>
    2082:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tcd1_cca_callback+0x1>
    2086:	30 97       	sbiw	r30, 0x00	; 0
    2088:	09 f0       	breq	.+2      	; 0x208c <__vector_85+0x42>
		tc_tcd1_cca_callback();
    208a:	19 95       	eicall
	}
}
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0b be       	out	0x3b, r0	; 59
    20a8:	0f 90       	pop	r0
    20aa:	09 be       	out	0x39, r0	; 57
    20ac:	0f 90       	pop	r0
    20ae:	08 be       	out	0x38, r0	; 56
    20b0:	0f 90       	pop	r0
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	0f 90       	pop	r0
    20b6:	1f 90       	pop	r1
    20b8:	18 95       	reti

000020ba <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	08 b6       	in	r0, 0x38	; 56
    20c6:	0f 92       	push	r0
    20c8:	18 be       	out	0x38, r1	; 56
    20ca:	09 b6       	in	r0, 0x39	; 57
    20cc:	0f 92       	push	r0
    20ce:	19 be       	out	0x39, r1	; 57
    20d0:	0b b6       	in	r0, 0x3b	; 59
    20d2:	0f 92       	push	r0
    20d4:	1b be       	out	0x3b, r1	; 59
    20d6:	2f 93       	push	r18
    20d8:	3f 93       	push	r19
    20da:	4f 93       	push	r20
    20dc:	5f 93       	push	r21
    20de:	6f 93       	push	r22
    20e0:	7f 93       	push	r23
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	af 93       	push	r26
    20e8:	bf 93       	push	r27
    20ea:	ef 93       	push	r30
    20ec:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    20ee:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tcd1_ccb_callback>
    20f2:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tcd1_ccb_callback+0x1>
    20f6:	30 97       	sbiw	r30, 0x00	; 0
    20f8:	09 f0       	breq	.+2      	; 0x20fc <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    20fa:	19 95       	eicall
	}
}
    20fc:	ff 91       	pop	r31
    20fe:	ef 91       	pop	r30
    2100:	bf 91       	pop	r27
    2102:	af 91       	pop	r26
    2104:	9f 91       	pop	r25
    2106:	8f 91       	pop	r24
    2108:	7f 91       	pop	r23
    210a:	6f 91       	pop	r22
    210c:	5f 91       	pop	r21
    210e:	4f 91       	pop	r20
    2110:	3f 91       	pop	r19
    2112:	2f 91       	pop	r18
    2114:	0f 90       	pop	r0
    2116:	0b be       	out	0x3b, r0	; 59
    2118:	0f 90       	pop	r0
    211a:	09 be       	out	0x39, r0	; 57
    211c:	0f 90       	pop	r0
    211e:	08 be       	out	0x38, r0	; 56
    2120:	0f 90       	pop	r0
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	0f 90       	pop	r0
    2126:	1f 90       	pop	r1
    2128:	18 95       	reti

0000212a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    212a:	1f 92       	push	r1
    212c:	0f 92       	push	r0
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	0f 92       	push	r0
    2132:	11 24       	eor	r1, r1
    2134:	08 b6       	in	r0, 0x38	; 56
    2136:	0f 92       	push	r0
    2138:	18 be       	out	0x38, r1	; 56
    213a:	09 b6       	in	r0, 0x39	; 57
    213c:	0f 92       	push	r0
    213e:	19 be       	out	0x39, r1	; 57
    2140:	0b b6       	in	r0, 0x3b	; 59
    2142:	0f 92       	push	r0
    2144:	1b be       	out	0x3b, r1	; 59
    2146:	2f 93       	push	r18
    2148:	3f 93       	push	r19
    214a:	4f 93       	push	r20
    214c:	5f 93       	push	r21
    214e:	6f 93       	push	r22
    2150:	7f 93       	push	r23
    2152:	8f 93       	push	r24
    2154:	9f 93       	push	r25
    2156:	af 93       	push	r26
    2158:	bf 93       	push	r27
    215a:	ef 93       	push	r30
    215c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    215e:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tce0_ovf_callback>
    2162:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tce0_ovf_callback+0x1>
    2166:	30 97       	sbiw	r30, 0x00	; 0
    2168:	09 f0       	breq	.+2      	; 0x216c <__vector_47+0x42>
		tc_tce0_ovf_callback();
    216a:	19 95       	eicall
	}
}
    216c:	ff 91       	pop	r31
    216e:	ef 91       	pop	r30
    2170:	bf 91       	pop	r27
    2172:	af 91       	pop	r26
    2174:	9f 91       	pop	r25
    2176:	8f 91       	pop	r24
    2178:	7f 91       	pop	r23
    217a:	6f 91       	pop	r22
    217c:	5f 91       	pop	r21
    217e:	4f 91       	pop	r20
    2180:	3f 91       	pop	r19
    2182:	2f 91       	pop	r18
    2184:	0f 90       	pop	r0
    2186:	0b be       	out	0x3b, r0	; 59
    2188:	0f 90       	pop	r0
    218a:	09 be       	out	0x39, r0	; 57
    218c:	0f 90       	pop	r0
    218e:	08 be       	out	0x38, r0	; 56
    2190:	0f 90       	pop	r0
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	0f 90       	pop	r0
    2196:	1f 90       	pop	r1
    2198:	18 95       	reti

0000219a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	0f 92       	push	r0
    21a2:	11 24       	eor	r1, r1
    21a4:	08 b6       	in	r0, 0x38	; 56
    21a6:	0f 92       	push	r0
    21a8:	18 be       	out	0x38, r1	; 56
    21aa:	09 b6       	in	r0, 0x39	; 57
    21ac:	0f 92       	push	r0
    21ae:	19 be       	out	0x39, r1	; 57
    21b0:	0b b6       	in	r0, 0x3b	; 59
    21b2:	0f 92       	push	r0
    21b4:	1b be       	out	0x3b, r1	; 59
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    21ce:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tce0_err_callback>
    21d2:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tce0_err_callback+0x1>
    21d6:	30 97       	sbiw	r30, 0x00	; 0
    21d8:	09 f0       	breq	.+2      	; 0x21dc <__vector_48+0x42>
		tc_tce0_err_callback();
    21da:	19 95       	eicall
	}
}
    21dc:	ff 91       	pop	r31
    21de:	ef 91       	pop	r30
    21e0:	bf 91       	pop	r27
    21e2:	af 91       	pop	r26
    21e4:	9f 91       	pop	r25
    21e6:	8f 91       	pop	r24
    21e8:	7f 91       	pop	r23
    21ea:	6f 91       	pop	r22
    21ec:	5f 91       	pop	r21
    21ee:	4f 91       	pop	r20
    21f0:	3f 91       	pop	r19
    21f2:	2f 91       	pop	r18
    21f4:	0f 90       	pop	r0
    21f6:	0b be       	out	0x3b, r0	; 59
    21f8:	0f 90       	pop	r0
    21fa:	09 be       	out	0x39, r0	; 57
    21fc:	0f 90       	pop	r0
    21fe:	08 be       	out	0x38, r0	; 56
    2200:	0f 90       	pop	r0
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	18 95       	reti

0000220a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    220a:	1f 92       	push	r1
    220c:	0f 92       	push	r0
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	0f 92       	push	r0
    2212:	11 24       	eor	r1, r1
    2214:	08 b6       	in	r0, 0x38	; 56
    2216:	0f 92       	push	r0
    2218:	18 be       	out	0x38, r1	; 56
    221a:	09 b6       	in	r0, 0x39	; 57
    221c:	0f 92       	push	r0
    221e:	19 be       	out	0x39, r1	; 57
    2220:	0b b6       	in	r0, 0x3b	; 59
    2222:	0f 92       	push	r0
    2224:	1b be       	out	0x3b, r1	; 59
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	5f 93       	push	r21
    222e:	6f 93       	push	r22
    2230:	7f 93       	push	r23
    2232:	8f 93       	push	r24
    2234:	9f 93       	push	r25
    2236:	af 93       	push	r26
    2238:	bf 93       	push	r27
    223a:	ef 93       	push	r30
    223c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    223e:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tce0_cca_callback>
    2242:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tce0_cca_callback+0x1>
    2246:	30 97       	sbiw	r30, 0x00	; 0
    2248:	09 f0       	breq	.+2      	; 0x224c <__vector_49+0x42>
		tc_tce0_cca_callback();
    224a:	19 95       	eicall
	}
}
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	bf 91       	pop	r27
    2252:	af 91       	pop	r26
    2254:	9f 91       	pop	r25
    2256:	8f 91       	pop	r24
    2258:	7f 91       	pop	r23
    225a:	6f 91       	pop	r22
    225c:	5f 91       	pop	r21
    225e:	4f 91       	pop	r20
    2260:	3f 91       	pop	r19
    2262:	2f 91       	pop	r18
    2264:	0f 90       	pop	r0
    2266:	0b be       	out	0x3b, r0	; 59
    2268:	0f 90       	pop	r0
    226a:	09 be       	out	0x39, r0	; 57
    226c:	0f 90       	pop	r0
    226e:	08 be       	out	0x38, r0	; 56
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	0f 90       	pop	r0
    2276:	1f 90       	pop	r1
    2278:	18 95       	reti

0000227a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    227a:	1f 92       	push	r1
    227c:	0f 92       	push	r0
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	0f 92       	push	r0
    2282:	11 24       	eor	r1, r1
    2284:	08 b6       	in	r0, 0x38	; 56
    2286:	0f 92       	push	r0
    2288:	18 be       	out	0x38, r1	; 56
    228a:	09 b6       	in	r0, 0x39	; 57
    228c:	0f 92       	push	r0
    228e:	19 be       	out	0x39, r1	; 57
    2290:	0b b6       	in	r0, 0x3b	; 59
    2292:	0f 92       	push	r0
    2294:	1b be       	out	0x3b, r1	; 59
    2296:	2f 93       	push	r18
    2298:	3f 93       	push	r19
    229a:	4f 93       	push	r20
    229c:	5f 93       	push	r21
    229e:	6f 93       	push	r22
    22a0:	7f 93       	push	r23
    22a2:	8f 93       	push	r24
    22a4:	9f 93       	push	r25
    22a6:	af 93       	push	r26
    22a8:	bf 93       	push	r27
    22aa:	ef 93       	push	r30
    22ac:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    22ae:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tce0_ccb_callback>
    22b2:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tce0_ccb_callback+0x1>
    22b6:	30 97       	sbiw	r30, 0x00	; 0
    22b8:	09 f0       	breq	.+2      	; 0x22bc <__vector_50+0x42>
		tc_tce0_ccb_callback();
    22ba:	19 95       	eicall
	}
}
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	bf 91       	pop	r27
    22c2:	af 91       	pop	r26
    22c4:	9f 91       	pop	r25
    22c6:	8f 91       	pop	r24
    22c8:	7f 91       	pop	r23
    22ca:	6f 91       	pop	r22
    22cc:	5f 91       	pop	r21
    22ce:	4f 91       	pop	r20
    22d0:	3f 91       	pop	r19
    22d2:	2f 91       	pop	r18
    22d4:	0f 90       	pop	r0
    22d6:	0b be       	out	0x3b, r0	; 59
    22d8:	0f 90       	pop	r0
    22da:	09 be       	out	0x39, r0	; 57
    22dc:	0f 90       	pop	r0
    22de:	08 be       	out	0x38, r0	; 56
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    22ea:	1f 92       	push	r1
    22ec:	0f 92       	push	r0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	08 b6       	in	r0, 0x38	; 56
    22f6:	0f 92       	push	r0
    22f8:	18 be       	out	0x38, r1	; 56
    22fa:	09 b6       	in	r0, 0x39	; 57
    22fc:	0f 92       	push	r0
    22fe:	19 be       	out	0x39, r1	; 57
    2300:	0b b6       	in	r0, 0x3b	; 59
    2302:	0f 92       	push	r0
    2304:	1b be       	out	0x3b, r1	; 59
    2306:	2f 93       	push	r18
    2308:	3f 93       	push	r19
    230a:	4f 93       	push	r20
    230c:	5f 93       	push	r21
    230e:	6f 93       	push	r22
    2310:	7f 93       	push	r23
    2312:	8f 93       	push	r24
    2314:	9f 93       	push	r25
    2316:	af 93       	push	r26
    2318:	bf 93       	push	r27
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    231e:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tce0_ccc_callback>
    2322:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tce0_ccc_callback+0x1>
    2326:	30 97       	sbiw	r30, 0x00	; 0
    2328:	09 f0       	breq	.+2      	; 0x232c <__vector_51+0x42>
		tc_tce0_ccc_callback();
    232a:	19 95       	eicall
	}
}
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0b be       	out	0x3b, r0	; 59
    2348:	0f 90       	pop	r0
    234a:	09 be       	out	0x39, r0	; 57
    234c:	0f 90       	pop	r0
    234e:	08 be       	out	0x38, r0	; 56
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
    2364:	08 b6       	in	r0, 0x38	; 56
    2366:	0f 92       	push	r0
    2368:	18 be       	out	0x38, r1	; 56
    236a:	09 b6       	in	r0, 0x39	; 57
    236c:	0f 92       	push	r0
    236e:	19 be       	out	0x39, r1	; 57
    2370:	0b b6       	in	r0, 0x3b	; 59
    2372:	0f 92       	push	r0
    2374:	1b be       	out	0x3b, r1	; 59
    2376:	2f 93       	push	r18
    2378:	3f 93       	push	r19
    237a:	4f 93       	push	r20
    237c:	5f 93       	push	r21
    237e:	6f 93       	push	r22
    2380:	7f 93       	push	r23
    2382:	8f 93       	push	r24
    2384:	9f 93       	push	r25
    2386:	af 93       	push	r26
    2388:	bf 93       	push	r27
    238a:	ef 93       	push	r30
    238c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    238e:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tce0_ccd_callback>
    2392:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tce0_ccd_callback+0x1>
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	09 f0       	breq	.+2      	; 0x239c <__vector_52+0x42>
		tc_tce0_ccd_callback();
    239a:	19 95       	eicall
	}
}
    239c:	ff 91       	pop	r31
    239e:	ef 91       	pop	r30
    23a0:	bf 91       	pop	r27
    23a2:	af 91       	pop	r26
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	7f 91       	pop	r23
    23aa:	6f 91       	pop	r22
    23ac:	5f 91       	pop	r21
    23ae:	4f 91       	pop	r20
    23b0:	3f 91       	pop	r19
    23b2:	2f 91       	pop	r18
    23b4:	0f 90       	pop	r0
    23b6:	0b be       	out	0x3b, r0	; 59
    23b8:	0f 90       	pop	r0
    23ba:	09 be       	out	0x39, r0	; 57
    23bc:	0f 90       	pop	r0
    23be:	08 be       	out	0x38, r0	; 56
    23c0:	0f 90       	pop	r0
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	0f 90       	pop	r0
    23c6:	1f 90       	pop	r1
    23c8:	18 95       	reti

000023ca <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    23ca:	1f 92       	push	r1
    23cc:	0f 92       	push	r0
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	0f 92       	push	r0
    23d2:	11 24       	eor	r1, r1
    23d4:	08 b6       	in	r0, 0x38	; 56
    23d6:	0f 92       	push	r0
    23d8:	18 be       	out	0x38, r1	; 56
    23da:	09 b6       	in	r0, 0x39	; 57
    23dc:	0f 92       	push	r0
    23de:	19 be       	out	0x39, r1	; 57
    23e0:	0b b6       	in	r0, 0x3b	; 59
    23e2:	0f 92       	push	r0
    23e4:	1b be       	out	0x3b, r1	; 59
    23e6:	2f 93       	push	r18
    23e8:	3f 93       	push	r19
    23ea:	4f 93       	push	r20
    23ec:	5f 93       	push	r21
    23ee:	6f 93       	push	r22
    23f0:	7f 93       	push	r23
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	ef 93       	push	r30
    23fc:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    23fe:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tce1_ovf_callback>
    2402:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tce1_ovf_callback+0x1>
    2406:	30 97       	sbiw	r30, 0x00	; 0
    2408:	09 f0       	breq	.+2      	; 0x240c <__vector_53+0x42>
		tc_tce1_ovf_callback();
    240a:	19 95       	eicall
	}
}
    240c:	ff 91       	pop	r31
    240e:	ef 91       	pop	r30
    2410:	bf 91       	pop	r27
    2412:	af 91       	pop	r26
    2414:	9f 91       	pop	r25
    2416:	8f 91       	pop	r24
    2418:	7f 91       	pop	r23
    241a:	6f 91       	pop	r22
    241c:	5f 91       	pop	r21
    241e:	4f 91       	pop	r20
    2420:	3f 91       	pop	r19
    2422:	2f 91       	pop	r18
    2424:	0f 90       	pop	r0
    2426:	0b be       	out	0x3b, r0	; 59
    2428:	0f 90       	pop	r0
    242a:	09 be       	out	0x39, r0	; 57
    242c:	0f 90       	pop	r0
    242e:	08 be       	out	0x38, r0	; 56
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	08 b6       	in	r0, 0x38	; 56
    2446:	0f 92       	push	r0
    2448:	18 be       	out	0x38, r1	; 56
    244a:	09 b6       	in	r0, 0x39	; 57
    244c:	0f 92       	push	r0
    244e:	19 be       	out	0x39, r1	; 57
    2450:	0b b6       	in	r0, 0x3b	; 59
    2452:	0f 92       	push	r0
    2454:	1b be       	out	0x3b, r1	; 59
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	ef 93       	push	r30
    246c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    246e:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tce1_err_callback>
    2472:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tce1_err_callback+0x1>
    2476:	30 97       	sbiw	r30, 0x00	; 0
    2478:	09 f0       	breq	.+2      	; 0x247c <__vector_54+0x42>
		tc_tce1_err_callback();
    247a:	19 95       	eicall
	}
}
    247c:	ff 91       	pop	r31
    247e:	ef 91       	pop	r30
    2480:	bf 91       	pop	r27
    2482:	af 91       	pop	r26
    2484:	9f 91       	pop	r25
    2486:	8f 91       	pop	r24
    2488:	7f 91       	pop	r23
    248a:	6f 91       	pop	r22
    248c:	5f 91       	pop	r21
    248e:	4f 91       	pop	r20
    2490:	3f 91       	pop	r19
    2492:	2f 91       	pop	r18
    2494:	0f 90       	pop	r0
    2496:	0b be       	out	0x3b, r0	; 59
    2498:	0f 90       	pop	r0
    249a:	09 be       	out	0x39, r0	; 57
    249c:	0f 90       	pop	r0
    249e:	08 be       	out	0x38, r0	; 56
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	0f 90       	pop	r0
    24a6:	1f 90       	pop	r1
    24a8:	18 95       	reti

000024aa <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    24aa:	1f 92       	push	r1
    24ac:	0f 92       	push	r0
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	0f 92       	push	r0
    24b2:	11 24       	eor	r1, r1
    24b4:	08 b6       	in	r0, 0x38	; 56
    24b6:	0f 92       	push	r0
    24b8:	18 be       	out	0x38, r1	; 56
    24ba:	09 b6       	in	r0, 0x39	; 57
    24bc:	0f 92       	push	r0
    24be:	19 be       	out	0x39, r1	; 57
    24c0:	0b b6       	in	r0, 0x3b	; 59
    24c2:	0f 92       	push	r0
    24c4:	1b be       	out	0x3b, r1	; 59
    24c6:	2f 93       	push	r18
    24c8:	3f 93       	push	r19
    24ca:	4f 93       	push	r20
    24cc:	5f 93       	push	r21
    24ce:	6f 93       	push	r22
    24d0:	7f 93       	push	r23
    24d2:	8f 93       	push	r24
    24d4:	9f 93       	push	r25
    24d6:	af 93       	push	r26
    24d8:	bf 93       	push	r27
    24da:	ef 93       	push	r30
    24dc:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    24de:	e0 91 2a 21 	lds	r30, 0x212A	; 0x80212a <tc_tce1_cca_callback>
    24e2:	f0 91 2b 21 	lds	r31, 0x212B	; 0x80212b <tc_tce1_cca_callback+0x1>
    24e6:	30 97       	sbiw	r30, 0x00	; 0
    24e8:	09 f0       	breq	.+2      	; 0x24ec <__vector_55+0x42>
		tc_tce1_cca_callback();
    24ea:	19 95       	eicall
	}
}
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	7f 91       	pop	r23
    24fa:	6f 91       	pop	r22
    24fc:	5f 91       	pop	r21
    24fe:	4f 91       	pop	r20
    2500:	3f 91       	pop	r19
    2502:	2f 91       	pop	r18
    2504:	0f 90       	pop	r0
    2506:	0b be       	out	0x3b, r0	; 59
    2508:	0f 90       	pop	r0
    250a:	09 be       	out	0x39, r0	; 57
    250c:	0f 90       	pop	r0
    250e:	08 be       	out	0x38, r0	; 56
    2510:	0f 90       	pop	r0
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	0f 90       	pop	r0
    2516:	1f 90       	pop	r1
    2518:	18 95       	reti

0000251a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    251a:	1f 92       	push	r1
    251c:	0f 92       	push	r0
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	0f 92       	push	r0
    2522:	11 24       	eor	r1, r1
    2524:	08 b6       	in	r0, 0x38	; 56
    2526:	0f 92       	push	r0
    2528:	18 be       	out	0x38, r1	; 56
    252a:	09 b6       	in	r0, 0x39	; 57
    252c:	0f 92       	push	r0
    252e:	19 be       	out	0x39, r1	; 57
    2530:	0b b6       	in	r0, 0x3b	; 59
    2532:	0f 92       	push	r0
    2534:	1b be       	out	0x3b, r1	; 59
    2536:	2f 93       	push	r18
    2538:	3f 93       	push	r19
    253a:	4f 93       	push	r20
    253c:	5f 93       	push	r21
    253e:	6f 93       	push	r22
    2540:	7f 93       	push	r23
    2542:	8f 93       	push	r24
    2544:	9f 93       	push	r25
    2546:	af 93       	push	r26
    2548:	bf 93       	push	r27
    254a:	ef 93       	push	r30
    254c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    254e:	e0 91 28 21 	lds	r30, 0x2128	; 0x802128 <tc_tce1_ccb_callback>
    2552:	f0 91 29 21 	lds	r31, 0x2129	; 0x802129 <tc_tce1_ccb_callback+0x1>
    2556:	30 97       	sbiw	r30, 0x00	; 0
    2558:	09 f0       	breq	.+2      	; 0x255c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    255a:	19 95       	eicall
	}
}
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0b be       	out	0x3b, r0	; 59
    2578:	0f 90       	pop	r0
    257a:	09 be       	out	0x39, r0	; 57
    257c:	0f 90       	pop	r0
    257e:	08 be       	out	0x38, r0	; 56
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	0f 90       	pop	r0
    2586:	1f 90       	pop	r1
    2588:	18 95       	reti

0000258a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    258a:	1f 92       	push	r1
    258c:	0f 92       	push	r0
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	0f 92       	push	r0
    2592:	11 24       	eor	r1, r1
    2594:	08 b6       	in	r0, 0x38	; 56
    2596:	0f 92       	push	r0
    2598:	18 be       	out	0x38, r1	; 56
    259a:	09 b6       	in	r0, 0x39	; 57
    259c:	0f 92       	push	r0
    259e:	19 be       	out	0x39, r1	; 57
    25a0:	0b b6       	in	r0, 0x3b	; 59
    25a2:	0f 92       	push	r0
    25a4:	1b be       	out	0x3b, r1	; 59
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    25be:	e0 91 26 21 	lds	r30, 0x2126	; 0x802126 <tc_tcf0_ovf_callback>
    25c2:	f0 91 27 21 	lds	r31, 0x2127	; 0x802127 <tc_tcf0_ovf_callback+0x1>
    25c6:	30 97       	sbiw	r30, 0x00	; 0
    25c8:	09 f0       	breq	.+2      	; 0x25cc <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    25ca:	19 95       	eicall
	}
}
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0b be       	out	0x3b, r0	; 59
    25e8:	0f 90       	pop	r0
    25ea:	09 be       	out	0x39, r0	; 57
    25ec:	0f 90       	pop	r0
    25ee:	08 be       	out	0x38, r0	; 56
    25f0:	0f 90       	pop	r0
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	08 b6       	in	r0, 0x38	; 56
    2606:	0f 92       	push	r0
    2608:	18 be       	out	0x38, r1	; 56
    260a:	09 b6       	in	r0, 0x39	; 57
    260c:	0f 92       	push	r0
    260e:	19 be       	out	0x39, r1	; 57
    2610:	0b b6       	in	r0, 0x3b	; 59
    2612:	0f 92       	push	r0
    2614:	1b be       	out	0x3b, r1	; 59
    2616:	2f 93       	push	r18
    2618:	3f 93       	push	r19
    261a:	4f 93       	push	r20
    261c:	5f 93       	push	r21
    261e:	6f 93       	push	r22
    2620:	7f 93       	push	r23
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	af 93       	push	r26
    2628:	bf 93       	push	r27
    262a:	ef 93       	push	r30
    262c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    262e:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <tc_tcf0_err_callback>
    2632:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <tc_tcf0_err_callback+0x1>
    2636:	30 97       	sbiw	r30, 0x00	; 0
    2638:	09 f0       	breq	.+2      	; 0x263c <__vector_109+0x42>
		tc_tcf0_err_callback();
    263a:	19 95       	eicall
	}
}
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0b be       	out	0x3b, r0	; 59
    2658:	0f 90       	pop	r0
    265a:	09 be       	out	0x39, r0	; 57
    265c:	0f 90       	pop	r0
    265e:	08 be       	out	0x38, r0	; 56
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    266a:	1f 92       	push	r1
    266c:	0f 92       	push	r0
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	08 b6       	in	r0, 0x38	; 56
    2676:	0f 92       	push	r0
    2678:	18 be       	out	0x38, r1	; 56
    267a:	09 b6       	in	r0, 0x39	; 57
    267c:	0f 92       	push	r0
    267e:	19 be       	out	0x39, r1	; 57
    2680:	0b b6       	in	r0, 0x3b	; 59
    2682:	0f 92       	push	r0
    2684:	1b be       	out	0x3b, r1	; 59
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    269e:	e0 91 22 21 	lds	r30, 0x2122	; 0x802122 <tc_tcf0_cca_callback>
    26a2:	f0 91 23 21 	lds	r31, 0x2123	; 0x802123 <tc_tcf0_cca_callback+0x1>
    26a6:	30 97       	sbiw	r30, 0x00	; 0
    26a8:	09 f0       	breq	.+2      	; 0x26ac <__vector_110+0x42>
		tc_tcf0_cca_callback();
    26aa:	19 95       	eicall
	}
}
    26ac:	ff 91       	pop	r31
    26ae:	ef 91       	pop	r30
    26b0:	bf 91       	pop	r27
    26b2:	af 91       	pop	r26
    26b4:	9f 91       	pop	r25
    26b6:	8f 91       	pop	r24
    26b8:	7f 91       	pop	r23
    26ba:	6f 91       	pop	r22
    26bc:	5f 91       	pop	r21
    26be:	4f 91       	pop	r20
    26c0:	3f 91       	pop	r19
    26c2:	2f 91       	pop	r18
    26c4:	0f 90       	pop	r0
    26c6:	0b be       	out	0x3b, r0	; 59
    26c8:	0f 90       	pop	r0
    26ca:	09 be       	out	0x39, r0	; 57
    26cc:	0f 90       	pop	r0
    26ce:	08 be       	out	0x38, r0	; 56
    26d0:	0f 90       	pop	r0
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	0f 90       	pop	r0
    26d6:	1f 90       	pop	r1
    26d8:	18 95       	reti

000026da <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    26da:	1f 92       	push	r1
    26dc:	0f 92       	push	r0
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	08 b6       	in	r0, 0x38	; 56
    26e6:	0f 92       	push	r0
    26e8:	18 be       	out	0x38, r1	; 56
    26ea:	09 b6       	in	r0, 0x39	; 57
    26ec:	0f 92       	push	r0
    26ee:	19 be       	out	0x39, r1	; 57
    26f0:	0b b6       	in	r0, 0x3b	; 59
    26f2:	0f 92       	push	r0
    26f4:	1b be       	out	0x3b, r1	; 59
    26f6:	2f 93       	push	r18
    26f8:	3f 93       	push	r19
    26fa:	4f 93       	push	r20
    26fc:	5f 93       	push	r21
    26fe:	6f 93       	push	r22
    2700:	7f 93       	push	r23
    2702:	8f 93       	push	r24
    2704:	9f 93       	push	r25
    2706:	af 93       	push	r26
    2708:	bf 93       	push	r27
    270a:	ef 93       	push	r30
    270c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    270e:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <tc_tcf0_ccb_callback>
    2712:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <tc_tcf0_ccb_callback+0x1>
    2716:	30 97       	sbiw	r30, 0x00	; 0
    2718:	09 f0       	breq	.+2      	; 0x271c <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    271a:	19 95       	eicall
	}
}
    271c:	ff 91       	pop	r31
    271e:	ef 91       	pop	r30
    2720:	bf 91       	pop	r27
    2722:	af 91       	pop	r26
    2724:	9f 91       	pop	r25
    2726:	8f 91       	pop	r24
    2728:	7f 91       	pop	r23
    272a:	6f 91       	pop	r22
    272c:	5f 91       	pop	r21
    272e:	4f 91       	pop	r20
    2730:	3f 91       	pop	r19
    2732:	2f 91       	pop	r18
    2734:	0f 90       	pop	r0
    2736:	0b be       	out	0x3b, r0	; 59
    2738:	0f 90       	pop	r0
    273a:	09 be       	out	0x39, r0	; 57
    273c:	0f 90       	pop	r0
    273e:	08 be       	out	0x38, r0	; 56
    2740:	0f 90       	pop	r0
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	0f 90       	pop	r0
    2746:	1f 90       	pop	r1
    2748:	18 95       	reti

0000274a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    274a:	1f 92       	push	r1
    274c:	0f 92       	push	r0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	0f 92       	push	r0
    2752:	11 24       	eor	r1, r1
    2754:	08 b6       	in	r0, 0x38	; 56
    2756:	0f 92       	push	r0
    2758:	18 be       	out	0x38, r1	; 56
    275a:	09 b6       	in	r0, 0x39	; 57
    275c:	0f 92       	push	r0
    275e:	19 be       	out	0x39, r1	; 57
    2760:	0b b6       	in	r0, 0x3b	; 59
    2762:	0f 92       	push	r0
    2764:	1b be       	out	0x3b, r1	; 59
    2766:	2f 93       	push	r18
    2768:	3f 93       	push	r19
    276a:	4f 93       	push	r20
    276c:	5f 93       	push	r21
    276e:	6f 93       	push	r22
    2770:	7f 93       	push	r23
    2772:	8f 93       	push	r24
    2774:	9f 93       	push	r25
    2776:	af 93       	push	r26
    2778:	bf 93       	push	r27
    277a:	ef 93       	push	r30
    277c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    277e:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <tc_tcf0_ccc_callback>
    2782:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <tc_tcf0_ccc_callback+0x1>
    2786:	30 97       	sbiw	r30, 0x00	; 0
    2788:	09 f0       	breq	.+2      	; 0x278c <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    278a:	19 95       	eicall
	}
}
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	7f 91       	pop	r23
    279a:	6f 91       	pop	r22
    279c:	5f 91       	pop	r21
    279e:	4f 91       	pop	r20
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0b be       	out	0x3b, r0	; 59
    27a8:	0f 90       	pop	r0
    27aa:	09 be       	out	0x39, r0	; 57
    27ac:	0f 90       	pop	r0
    27ae:	08 be       	out	0x38, r0	; 56
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

000027ba <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	08 b6       	in	r0, 0x38	; 56
    27c6:	0f 92       	push	r0
    27c8:	18 be       	out	0x38, r1	; 56
    27ca:	09 b6       	in	r0, 0x39	; 57
    27cc:	0f 92       	push	r0
    27ce:	19 be       	out	0x39, r1	; 57
    27d0:	0b b6       	in	r0, 0x3b	; 59
    27d2:	0f 92       	push	r0
    27d4:	1b be       	out	0x3b, r1	; 59
    27d6:	2f 93       	push	r18
    27d8:	3f 93       	push	r19
    27da:	4f 93       	push	r20
    27dc:	5f 93       	push	r21
    27de:	6f 93       	push	r22
    27e0:	7f 93       	push	r23
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
    27e6:	af 93       	push	r26
    27e8:	bf 93       	push	r27
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    27ee:	e0 91 1c 21 	lds	r30, 0x211C	; 0x80211c <tc_tcf0_ccd_callback>
    27f2:	f0 91 1d 21 	lds	r31, 0x211D	; 0x80211d <tc_tcf0_ccd_callback+0x1>
    27f6:	30 97       	sbiw	r30, 0x00	; 0
    27f8:	09 f0       	breq	.+2      	; 0x27fc <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    27fa:	19 95       	eicall
	}
}
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	7f 91       	pop	r23
    280a:	6f 91       	pop	r22
    280c:	5f 91       	pop	r21
    280e:	4f 91       	pop	r20
    2810:	3f 91       	pop	r19
    2812:	2f 91       	pop	r18
    2814:	0f 90       	pop	r0
    2816:	0b be       	out	0x3b, r0	; 59
    2818:	0f 90       	pop	r0
    281a:	09 be       	out	0x39, r0	; 57
    281c:	0f 90       	pop	r0
    281e:	08 be       	out	0x38, r0	; 56
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	0f 90       	pop	r0
    2826:	1f 90       	pop	r1
    2828:	18 95       	reti

0000282a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	08 b6       	in	r0, 0x38	; 56
    2836:	0f 92       	push	r0
    2838:	18 be       	out	0x38, r1	; 56
    283a:	09 b6       	in	r0, 0x39	; 57
    283c:	0f 92       	push	r0
    283e:	19 be       	out	0x39, r1	; 57
    2840:	0b b6       	in	r0, 0x3b	; 59
    2842:	0f 92       	push	r0
    2844:	1b be       	out	0x3b, r1	; 59
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    285e:	e0 91 1a 21 	lds	r30, 0x211A	; 0x80211a <tc_tcf1_ovf_callback>
    2862:	f0 91 1b 21 	lds	r31, 0x211B	; 0x80211b <tc_tcf1_ovf_callback+0x1>
    2866:	30 97       	sbiw	r30, 0x00	; 0
    2868:	09 f0       	breq	.+2      	; 0x286c <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    286a:	19 95       	eicall
	}
}
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	7f 91       	pop	r23
    287a:	6f 91       	pop	r22
    287c:	5f 91       	pop	r21
    287e:	4f 91       	pop	r20
    2880:	3f 91       	pop	r19
    2882:	2f 91       	pop	r18
    2884:	0f 90       	pop	r0
    2886:	0b be       	out	0x3b, r0	; 59
    2888:	0f 90       	pop	r0
    288a:	09 be       	out	0x39, r0	; 57
    288c:	0f 90       	pop	r0
    288e:	08 be       	out	0x38, r0	; 56
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	0f 90       	pop	r0
    2896:	1f 90       	pop	r1
    2898:	18 95       	reti

0000289a <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	11 24       	eor	r1, r1
    28a4:	08 b6       	in	r0, 0x38	; 56
    28a6:	0f 92       	push	r0
    28a8:	18 be       	out	0x38, r1	; 56
    28aa:	09 b6       	in	r0, 0x39	; 57
    28ac:	0f 92       	push	r0
    28ae:	19 be       	out	0x39, r1	; 57
    28b0:	0b b6       	in	r0, 0x3b	; 59
    28b2:	0f 92       	push	r0
    28b4:	1b be       	out	0x3b, r1	; 59
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	4f 93       	push	r20
    28bc:	5f 93       	push	r21
    28be:	6f 93       	push	r22
    28c0:	7f 93       	push	r23
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    28ce:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <tc_tcf1_err_callback>
    28d2:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <tc_tcf1_err_callback+0x1>
    28d6:	30 97       	sbiw	r30, 0x00	; 0
    28d8:	09 f0       	breq	.+2      	; 0x28dc <__vector_115+0x42>
		tc_tcf1_err_callback();
    28da:	19 95       	eicall
	}
}
    28dc:	ff 91       	pop	r31
    28de:	ef 91       	pop	r30
    28e0:	bf 91       	pop	r27
    28e2:	af 91       	pop	r26
    28e4:	9f 91       	pop	r25
    28e6:	8f 91       	pop	r24
    28e8:	7f 91       	pop	r23
    28ea:	6f 91       	pop	r22
    28ec:	5f 91       	pop	r21
    28ee:	4f 91       	pop	r20
    28f0:	3f 91       	pop	r19
    28f2:	2f 91       	pop	r18
    28f4:	0f 90       	pop	r0
    28f6:	0b be       	out	0x3b, r0	; 59
    28f8:	0f 90       	pop	r0
    28fa:	09 be       	out	0x39, r0	; 57
    28fc:	0f 90       	pop	r0
    28fe:	08 be       	out	0x38, r0	; 56
    2900:	0f 90       	pop	r0
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	0f 90       	pop	r0
    2906:	1f 90       	pop	r1
    2908:	18 95       	reti

0000290a <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    290a:	1f 92       	push	r1
    290c:	0f 92       	push	r0
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	0f 92       	push	r0
    2912:	11 24       	eor	r1, r1
    2914:	08 b6       	in	r0, 0x38	; 56
    2916:	0f 92       	push	r0
    2918:	18 be       	out	0x38, r1	; 56
    291a:	09 b6       	in	r0, 0x39	; 57
    291c:	0f 92       	push	r0
    291e:	19 be       	out	0x39, r1	; 57
    2920:	0b b6       	in	r0, 0x3b	; 59
    2922:	0f 92       	push	r0
    2924:	1b be       	out	0x3b, r1	; 59
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	7f 93       	push	r23
    2932:	8f 93       	push	r24
    2934:	9f 93       	push	r25
    2936:	af 93       	push	r26
    2938:	bf 93       	push	r27
    293a:	ef 93       	push	r30
    293c:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    293e:	e0 91 16 21 	lds	r30, 0x2116	; 0x802116 <tc_tcf1_cca_callback>
    2942:	f0 91 17 21 	lds	r31, 0x2117	; 0x802117 <tc_tcf1_cca_callback+0x1>
    2946:	30 97       	sbiw	r30, 0x00	; 0
    2948:	09 f0       	breq	.+2      	; 0x294c <__vector_116+0x42>
		tc_tcf1_cca_callback();
    294a:	19 95       	eicall
	}
}
    294c:	ff 91       	pop	r31
    294e:	ef 91       	pop	r30
    2950:	bf 91       	pop	r27
    2952:	af 91       	pop	r26
    2954:	9f 91       	pop	r25
    2956:	8f 91       	pop	r24
    2958:	7f 91       	pop	r23
    295a:	6f 91       	pop	r22
    295c:	5f 91       	pop	r21
    295e:	4f 91       	pop	r20
    2960:	3f 91       	pop	r19
    2962:	2f 91       	pop	r18
    2964:	0f 90       	pop	r0
    2966:	0b be       	out	0x3b, r0	; 59
    2968:	0f 90       	pop	r0
    296a:	09 be       	out	0x39, r0	; 57
    296c:	0f 90       	pop	r0
    296e:	08 be       	out	0x38, r0	; 56
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

0000297a <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    297a:	1f 92       	push	r1
    297c:	0f 92       	push	r0
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	0f 92       	push	r0
    2982:	11 24       	eor	r1, r1
    2984:	08 b6       	in	r0, 0x38	; 56
    2986:	0f 92       	push	r0
    2988:	18 be       	out	0x38, r1	; 56
    298a:	09 b6       	in	r0, 0x39	; 57
    298c:	0f 92       	push	r0
    298e:	19 be       	out	0x39, r1	; 57
    2990:	0b b6       	in	r0, 0x3b	; 59
    2992:	0f 92       	push	r0
    2994:	1b be       	out	0x3b, r1	; 59
    2996:	2f 93       	push	r18
    2998:	3f 93       	push	r19
    299a:	4f 93       	push	r20
    299c:	5f 93       	push	r21
    299e:	6f 93       	push	r22
    29a0:	7f 93       	push	r23
    29a2:	8f 93       	push	r24
    29a4:	9f 93       	push	r25
    29a6:	af 93       	push	r26
    29a8:	bf 93       	push	r27
    29aa:	ef 93       	push	r30
    29ac:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    29ae:	e0 91 14 21 	lds	r30, 0x2114	; 0x802114 <tc_tcf1_ccb_callback>
    29b2:	f0 91 15 21 	lds	r31, 0x2115	; 0x802115 <tc_tcf1_ccb_callback+0x1>
    29b6:	30 97       	sbiw	r30, 0x00	; 0
    29b8:	09 f0       	breq	.+2      	; 0x29bc <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    29ba:	19 95       	eicall
	}
}
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0b be       	out	0x3b, r0	; 59
    29d8:	0f 90       	pop	r0
    29da:	09 be       	out	0x39, r0	; 57
    29dc:	0f 90       	pop	r0
    29de:	08 be       	out	0x38, r0	; 56
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	0f 90       	pop	r0
    29e6:	1f 90       	pop	r1
    29e8:	18 95       	reti

000029ea <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    29ee:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <transfer>
    29f2:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <transfer+0x1>
    29f6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    29f8:	83 ff       	sbrs	r24, 3
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    29fc:	88 60       	ori	r24, 0x08	; 8
    29fe:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    2a04:	86 ef       	ldi	r24, 0xF6	; 246
    2a06:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <transfer+0xa>
    2a0a:	83 c0       	rjmp	.+262    	; 0x2b12 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    2a0c:	98 2f       	mov	r25, r24
    2a0e:	94 71       	andi	r25, 0x14	; 20
    2a10:	31 f0       	breq	.+12     	; 0x2a1e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <transfer+0xa>
    2a1c:	7a c0       	rjmp	.+244    	; 0x2b12 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    2a1e:	86 ff       	sbrs	r24, 6
    2a20:	43 c0       	rjmp	.+134    	; 0x2aa8 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    2a22:	c4 e6       	ldi	r28, 0x64	; 100
    2a24:	d1 e2       	ldi	r29, 0x21	; 33
    2a26:	aa 81       	ldd	r26, Y+2	; 0x02
    2a28:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2e:	14 96       	adiw	r26, 0x04	; 4
    2a30:	2d 91       	ld	r18, X+
    2a32:	3c 91       	ld	r19, X
    2a34:	15 97       	sbiw	r26, 0x05	; 5
    2a36:	82 17       	cp	r24, r18
    2a38:	93 07       	cpc	r25, r19
    2a3a:	6c f4       	brge	.+26     	; 0x2a56 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    2a3c:	9c 01       	movw	r18, r24
    2a3e:	2f 5f       	subi	r18, 0xFF	; 255
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	20 93 68 21 	sts	0x2168, r18	; 0x802168 <transfer+0x4>
    2a46:	30 93 69 21 	sts	0x2169, r19	; 0x802169 <transfer+0x5>
    2a4a:	a8 0f       	add	r26, r24
    2a4c:	b9 1f       	adc	r27, r25
    2a4e:	11 96       	adiw	r26, 0x01	; 1
    2a50:	8c 91       	ld	r24, X
    2a52:	87 83       	std	Z+7, r24	; 0x07
    2a54:	5e c0       	rjmp	.+188    	; 0x2b12 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    2a56:	80 91 6a 21 	lds	r24, 0x216A	; 0x80216a <transfer+0x6>
    2a5a:	90 91 6b 21 	lds	r25, 0x216B	; 0x80216b <transfer+0x7>
    2a5e:	18 96       	adiw	r26, 0x08	; 8
    2a60:	2d 91       	ld	r18, X+
    2a62:	3c 91       	ld	r19, X
    2a64:	19 97       	sbiw	r26, 0x09	; 9
    2a66:	82 17       	cp	r24, r18
    2a68:	93 07       	cpc	r25, r19
    2a6a:	c8 f4       	brcc	.+50     	; 0x2a9e <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    2a6c:	20 91 6c 21 	lds	r18, 0x216C	; 0x80216c <transfer+0x8>
    2a70:	22 23       	and	r18, r18
    2a72:	21 f0       	breq	.+8      	; 0x2a7c <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    2a74:	86 81       	ldd	r24, Z+6	; 0x06
    2a76:	81 60       	ori	r24, 0x01	; 1
    2a78:	86 83       	std	Z+6, r24	; 0x06
    2a7a:	4b c0       	rjmp	.+150    	; 0x2b12 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    2a7c:	16 96       	adiw	r26, 0x06	; 6
    2a7e:	2d 91       	ld	r18, X+
    2a80:	3c 91       	ld	r19, X
    2a82:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    2a84:	ac 01       	movw	r20, r24
    2a86:	4f 5f       	subi	r20, 0xFF	; 255
    2a88:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8a:	40 93 6a 21 	sts	0x216A, r20	; 0x80216a <transfer+0x6>
    2a8e:	50 93 6b 21 	sts	0x216B, r21	; 0x80216b <transfer+0x7>
    2a92:	d9 01       	movw	r26, r18
    2a94:	a8 0f       	add	r26, r24
    2a96:	b9 1f       	adc	r27, r25
    2a98:	8c 91       	ld	r24, X
    2a9a:	87 83       	std	Z+7, r24	; 0x07
    2a9c:	3a c0       	rjmp	.+116    	; 0x2b12 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    2aa2:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <transfer+0xa>
    2aa6:	35 c0       	rjmp	.+106    	; 0x2b12 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    2aa8:	88 23       	and	r24, r24
    2aaa:	84 f5       	brge	.+96     	; 0x2b0c <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    2aac:	a4 e6       	ldi	r26, 0x64	; 100
    2aae:	b1 e2       	ldi	r27, 0x21	; 33
    2ab0:	12 96       	adiw	r26, 0x02	; 2
    2ab2:	cd 91       	ld	r28, X+
    2ab4:	dc 91       	ld	r29, X
    2ab6:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    2ab8:	16 96       	adiw	r26, 0x06	; 6
    2aba:	8d 91       	ld	r24, X+
    2abc:	9c 91       	ld	r25, X
    2abe:	17 97       	sbiw	r26, 0x07	; 7
    2ac0:	28 85       	ldd	r18, Y+8	; 0x08
    2ac2:	39 85       	ldd	r19, Y+9	; 0x09
    2ac4:	82 17       	cp	r24, r18
    2ac6:	93 07       	cpc	r25, r19
    2ac8:	d8 f4       	brcc	.+54     	; 0x2b00 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    2aca:	6e 81       	ldd	r22, Y+6	; 0x06
    2acc:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    2ace:	9c 01       	movw	r18, r24
    2ad0:	2f 5f       	subi	r18, 0xFF	; 255
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	20 93 6a 21 	sts	0x216A, r18	; 0x80216a <transfer+0x6>
    2ad8:	30 93 6b 21 	sts	0x216B, r19	; 0x80216b <transfer+0x7>
    2adc:	47 81       	ldd	r20, Z+7	; 0x07
    2ade:	db 01       	movw	r26, r22
    2ae0:	a8 0f       	add	r26, r24
    2ae2:	b9 1f       	adc	r27, r25
    2ae4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    2ae6:	88 85       	ldd	r24, Y+8	; 0x08
    2ae8:	99 85       	ldd	r25, Y+9	; 0x09
    2aea:	28 17       	cp	r18, r24
    2aec:	39 07       	cpc	r19, r25
    2aee:	18 f4       	brcc	.+6      	; 0x2af6 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2af0:	82 e0       	ldi	r24, 0x02	; 2
    2af2:	83 83       	std	Z+3, r24	; 0x03
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2af6:	87 e0       	ldi	r24, 0x07	; 7
    2af8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    2afa:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <transfer+0xa>
    2afe:	09 c0       	rjmp	.+18     	; 0x2b12 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    2b04:	89 ef       	ldi	r24, 0xF9	; 249
    2b06:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <transfer+0xa>
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    2b0c:	8b ef       	ldi	r24, 0xFB	; 251
    2b0e:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <transfer+0xa>
	}
}
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	08 95       	ret

00002b18 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	08 b6       	in	r0, 0x38	; 56
    2b24:	0f 92       	push	r0
    2b26:	18 be       	out	0x38, r1	; 56
    2b28:	09 b6       	in	r0, 0x39	; 57
    2b2a:	0f 92       	push	r0
    2b2c:	19 be       	out	0x39, r1	; 57
    2b2e:	0b b6       	in	r0, 0x3b	; 59
    2b30:	0f 92       	push	r0
    2b32:	1b be       	out	0x3b, r1	; 59
    2b34:	2f 93       	push	r18
    2b36:	3f 93       	push	r19
    2b38:	4f 93       	push	r20
    2b3a:	5f 93       	push	r21
    2b3c:	6f 93       	push	r22
    2b3e:	7f 93       	push	r23
    2b40:	8f 93       	push	r24
    2b42:	9f 93       	push	r25
    2b44:	af 93       	push	r26
    2b46:	bf 93       	push	r27
    2b48:	ef 93       	push	r30
    2b4a:	ff 93       	push	r31
    2b4c:	4e df       	rcall	.-356    	; 0x29ea <twim_interrupt_handler>
    2b4e:	ff 91       	pop	r31
    2b50:	ef 91       	pop	r30
    2b52:	bf 91       	pop	r27
    2b54:	af 91       	pop	r26
    2b56:	9f 91       	pop	r25
    2b58:	8f 91       	pop	r24
    2b5a:	7f 91       	pop	r23
    2b5c:	6f 91       	pop	r22
    2b5e:	5f 91       	pop	r21
    2b60:	4f 91       	pop	r20
    2b62:	3f 91       	pop	r19
    2b64:	2f 91       	pop	r18
    2b66:	0f 90       	pop	r0
    2b68:	0b be       	out	0x3b, r0	; 59
    2b6a:	0f 90       	pop	r0
    2b6c:	09 be       	out	0x39, r0	; 57
    2b6e:	0f 90       	pop	r0
    2b70:	08 be       	out	0x38, r0	; 56
    2b72:	0f 90       	pop	r0
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	0f 90       	pop	r0
    2b78:	1f 90       	pop	r1
    2b7a:	18 95       	reti

00002b7c <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    2b7c:	1f 92       	push	r1
    2b7e:	0f 92       	push	r0
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	0f 92       	push	r0
    2b84:	11 24       	eor	r1, r1
    2b86:	08 b6       	in	r0, 0x38	; 56
    2b88:	0f 92       	push	r0
    2b8a:	18 be       	out	0x38, r1	; 56
    2b8c:	09 b6       	in	r0, 0x39	; 57
    2b8e:	0f 92       	push	r0
    2b90:	19 be       	out	0x39, r1	; 57
    2b92:	0b b6       	in	r0, 0x3b	; 59
    2b94:	0f 92       	push	r0
    2b96:	1b be       	out	0x3b, r1	; 59
    2b98:	2f 93       	push	r18
    2b9a:	3f 93       	push	r19
    2b9c:	4f 93       	push	r20
    2b9e:	5f 93       	push	r21
    2ba0:	6f 93       	push	r22
    2ba2:	7f 93       	push	r23
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
    2bac:	ef 93       	push	r30
    2bae:	ff 93       	push	r31
    2bb0:	1c df       	rcall	.-456    	; 0x29ea <twim_interrupt_handler>
    2bb2:	ff 91       	pop	r31
    2bb4:	ef 91       	pop	r30
    2bb6:	bf 91       	pop	r27
    2bb8:	af 91       	pop	r26
    2bba:	9f 91       	pop	r25
    2bbc:	8f 91       	pop	r24
    2bbe:	7f 91       	pop	r23
    2bc0:	6f 91       	pop	r22
    2bc2:	5f 91       	pop	r21
    2bc4:	4f 91       	pop	r20
    2bc6:	3f 91       	pop	r19
    2bc8:	2f 91       	pop	r18
    2bca:	0f 90       	pop	r0
    2bcc:	0b be       	out	0x3b, r0	; 59
    2bce:	0f 90       	pop	r0
    2bd0:	09 be       	out	0x39, r0	; 57
    2bd2:	0f 90       	pop	r0
    2bd4:	08 be       	out	0x38, r0	; 56
    2bd6:	0f 90       	pop	r0
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	0f 90       	pop	r0
    2bdc:	1f 90       	pop	r1
    2bde:	18 95       	reti

00002be0 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    2be0:	1f 92       	push	r1
    2be2:	0f 92       	push	r0
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	0f 92       	push	r0
    2be8:	11 24       	eor	r1, r1
    2bea:	08 b6       	in	r0, 0x38	; 56
    2bec:	0f 92       	push	r0
    2bee:	18 be       	out	0x38, r1	; 56
    2bf0:	09 b6       	in	r0, 0x39	; 57
    2bf2:	0f 92       	push	r0
    2bf4:	19 be       	out	0x39, r1	; 57
    2bf6:	0b b6       	in	r0, 0x3b	; 59
    2bf8:	0f 92       	push	r0
    2bfa:	1b be       	out	0x3b, r1	; 59
    2bfc:	2f 93       	push	r18
    2bfe:	3f 93       	push	r19
    2c00:	4f 93       	push	r20
    2c02:	5f 93       	push	r21
    2c04:	6f 93       	push	r22
    2c06:	7f 93       	push	r23
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	ef 93       	push	r30
    2c12:	ff 93       	push	r31
    2c14:	ea de       	rcall	.-556    	; 0x29ea <twim_interrupt_handler>
    2c16:	ff 91       	pop	r31
    2c18:	ef 91       	pop	r30
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	0f 90       	pop	r0
    2c30:	0b be       	out	0x3b, r0	; 59
    2c32:	0f 90       	pop	r0
    2c34:	09 be       	out	0x39, r0	; 57
    2c36:	0f 90       	pop	r0
    2c38:	08 be       	out	0x38, r0	; 56
    2c3a:	0f 90       	pop	r0
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	0f 90       	pop	r0
    2c40:	1f 90       	pop	r1
    2c42:	18 95       	reti

00002c44 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    2c44:	1f 92       	push	r1
    2c46:	0f 92       	push	r0
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	0f 92       	push	r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	08 b6       	in	r0, 0x38	; 56
    2c50:	0f 92       	push	r0
    2c52:	18 be       	out	0x38, r1	; 56
    2c54:	09 b6       	in	r0, 0x39	; 57
    2c56:	0f 92       	push	r0
    2c58:	19 be       	out	0x39, r1	; 57
    2c5a:	0b b6       	in	r0, 0x3b	; 59
    2c5c:	0f 92       	push	r0
    2c5e:	1b be       	out	0x3b, r1	; 59
    2c60:	2f 93       	push	r18
    2c62:	3f 93       	push	r19
    2c64:	4f 93       	push	r20
    2c66:	5f 93       	push	r21
    2c68:	6f 93       	push	r22
    2c6a:	7f 93       	push	r23
    2c6c:	8f 93       	push	r24
    2c6e:	9f 93       	push	r25
    2c70:	af 93       	push	r26
    2c72:	bf 93       	push	r27
    2c74:	ef 93       	push	r30
    2c76:	ff 93       	push	r31
    2c78:	b8 de       	rcall	.-656    	; 0x29ea <twim_interrupt_handler>
    2c7a:	ff 91       	pop	r31
    2c7c:	ef 91       	pop	r30
    2c7e:	bf 91       	pop	r27
    2c80:	af 91       	pop	r26
    2c82:	9f 91       	pop	r25
    2c84:	8f 91       	pop	r24
    2c86:	7f 91       	pop	r23
    2c88:	6f 91       	pop	r22
    2c8a:	5f 91       	pop	r21
    2c8c:	4f 91       	pop	r20
    2c8e:	3f 91       	pop	r19
    2c90:	2f 91       	pop	r18
    2c92:	0f 90       	pop	r0
    2c94:	0b be       	out	0x3b, r0	; 59
    2c96:	0f 90       	pop	r0
    2c98:	09 be       	out	0x39, r0	; 57
    2c9a:	0f 90       	pop	r0
    2c9c:	08 be       	out	0x38, r0	; 56
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	0f 90       	pop	r0
    2ca4:	1f 90       	pop	r1
    2ca6:	18 95       	reti

00002ca8 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    2ca8:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    2caa:	db 01       	movw	r26, r22
    2cac:	14 96       	adiw	r26, 0x04	; 4
    2cae:	8c 91       	ld	r24, X
    2cb0:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2cb2:	88 eb       	ldi	r24, 0xB8	; 184
    2cb4:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    2cba:	e4 e6       	ldi	r30, 0x64	; 100
    2cbc:	f1 e2       	ldi	r31, 0x21	; 33
    2cbe:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    2cc0:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    2cc2:	e0 ea       	ldi	r30, 0xA0	; 160
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	82 60       	ori	r24, 0x02	; 2
    2cca:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    2ccc:	78 94       	sei

	return STATUS_OK;
}
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	08 95       	ret

00002cd2 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	1f 92       	push	r1
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	9c 01       	movw	r18, r24
    2cde:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    2ce0:	89 2b       	or	r24, r25
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <twi_master_transfer+0x14>
    2ce4:	51 c0       	rjmp	.+162    	; 0x2d88 <twi_master_transfer+0xb6>
    2ce6:	30 97       	sbiw	r30, 0x00	; 0
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <twi_master_transfer+0x1a>
    2cea:	50 c0       	rjmp	.+160    	; 0x2d8c <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    2cec:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    2cee:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <transfer+0x9>
    2cf2:	88 23       	and	r24, r24
    2cf4:	19 f0       	breq	.+6      	; 0x2cfc <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    2cf6:	99 23       	and	r25, r25
    2cf8:	f1 f3       	breq	.-4      	; 0x2cf6 <twi_master_transfer+0x24>
    2cfa:	4a c0       	rjmp	.+148    	; 0x2d90 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2cfc:	8f b7       	in	r24, 0x3f	; 63
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2d00:	f8 94       	cli
	return flags;
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    2d04:	a4 e6       	ldi	r26, 0x64	; 100
    2d06:	b1 e2       	ldi	r27, 0x21	; 33
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	19 96       	adiw	r26, 0x09	; 9
    2d0c:	9c 93       	st	X, r25
    2d0e:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    2d10:	90 e8       	ldi	r25, 0x80	; 128
    2d12:	1a 96       	adiw	r26, 0x0a	; 10
    2d14:	9c 93       	st	X, r25
    2d16:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d18:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    2d1a:	2d 93       	st	X+, r18
    2d1c:	3c 93       	st	X, r19
    2d1e:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    2d20:	12 96       	adiw	r26, 0x02	; 2
    2d22:	6d 93       	st	X+, r22
    2d24:	7c 93       	st	X, r23
    2d26:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    2d28:	14 96       	adiw	r26, 0x04	; 4
    2d2a:	1d 92       	st	X+, r1
    2d2c:	1c 92       	st	X, r1
    2d2e:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    2d30:	16 96       	adiw	r26, 0x06	; 6
    2d32:	1d 92       	st	X+, r1
    2d34:	1c 92       	st	X, r1
    2d36:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    2d38:	18 96       	adiw	r26, 0x08	; 8
    2d3a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    2d40:	64 81       	ldd	r22, Z+4	; 0x04
    2d42:	75 81       	ldd	r23, Z+5	; 0x05
    2d44:	67 2b       	or	r22, r23
    2d46:	11 f4       	brne	.+4      	; 0x2d4c <twi_master_transfer+0x7a>
    2d48:	41 11       	cpse	r20, r1
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	86 83       	std	Z+6, r24	; 0x06
    2d50:	03 c0       	rjmp	.+6      	; 0x2d58 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2d52:	81 60       	ori	r24, 0x01	; 1
    2d54:	f9 01       	movw	r30, r18
    2d56:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    2d58:	e4 e6       	ldi	r30, 0x64	; 100
    2d5a:	f1 e2       	ldi	r31, 0x21	; 33
    2d5c:	92 85       	ldd	r25, Z+10	; 0x0a
    2d5e:	90 38       	cpi	r25, 0x80	; 128
    2d60:	e9 f3       	breq	.-6      	; 0x2d5c <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2d62:	f9 01       	movw	r30, r18
    2d64:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2d66:	83 70       	andi	r24, 0x03	; 3
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	49 f0       	breq	.+18     	; 0x2d7e <twi_master_transfer+0xac>
    2d6c:	a4 e6       	ldi	r26, 0x64	; 100
    2d6e:	b1 e2       	ldi	r27, 0x21	; 33
    2d70:	ed 91       	ld	r30, X+
    2d72:	fc 91       	ld	r31, X
    2d74:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2d76:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2d78:	83 70       	andi	r24, 0x03	; 3
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	c9 f7       	brne	.-14     	; 0x2d70 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    2d7e:	e4 e6       	ldi	r30, 0x64	; 100
    2d80:	f1 e2       	ldi	r31, 0x21	; 33
    2d82:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    2d84:	11 86       	std	Z+9, r1	; 0x09
    2d86:	05 c0       	rjmp	.+10     	; 0x2d92 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    2d88:	88 ef       	ldi	r24, 0xF8	; 248
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <twi_master_transfer+0xc0>
    2d8c:	88 ef       	ldi	r24, 0xF8	; 248
    2d8e:	01 c0       	rjmp	.+2      	; 0x2d92 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    2d90:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    2d92:	0f 90       	pop	r0
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	08 95       	ret

00002d9a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	95 ff       	sbrs	r25, 5
    2da0:	fd cf       	rjmp	.-6      	; 0x2d9c <usart_putchar+0x2>
    2da2:	60 83       	st	Z, r22
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	08 95       	ret

00002daa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2daa:	4f 92       	push	r4
    2dac:	5f 92       	push	r5
    2dae:	6f 92       	push	r6
    2db0:	7f 92       	push	r7
    2db2:	8f 92       	push	r8
    2db4:	9f 92       	push	r9
    2db6:	af 92       	push	r10
    2db8:	bf 92       	push	r11
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	7c 01       	movw	r14, r24
    2dc6:	4a 01       	movw	r8, r20
    2dc8:	5b 01       	movw	r10, r22
    2dca:	28 01       	movw	r4, r16
    2dcc:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2dce:	fc 01       	movw	r30, r24
    2dd0:	84 81       	ldd	r24, Z+4	; 0x04
    2dd2:	82 ff       	sbrs	r24, 2
    2dd4:	16 c0       	rjmp	.+44     	; 0x2e02 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2dd6:	d9 01       	movw	r26, r18
    2dd8:	c8 01       	movw	r24, r16
    2dda:	68 94       	set
    2ddc:	12 f8       	bld	r1, 2
    2dde:	b6 95       	lsr	r27
    2de0:	a7 95       	ror	r26
    2de2:	97 95       	ror	r25
    2de4:	87 95       	ror	r24
    2de6:	16 94       	lsr	r1
    2de8:	d1 f7       	brne	.-12     	; 0x2dde <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2dea:	b9 01       	movw	r22, r18
    2dec:	a8 01       	movw	r20, r16
    2dee:	03 2e       	mov	r0, r19
    2df0:	36 e1       	ldi	r19, 0x16	; 22
    2df2:	76 95       	lsr	r23
    2df4:	67 95       	ror	r22
    2df6:	57 95       	ror	r21
    2df8:	47 95       	ror	r20
    2dfa:	3a 95       	dec	r19
    2dfc:	d1 f7       	brne	.-12     	; 0x2df2 <usart_set_baudrate+0x48>
    2dfe:	30 2d       	mov	r19, r0
    2e00:	15 c0       	rjmp	.+42     	; 0x2e2c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    2e02:	d9 01       	movw	r26, r18
    2e04:	c8 01       	movw	r24, r16
    2e06:	68 94       	set
    2e08:	13 f8       	bld	r1, 3
    2e0a:	b6 95       	lsr	r27
    2e0c:	a7 95       	ror	r26
    2e0e:	97 95       	ror	r25
    2e10:	87 95       	ror	r24
    2e12:	16 94       	lsr	r1
    2e14:	d1 f7       	brne	.-12     	; 0x2e0a <usart_set_baudrate+0x60>
		min_rate /= 2;
    2e16:	b9 01       	movw	r22, r18
    2e18:	a8 01       	movw	r20, r16
    2e1a:	03 2e       	mov	r0, r19
    2e1c:	37 e1       	ldi	r19, 0x17	; 23
    2e1e:	76 95       	lsr	r23
    2e20:	67 95       	ror	r22
    2e22:	57 95       	ror	r21
    2e24:	47 95       	ror	r20
    2e26:	3a 95       	dec	r19
    2e28:	d1 f7       	brne	.-12     	; 0x2e1e <usart_set_baudrate+0x74>
    2e2a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    2e2c:	88 15       	cp	r24, r8
    2e2e:	99 05       	cpc	r25, r9
    2e30:	aa 05       	cpc	r26, r10
    2e32:	bb 05       	cpc	r27, r11
    2e34:	08 f4       	brcc	.+2      	; 0x2e38 <usart_set_baudrate+0x8e>
    2e36:	a4 c0       	rjmp	.+328    	; 0x2f80 <usart_set_baudrate+0x1d6>
    2e38:	84 16       	cp	r8, r20
    2e3a:	95 06       	cpc	r9, r21
    2e3c:	a6 06       	cpc	r10, r22
    2e3e:	b7 06       	cpc	r11, r23
    2e40:	08 f4       	brcc	.+2      	; 0x2e44 <usart_set_baudrate+0x9a>
    2e42:	a0 c0       	rjmp	.+320    	; 0x2f84 <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2e44:	f7 01       	movw	r30, r14
    2e46:	84 81       	ldd	r24, Z+4	; 0x04
    2e48:	82 fd       	sbrc	r24, 2
    2e4a:	04 c0       	rjmp	.+8      	; 0x2e54 <usart_set_baudrate+0xaa>
		baud *= 2;
    2e4c:	88 0c       	add	r8, r8
    2e4e:	99 1c       	adc	r9, r9
    2e50:	aa 1c       	adc	r10, r10
    2e52:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    2e54:	c3 01       	movw	r24, r6
    2e56:	b2 01       	movw	r22, r4
    2e58:	a5 01       	movw	r20, r10
    2e5a:	94 01       	movw	r18, r8
    2e5c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2e60:	2f 3f       	cpi	r18, 0xFF	; 255
    2e62:	31 05       	cpc	r19, r1
    2e64:	41 05       	cpc	r20, r1
    2e66:	51 05       	cpc	r21, r1
    2e68:	08 f4       	brcc	.+2      	; 0x2e6c <usart_set_baudrate+0xc2>
    2e6a:	8e c0       	rjmp	.+284    	; 0x2f88 <usart_set_baudrate+0x1de>
    2e6c:	8f ef       	ldi	r24, 0xFF	; 255
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	c9 ef       	ldi	r28, 0xF9	; 249
    2e76:	05 c0       	rjmp	.+10     	; 0x2e82 <usart_set_baudrate+0xd8>
    2e78:	28 17       	cp	r18, r24
    2e7a:	39 07       	cpc	r19, r25
    2e7c:	4a 07       	cpc	r20, r26
    2e7e:	5b 07       	cpc	r21, r27
    2e80:	58 f0       	brcs	.+22     	; 0x2e98 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	aa 1f       	adc	r26, r26
    2e88:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    2e8a:	cd 3f       	cpi	r28, 0xFD	; 253
    2e8c:	0c f4       	brge	.+2      	; 0x2e90 <usart_set_baudrate+0xe6>
			limit |= 1;
    2e8e:	81 60       	ori	r24, 0x01	; 1
    2e90:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2e92:	c7 30       	cpi	r28, 0x07	; 7
    2e94:	89 f7       	brne	.-30     	; 0x2e78 <usart_set_baudrate+0xce>
    2e96:	4e c0       	rjmp	.+156    	; 0x2f34 <usart_set_baudrate+0x18a>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2e98:	cc 23       	and	r28, r28
    2e9a:	0c f0       	brlt	.+2      	; 0x2e9e <usart_set_baudrate+0xf4>
    2e9c:	4b c0       	rjmp	.+150    	; 0x2f34 <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2e9e:	d5 01       	movw	r26, r10
    2ea0:	c4 01       	movw	r24, r8
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	bb 1f       	adc	r27, r27
    2eba:	48 1a       	sub	r4, r24
    2ebc:	59 0a       	sbc	r5, r25
    2ebe:	6a 0a       	sbc	r6, r26
    2ec0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    2ec2:	ce 3f       	cpi	r28, 0xFE	; 254
    2ec4:	f4 f4       	brge	.+60     	; 0x2f02 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2ec6:	8d ef       	ldi	r24, 0xFD	; 253
    2ec8:	9f ef       	ldi	r25, 0xFF	; 255
    2eca:	8c 1b       	sub	r24, r28
    2ecc:	91 09       	sbc	r25, r1
    2ece:	c7 fd       	sbrc	r28, 7
    2ed0:	93 95       	inc	r25
    2ed2:	04 c0       	rjmp	.+8      	; 0x2edc <usart_set_baudrate+0x132>
    2ed4:	44 0c       	add	r4, r4
    2ed6:	55 1c       	adc	r5, r5
    2ed8:	66 1c       	adc	r6, r6
    2eda:	77 1c       	adc	r7, r7
    2edc:	8a 95       	dec	r24
    2ede:	d2 f7       	brpl	.-12     	; 0x2ed4 <usart_set_baudrate+0x12a>
    2ee0:	d5 01       	movw	r26, r10
    2ee2:	c4 01       	movw	r24, r8
    2ee4:	b6 95       	lsr	r27
    2ee6:	a7 95       	ror	r26
    2ee8:	97 95       	ror	r25
    2eea:	87 95       	ror	r24
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	64 0d       	add	r22, r4
    2ef2:	75 1d       	adc	r23, r5
    2ef4:	86 1d       	adc	r24, r6
    2ef6:	97 1d       	adc	r25, r7
    2ef8:	a5 01       	movw	r20, r10
    2efa:	94 01       	movw	r18, r8
    2efc:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodsi4>
    2f00:	35 c0       	rjmp	.+106    	; 0x2f6c <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
    2f02:	83 e0       	ldi	r24, 0x03	; 3
    2f04:	8c 0f       	add	r24, r28
    2f06:	a5 01       	movw	r20, r10
    2f08:	94 01       	movw	r18, r8
    2f0a:	04 c0       	rjmp	.+8      	; 0x2f14 <usart_set_baudrate+0x16a>
    2f0c:	22 0f       	add	r18, r18
    2f0e:	33 1f       	adc	r19, r19
    2f10:	44 1f       	adc	r20, r20
    2f12:	55 1f       	adc	r21, r21
    2f14:	8a 95       	dec	r24
    2f16:	d2 f7       	brpl	.-12     	; 0x2f0c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	b6 95       	lsr	r27
    2f1e:	a7 95       	ror	r26
    2f20:	97 95       	ror	r25
    2f22:	87 95       	ror	r24
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	64 0d       	add	r22, r4
    2f2a:	75 1d       	adc	r23, r5
    2f2c:	86 1d       	adc	r24, r6
    2f2e:	97 1d       	adc	r25, r7
    2f30:	ed d7       	rcall	.+4058   	; 0x3f0c <__udivmodsi4>
    2f32:	1c c0       	rjmp	.+56     	; 0x2f6c <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	8c 0f       	add	r24, r28
    2f38:	a5 01       	movw	r20, r10
    2f3a:	94 01       	movw	r18, r8
    2f3c:	04 c0       	rjmp	.+8      	; 0x2f46 <usart_set_baudrate+0x19c>
    2f3e:	22 0f       	add	r18, r18
    2f40:	33 1f       	adc	r19, r19
    2f42:	44 1f       	adc	r20, r20
    2f44:	55 1f       	adc	r21, r21
    2f46:	8a 95       	dec	r24
    2f48:	d2 f7       	brpl	.-12     	; 0x2f3e <usart_set_baudrate+0x194>
		div = (cpu_hz + baud / 2) / baud - 1;
    2f4a:	da 01       	movw	r26, r20
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	b6 95       	lsr	r27
    2f50:	a7 95       	ror	r26
    2f52:	97 95       	ror	r25
    2f54:	87 95       	ror	r24
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	64 0d       	add	r22, r4
    2f5c:	75 1d       	adc	r23, r5
    2f5e:	86 1d       	adc	r24, r6
    2f60:	97 1d       	adc	r25, r7
    2f62:	d4 d7       	rcall	.+4008   	; 0x3f0c <__udivmodsi4>
    2f64:	21 50       	subi	r18, 0x01	; 1
    2f66:	31 09       	sbc	r19, r1
    2f68:	41 09       	sbc	r20, r1
    2f6a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2f6c:	83 2f       	mov	r24, r19
    2f6e:	8f 70       	andi	r24, 0x0F	; 15
    2f70:	c2 95       	swap	r28
    2f72:	c0 7f       	andi	r28, 0xF0	; 240
    2f74:	c8 2b       	or	r28, r24
    2f76:	f7 01       	movw	r30, r14
    2f78:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    2f7a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	18 c0       	rjmp	.+48     	; 0x2fb0 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	16 c0       	rjmp	.+44     	; 0x2fb0 <usart_set_baudrate+0x206>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	14 c0       	rjmp	.+40     	; 0x2fb0 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2f88:	d5 01       	movw	r26, r10
    2f8a:	c4 01       	movw	r24, r8
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	aa 1f       	adc	r26, r26
    2f92:	bb 1f       	adc	r27, r27
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	aa 1f       	adc	r26, r26
    2f9a:	bb 1f       	adc	r27, r27
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	aa 1f       	adc	r26, r26
    2fa2:	bb 1f       	adc	r27, r27
    2fa4:	48 1a       	sub	r4, r24
    2fa6:	59 0a       	sbc	r5, r25
    2fa8:	6a 0a       	sbc	r6, r26
    2faa:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2fac:	c9 ef       	ldi	r28, 0xF9	; 249
    2fae:	8b cf       	rjmp	.-234    	; 0x2ec6 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2fb0:	cf 91       	pop	r28
    2fb2:	1f 91       	pop	r17
    2fb4:	0f 91       	pop	r16
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	bf 90       	pop	r11
    2fbc:	af 90       	pop	r10
    2fbe:	9f 90       	pop	r9
    2fc0:	8f 90       	pop	r8
    2fc2:	7f 90       	pop	r7
    2fc4:	6f 90       	pop	r6
    2fc6:	5f 90       	pop	r5
    2fc8:	4f 90       	pop	r4
    2fca:	08 95       	ret

00002fcc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	ec 01       	movw	r28, r24
    2fd6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	09 f4       	brne	.+2      	; 0x2fde <usart_init_rs232+0x12>
    2fdc:	36 c1       	rjmp	.+620    	; 0x324a <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2fde:	80 3c       	cpi	r24, 0xC0	; 192
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	21 f4       	brne	.+8      	; 0x2fec <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2fe4:	60 e1       	ldi	r22, 0x10	; 16
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	c7 d4       	rcall	.+2446   	; 0x3978 <sysclk_enable_module>
    2fea:	2f c1       	rjmp	.+606    	; 0x324a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2fec:	c0 34       	cpi	r28, 0x40	; 64
    2fee:	84 e0       	ldi	r24, 0x04	; 4
    2ff0:	d8 07       	cpc	r29, r24
    2ff2:	21 f4       	brne	.+8      	; 0x2ffc <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2ff4:	68 e0       	ldi	r22, 0x08	; 8
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	bf d4       	rcall	.+2430   	; 0x3978 <sysclk_enable_module>
    2ffa:	27 c1       	rjmp	.+590    	; 0x324a <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2ffc:	c1 15       	cp	r28, r1
    2ffe:	e4 e0       	ldi	r30, 0x04	; 4
    3000:	de 07       	cpc	r29, r30
    3002:	21 f4       	brne	.+8      	; 0x300c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3004:	64 e0       	ldi	r22, 0x04	; 4
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	b7 d4       	rcall	.+2414   	; 0x3978 <sysclk_enable_module>
    300a:	1f c1       	rjmp	.+574    	; 0x324a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    300c:	c0 38       	cpi	r28, 0x80	; 128
    300e:	f1 e0       	ldi	r31, 0x01	; 1
    3010:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3012:	21 f4       	brne	.+8      	; 0x301c <usart_init_rs232+0x50>
    3014:	62 e0       	ldi	r22, 0x02	; 2
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	af d4       	rcall	.+2398   	; 0x3978 <sysclk_enable_module>
    301a:	17 c1       	rjmp	.+558    	; 0x324a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    301c:	c1 15       	cp	r28, r1
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3022:	21 f4       	brne	.+8      	; 0x302c <usart_init_rs232+0x60>
    3024:	61 e0       	ldi	r22, 0x01	; 1
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	a7 d4       	rcall	.+2382   	; 0x3978 <sysclk_enable_module>
    302a:	0f c1       	rjmp	.+542    	; 0x324a <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    302c:	c0 38       	cpi	r28, 0x80	; 128
    302e:	e3 e0       	ldi	r30, 0x03	; 3
    3030:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3032:	21 f4       	brne	.+8      	; 0x303c <usart_init_rs232+0x70>
    3034:	61 e0       	ldi	r22, 0x01	; 1
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	9f d4       	rcall	.+2366   	; 0x3978 <sysclk_enable_module>
    303a:	07 c1       	rjmp	.+526    	; 0x324a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    303c:	c0 39       	cpi	r28, 0x90	; 144
    303e:	f3 e0       	ldi	r31, 0x03	; 3
    3040:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3042:	21 f4       	brne	.+8      	; 0x304c <usart_init_rs232+0x80>
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	97 d4       	rcall	.+2350   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    304a:	ff c0       	rjmp	.+510    	; 0x324a <usart_init_rs232+0x27e>
    304c:	c1 15       	cp	r28, r1
    304e:	82 e0       	ldi	r24, 0x02	; 2
    3050:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3052:	21 f4       	brne	.+8      	; 0x305c <usart_init_rs232+0x90>
    3054:	62 e0       	ldi	r22, 0x02	; 2
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	8f d4       	rcall	.+2334   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    305a:	f7 c0       	rjmp	.+494    	; 0x324a <usart_init_rs232+0x27e>
    305c:	c0 34       	cpi	r28, 0x40	; 64
    305e:	e2 e0       	ldi	r30, 0x02	; 2
    3060:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3062:	21 f4       	brne	.+8      	; 0x306c <usart_init_rs232+0xa0>
    3064:	62 e0       	ldi	r22, 0x02	; 2
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	87 d4       	rcall	.+2318   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    306a:	ef c0       	rjmp	.+478    	; 0x324a <usart_init_rs232+0x27e>
    306c:	c1 15       	cp	r28, r1
    306e:	f3 e0       	ldi	r31, 0x03	; 3
    3070:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    3072:	21 f4       	brne	.+8      	; 0x307c <usart_init_rs232+0xb0>
    3074:	64 e0       	ldi	r22, 0x04	; 4
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	7f d4       	rcall	.+2302   	; 0x3978 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    307a:	e7 c0       	rjmp	.+462    	; 0x324a <usart_init_rs232+0x27e>
    307c:	c0 32       	cpi	r28, 0x20	; 32
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    3082:	21 f4       	brne	.+8      	; 0x308c <usart_init_rs232+0xc0>
    3084:	64 e0       	ldi	r22, 0x04	; 4
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	77 d4       	rcall	.+2286   	; 0x3978 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    308a:	df c0       	rjmp	.+446    	; 0x324a <usart_init_rs232+0x27e>
    308c:	c1 15       	cp	r28, r1
    308e:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3090:	de 07       	cpc	r29, r30
    3092:	21 f4       	brne	.+8      	; 0x309c <usart_init_rs232+0xd0>
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	83 e0       	ldi	r24, 0x03	; 3
    3098:	6f d4       	rcall	.+2270   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    309a:	d7 c0       	rjmp	.+430    	; 0x324a <usart_init_rs232+0x27e>
    309c:	c1 15       	cp	r28, r1
    309e:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    30a0:	df 07       	cpc	r29, r31
    30a2:	21 f4       	brne	.+8      	; 0x30ac <usart_init_rs232+0xe0>
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	84 e0       	ldi	r24, 0x04	; 4
    30a8:	67 d4       	rcall	.+2254   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    30aa:	cf c0       	rjmp	.+414    	; 0x324a <usart_init_rs232+0x27e>
    30ac:	c1 15       	cp	r28, r1
    30ae:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    30b0:	d8 07       	cpc	r29, r24
    30b2:	21 f4       	brne	.+8      	; 0x30bc <usart_init_rs232+0xf0>
    30b4:	61 e0       	ldi	r22, 0x01	; 1
    30b6:	85 e0       	ldi	r24, 0x05	; 5
    30b8:	5f d4       	rcall	.+2238   	; 0x3978 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    30ba:	c7 c0       	rjmp	.+398    	; 0x324a <usart_init_rs232+0x27e>
    30bc:	c1 15       	cp	r28, r1
    30be:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    30c0:	de 07       	cpc	r29, r30
    30c2:	21 f4       	brne	.+8      	; 0x30cc <usart_init_rs232+0x100>
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    30c8:	57 d4       	rcall	.+2222   	; 0x3978 <sysclk_enable_module>
    30ca:	bf c0       	rjmp	.+382    	; 0x324a <usart_init_rs232+0x27e>
    30cc:	c0 34       	cpi	r28, 0x40	; 64
    30ce:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    30d0:	df 07       	cpc	r29, r31
    30d2:	21 f4       	brne	.+8      	; 0x30dc <usart_init_rs232+0x110>
    30d4:	62 e0       	ldi	r22, 0x02	; 2
    30d6:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    30d8:	4f d4       	rcall	.+2206   	; 0x3978 <sysclk_enable_module>
    30da:	b7 c0       	rjmp	.+366    	; 0x324a <usart_init_rs232+0x27e>
    30dc:	c0 34       	cpi	r28, 0x40	; 64
    30de:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    30e0:	d8 07       	cpc	r29, r24
    30e2:	21 f4       	brne	.+8      	; 0x30ec <usart_init_rs232+0x120>
    30e4:	62 e0       	ldi	r22, 0x02	; 2
    30e6:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    30e8:	47 d4       	rcall	.+2190   	; 0x3978 <sysclk_enable_module>
    30ea:	af c0       	rjmp	.+350    	; 0x324a <usart_init_rs232+0x27e>
    30ec:	c0 34       	cpi	r28, 0x40	; 64
    30ee:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    30f0:	de 07       	cpc	r29, r30
    30f2:	21 f4       	brne	.+8      	; 0x30fc <usart_init_rs232+0x130>
    30f4:	62 e0       	ldi	r22, 0x02	; 2
    30f6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    30f8:	3f d4       	rcall	.+2174   	; 0x3978 <sysclk_enable_module>
    30fa:	a7 c0       	rjmp	.+334    	; 0x324a <usart_init_rs232+0x27e>
    30fc:	c0 34       	cpi	r28, 0x40	; 64
    30fe:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    3100:	df 07       	cpc	r29, r31
    3102:	21 f4       	brne	.+8      	; 0x310c <usart_init_rs232+0x140>
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3108:	37 d4       	rcall	.+2158   	; 0x3978 <sysclk_enable_module>
    310a:	9f c0       	rjmp	.+318    	; 0x324a <usart_init_rs232+0x27e>
    310c:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    310e:	88 e0       	ldi	r24, 0x08	; 8
    3110:	d8 07       	cpc	r29, r24
    3112:	21 f4       	brne	.+8      	; 0x311c <usart_init_rs232+0x150>
    3114:	64 e0       	ldi	r22, 0x04	; 4
    3116:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3118:	2f d4       	rcall	.+2142   	; 0x3978 <sysclk_enable_module>
    311a:	97 c0       	rjmp	.+302    	; 0x324a <usart_init_rs232+0x27e>
    311c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    311e:	e9 e0       	ldi	r30, 0x09	; 9
    3120:	de 07       	cpc	r29, r30
    3122:	21 f4       	brne	.+8      	; 0x312c <usart_init_rs232+0x160>
    3124:	64 e0       	ldi	r22, 0x04	; 4
    3126:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3128:	27 d4       	rcall	.+2126   	; 0x3978 <sysclk_enable_module>
    312a:	8f c0       	rjmp	.+286    	; 0x324a <usart_init_rs232+0x27e>
    312c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    312e:	fa e0       	ldi	r31, 0x0A	; 10
    3130:	df 07       	cpc	r29, r31
    3132:	21 f4       	brne	.+8      	; 0x313c <usart_init_rs232+0x170>
    3134:	64 e0       	ldi	r22, 0x04	; 4
    3136:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3138:	1f d4       	rcall	.+2110   	; 0x3978 <sysclk_enable_module>
    313a:	87 c0       	rjmp	.+270    	; 0x324a <usart_init_rs232+0x27e>
    313c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    313e:	8b e0       	ldi	r24, 0x0B	; 11
    3140:	d8 07       	cpc	r29, r24
    3142:	21 f4       	brne	.+8      	; 0x314c <usart_init_rs232+0x180>
    3144:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3146:	86 e0       	ldi	r24, 0x06	; 6
    3148:	17 d4       	rcall	.+2094   	; 0x3978 <sysclk_enable_module>
    314a:	7f c0       	rjmp	.+254    	; 0x324a <usart_init_rs232+0x27e>
    314c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    314e:	e8 e0       	ldi	r30, 0x08	; 8
    3150:	de 07       	cpc	r29, r30
    3152:	21 f4       	brne	.+8      	; 0x315c <usart_init_rs232+0x190>
    3154:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3156:	83 e0       	ldi	r24, 0x03	; 3
    3158:	0f d4       	rcall	.+2078   	; 0x3978 <sysclk_enable_module>
    315a:	77 c0       	rjmp	.+238    	; 0x324a <usart_init_rs232+0x27e>
    315c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    315e:	f9 e0       	ldi	r31, 0x09	; 9
    3160:	df 07       	cpc	r29, r31
    3162:	21 f4       	brne	.+8      	; 0x316c <usart_init_rs232+0x1a0>
    3164:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    3166:	84 e0       	ldi	r24, 0x04	; 4
    3168:	07 d4       	rcall	.+2062   	; 0x3978 <sysclk_enable_module>
    316a:	6f c0       	rjmp	.+222    	; 0x324a <usart_init_rs232+0x27e>
    316c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    316e:	8a e0       	ldi	r24, 0x0A	; 10
    3170:	d8 07       	cpc	r29, r24
    3172:	21 f4       	brne	.+8      	; 0x317c <usart_init_rs232+0x1b0>
    3174:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    3176:	85 e0       	ldi	r24, 0x05	; 5
    3178:	ff d3       	rcall	.+2046   	; 0x3978 <sysclk_enable_module>
    317a:	67 c0       	rjmp	.+206    	; 0x324a <usart_init_rs232+0x27e>
    317c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    317e:	eb e0       	ldi	r30, 0x0B	; 11
    3180:	de 07       	cpc	r29, r30
    3182:	21 f4       	brne	.+8      	; 0x318c <usart_init_rs232+0x1c0>
    3184:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3186:	86 e0       	ldi	r24, 0x06	; 6
    3188:	f7 d3       	rcall	.+2030   	; 0x3978 <sysclk_enable_module>
    318a:	5f c0       	rjmp	.+190    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    318c:	c0 3a       	cpi	r28, 0xA0	; 160
    318e:	f8 e0       	ldi	r31, 0x08	; 8
    3190:	df 07       	cpc	r29, r31
    3192:	21 f4       	brne	.+8      	; 0x319c <usart_init_rs232+0x1d0>
    3194:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	ef d3       	rcall	.+2014   	; 0x3978 <sysclk_enable_module>
    319a:	57 c0       	rjmp	.+174    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    319c:	c0 3a       	cpi	r28, 0xA0	; 160
    319e:	89 e0       	ldi	r24, 0x09	; 9
    31a0:	d8 07       	cpc	r29, r24
    31a2:	21 f4       	brne	.+8      	; 0x31ac <usart_init_rs232+0x1e0>
    31a4:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    31a6:	84 e0       	ldi	r24, 0x04	; 4
    31a8:	e7 d3       	rcall	.+1998   	; 0x3978 <sysclk_enable_module>
    31aa:	4f c0       	rjmp	.+158    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    31ac:	c0 3a       	cpi	r28, 0xA0	; 160
    31ae:	ea e0       	ldi	r30, 0x0A	; 10
    31b0:	de 07       	cpc	r29, r30
    31b2:	21 f4       	brne	.+8      	; 0x31bc <usart_init_rs232+0x1f0>
    31b4:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    31b6:	85 e0       	ldi	r24, 0x05	; 5
    31b8:	df d3       	rcall	.+1982   	; 0x3978 <sysclk_enable_module>
    31ba:	47 c0       	rjmp	.+142    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    31bc:	c0 3a       	cpi	r28, 0xA0	; 160
    31be:	fb e0       	ldi	r31, 0x0B	; 11
    31c0:	df 07       	cpc	r29, r31
    31c2:	21 f4       	brne	.+8      	; 0x31cc <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    31c4:	60 e1       	ldi	r22, 0x10	; 16
    31c6:	86 e0       	ldi	r24, 0x06	; 6
    31c8:	d7 d3       	rcall	.+1966   	; 0x3978 <sysclk_enable_module>
    31ca:	3f c0       	rjmp	.+126    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    31cc:	c0 3b       	cpi	r28, 0xB0	; 176
    31ce:	88 e0       	ldi	r24, 0x08	; 8
    31d0:	d8 07       	cpc	r29, r24
    31d2:	21 f4       	brne	.+8      	; 0x31dc <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    31d4:	60 e2       	ldi	r22, 0x20	; 32
    31d6:	83 e0       	ldi	r24, 0x03	; 3
    31d8:	cf d3       	rcall	.+1950   	; 0x3978 <sysclk_enable_module>
    31da:	37 c0       	rjmp	.+110    	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    31dc:	c0 3b       	cpi	r28, 0xB0	; 176
    31de:	e9 e0       	ldi	r30, 0x09	; 9
    31e0:	de 07       	cpc	r29, r30
    31e2:	21 f4       	brne	.+8      	; 0x31ec <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    31e4:	60 e2       	ldi	r22, 0x20	; 32
    31e6:	84 e0       	ldi	r24, 0x04	; 4
    31e8:	c7 d3       	rcall	.+1934   	; 0x3978 <sysclk_enable_module>
    31ea:	2f c0       	rjmp	.+94     	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    31ec:	c0 3b       	cpi	r28, 0xB0	; 176
    31ee:	fa e0       	ldi	r31, 0x0A	; 10
    31f0:	df 07       	cpc	r29, r31
    31f2:	21 f4       	brne	.+8      	; 0x31fc <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    31f4:	60 e2       	ldi	r22, 0x20	; 32
    31f6:	85 e0       	ldi	r24, 0x05	; 5
    31f8:	bf d3       	rcall	.+1918   	; 0x3978 <sysclk_enable_module>
    31fa:	27 c0       	rjmp	.+78     	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    31fc:	c0 3b       	cpi	r28, 0xB0	; 176
    31fe:	8b e0       	ldi	r24, 0x0B	; 11
    3200:	d8 07       	cpc	r29, r24
    3202:	21 f4       	brne	.+8      	; 0x320c <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3204:	60 e2       	ldi	r22, 0x20	; 32
    3206:	86 e0       	ldi	r24, 0x06	; 6
    3208:	b7 d3       	rcall	.+1902   	; 0x3978 <sysclk_enable_module>
    320a:	1f c0       	rjmp	.+62     	; 0x324a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    320c:	c0 38       	cpi	r28, 0x80	; 128
    320e:	e4 e0       	ldi	r30, 0x04	; 4
    3210:	de 07       	cpc	r29, r30
    3212:	21 f4       	brne	.+8      	; 0x321c <usart_init_rs232+0x250>
    3214:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    3216:	83 e0       	ldi	r24, 0x03	; 3
    3218:	af d3       	rcall	.+1886   	; 0x3978 <sysclk_enable_module>
    321a:	17 c0       	rjmp	.+46     	; 0x324a <usart_init_rs232+0x27e>
    321c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    321e:	f4 e0       	ldi	r31, 0x04	; 4
    3220:	df 07       	cpc	r29, r31
    3222:	21 f4       	brne	.+8      	; 0x322c <usart_init_rs232+0x260>
    3224:	60 e4       	ldi	r22, 0x40	; 64
    3226:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3228:	a7 d3       	rcall	.+1870   	; 0x3978 <sysclk_enable_module>
    322a:	0f c0       	rjmp	.+30     	; 0x324a <usart_init_rs232+0x27e>
    322c:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    322e:	84 e0       	ldi	r24, 0x04	; 4
    3230:	d8 07       	cpc	r29, r24
    3232:	21 f4       	brne	.+8      	; 0x323c <usart_init_rs232+0x270>
    3234:	60 e4       	ldi	r22, 0x40	; 64
    3236:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    3238:	9f d3       	rcall	.+1854   	; 0x3978 <sysclk_enable_module>
    323a:	07 c0       	rjmp	.+14     	; 0x324a <usart_init_rs232+0x27e>
    323c:	c0 3b       	cpi	r28, 0xB0	; 176
    323e:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    3240:	de 07       	cpc	r29, r30
    3242:	19 f4       	brne	.+6      	; 0x324a <usart_init_rs232+0x27e>
    3244:	60 e4       	ldi	r22, 0x40	; 64
    3246:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3248:	97 d3       	rcall	.+1838   	; 0x3978 <sysclk_enable_module>
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	f8 01       	movw	r30, r16
    3252:	95 81       	ldd	r25, Z+5	; 0x05
    3254:	84 81       	ldd	r24, Z+4	; 0x04
    3256:	89 2b       	or	r24, r25
    3258:	96 81       	ldd	r25, Z+6	; 0x06
    325a:	91 11       	cpse	r25, r1
    325c:	98 e0       	ldi	r25, 0x08	; 8
    325e:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	f8 01       	movw	r30, r16
    3264:	40 81       	ld	r20, Z
    3266:	51 81       	ldd	r21, Z+1	; 0x01
    3268:	62 81       	ldd	r22, Z+2	; 0x02
    326a:	73 81       	ldd	r23, Z+3	; 0x03
    326c:	00 e0       	ldi	r16, 0x00	; 0
    326e:	18 e4       	ldi	r17, 0x48	; 72
    3270:	28 ee       	ldi	r18, 0xE8	; 232
    3272:	31 e0       	ldi	r19, 0x01	; 1
    3274:	ce 01       	movw	r24, r28
    3276:	99 dd       	rcall	.-1230   	; 0x2daa <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	98 60       	ori	r25, 0x08	; 8
    327c:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	90 61       	ori	r25, 0x10	; 16
    3282:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	08 95       	ret

0000328e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	08 b6       	in	r0, 0x38	; 56
    329a:	0f 92       	push	r0
    329c:	18 be       	out	0x38, r1	; 56
    329e:	09 b6       	in	r0, 0x39	; 57
    32a0:	0f 92       	push	r0
    32a2:	19 be       	out	0x39, r1	; 57
    32a4:	0b b6       	in	r0, 0x3b	; 59
    32a6:	0f 92       	push	r0
    32a8:	1b be       	out	0x3b, r1	; 59
    32aa:	2f 93       	push	r18
    32ac:	3f 93       	push	r19
    32ae:	4f 93       	push	r20
    32b0:	5f 93       	push	r21
    32b2:	6f 93       	push	r22
    32b4:	7f 93       	push	r23
    32b6:	8f 93       	push	r24
    32b8:	9f 93       	push	r25
    32ba:	af 93       	push	r26
    32bc:	bf 93       	push	r27
    32be:	ef 93       	push	r30
    32c0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    32c2:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    32c6:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    32ca:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <adca_callback>
    32ce:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <adca_callback+0x1>
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	92 e0       	ldi	r25, 0x02	; 2
    32d8:	19 95       	eicall
}
    32da:	ff 91       	pop	r31
    32dc:	ef 91       	pop	r30
    32de:	bf 91       	pop	r27
    32e0:	af 91       	pop	r26
    32e2:	9f 91       	pop	r25
    32e4:	8f 91       	pop	r24
    32e6:	7f 91       	pop	r23
    32e8:	6f 91       	pop	r22
    32ea:	5f 91       	pop	r21
    32ec:	4f 91       	pop	r20
    32ee:	3f 91       	pop	r19
    32f0:	2f 91       	pop	r18
    32f2:	0f 90       	pop	r0
    32f4:	0b be       	out	0x3b, r0	; 59
    32f6:	0f 90       	pop	r0
    32f8:	09 be       	out	0x39, r0	; 57
    32fa:	0f 90       	pop	r0
    32fc:	08 be       	out	0x38, r0	; 56
    32fe:	0f 90       	pop	r0
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	0f 90       	pop	r0
    3304:	1f 90       	pop	r1
    3306:	18 95       	reti

00003308 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3308:	1f 92       	push	r1
    330a:	0f 92       	push	r0
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	0f 92       	push	r0
    3310:	11 24       	eor	r1, r1
    3312:	08 b6       	in	r0, 0x38	; 56
    3314:	0f 92       	push	r0
    3316:	18 be       	out	0x38, r1	; 56
    3318:	09 b6       	in	r0, 0x39	; 57
    331a:	0f 92       	push	r0
    331c:	19 be       	out	0x39, r1	; 57
    331e:	0b b6       	in	r0, 0x3b	; 59
    3320:	0f 92       	push	r0
    3322:	1b be       	out	0x3b, r1	; 59
    3324:	2f 93       	push	r18
    3326:	3f 93       	push	r19
    3328:	4f 93       	push	r20
    332a:	5f 93       	push	r21
    332c:	6f 93       	push	r22
    332e:	7f 93       	push	r23
    3330:	8f 93       	push	r24
    3332:	9f 93       	push	r25
    3334:	af 93       	push	r26
    3336:	bf 93       	push	r27
    3338:	ef 93       	push	r30
    333a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    333c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    3340:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    3344:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <adca_callback>
    3348:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <adca_callback+0x1>
    334c:	62 e0       	ldi	r22, 0x02	; 2
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	92 e0       	ldi	r25, 0x02	; 2
    3352:	19 95       	eicall
}
    3354:	ff 91       	pop	r31
    3356:	ef 91       	pop	r30
    3358:	bf 91       	pop	r27
    335a:	af 91       	pop	r26
    335c:	9f 91       	pop	r25
    335e:	8f 91       	pop	r24
    3360:	7f 91       	pop	r23
    3362:	6f 91       	pop	r22
    3364:	5f 91       	pop	r21
    3366:	4f 91       	pop	r20
    3368:	3f 91       	pop	r19
    336a:	2f 91       	pop	r18
    336c:	0f 90       	pop	r0
    336e:	0b be       	out	0x3b, r0	; 59
    3370:	0f 90       	pop	r0
    3372:	09 be       	out	0x39, r0	; 57
    3374:	0f 90       	pop	r0
    3376:	08 be       	out	0x38, r0	; 56
    3378:	0f 90       	pop	r0
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	0f 90       	pop	r0
    337e:	1f 90       	pop	r1
    3380:	18 95       	reti

00003382 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    3382:	1f 92       	push	r1
    3384:	0f 92       	push	r0
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	0f 92       	push	r0
    338a:	11 24       	eor	r1, r1
    338c:	08 b6       	in	r0, 0x38	; 56
    338e:	0f 92       	push	r0
    3390:	18 be       	out	0x38, r1	; 56
    3392:	09 b6       	in	r0, 0x39	; 57
    3394:	0f 92       	push	r0
    3396:	19 be       	out	0x39, r1	; 57
    3398:	0b b6       	in	r0, 0x3b	; 59
    339a:	0f 92       	push	r0
    339c:	1b be       	out	0x3b, r1	; 59
    339e:	2f 93       	push	r18
    33a0:	3f 93       	push	r19
    33a2:	4f 93       	push	r20
    33a4:	5f 93       	push	r21
    33a6:	6f 93       	push	r22
    33a8:	7f 93       	push	r23
    33aa:	8f 93       	push	r24
    33ac:	9f 93       	push	r25
    33ae:	af 93       	push	r26
    33b0:	bf 93       	push	r27
    33b2:	ef 93       	push	r30
    33b4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    33b6:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    33ba:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    33be:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <adca_callback>
    33c2:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <adca_callback+0x1>
    33c6:	64 e0       	ldi	r22, 0x04	; 4
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	92 e0       	ldi	r25, 0x02	; 2
    33cc:	19 95       	eicall
}
    33ce:	ff 91       	pop	r31
    33d0:	ef 91       	pop	r30
    33d2:	bf 91       	pop	r27
    33d4:	af 91       	pop	r26
    33d6:	9f 91       	pop	r25
    33d8:	8f 91       	pop	r24
    33da:	7f 91       	pop	r23
    33dc:	6f 91       	pop	r22
    33de:	5f 91       	pop	r21
    33e0:	4f 91       	pop	r20
    33e2:	3f 91       	pop	r19
    33e4:	2f 91       	pop	r18
    33e6:	0f 90       	pop	r0
    33e8:	0b be       	out	0x3b, r0	; 59
    33ea:	0f 90       	pop	r0
    33ec:	09 be       	out	0x39, r0	; 57
    33ee:	0f 90       	pop	r0
    33f0:	08 be       	out	0x38, r0	; 56
    33f2:	0f 90       	pop	r0
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	0f 90       	pop	r0
    33f8:	1f 90       	pop	r1
    33fa:	18 95       	reti

000033fc <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
    3406:	08 b6       	in	r0, 0x38	; 56
    3408:	0f 92       	push	r0
    340a:	18 be       	out	0x38, r1	; 56
    340c:	09 b6       	in	r0, 0x39	; 57
    340e:	0f 92       	push	r0
    3410:	19 be       	out	0x39, r1	; 57
    3412:	0b b6       	in	r0, 0x3b	; 59
    3414:	0f 92       	push	r0
    3416:	1b be       	out	0x3b, r1	; 59
    3418:	2f 93       	push	r18
    341a:	3f 93       	push	r19
    341c:	4f 93       	push	r20
    341e:	5f 93       	push	r21
    3420:	6f 93       	push	r22
    3422:	7f 93       	push	r23
    3424:	8f 93       	push	r24
    3426:	9f 93       	push	r25
    3428:	af 93       	push	r26
    342a:	bf 93       	push	r27
    342c:	ef 93       	push	r30
    342e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    3430:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    3434:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    3438:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <adca_callback>
    343c:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <adca_callback+0x1>
    3440:	68 e0       	ldi	r22, 0x08	; 8
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	92 e0       	ldi	r25, 0x02	; 2
    3446:	19 95       	eicall
}
    3448:	ff 91       	pop	r31
    344a:	ef 91       	pop	r30
    344c:	bf 91       	pop	r27
    344e:	af 91       	pop	r26
    3450:	9f 91       	pop	r25
    3452:	8f 91       	pop	r24
    3454:	7f 91       	pop	r23
    3456:	6f 91       	pop	r22
    3458:	5f 91       	pop	r21
    345a:	4f 91       	pop	r20
    345c:	3f 91       	pop	r19
    345e:	2f 91       	pop	r18
    3460:	0f 90       	pop	r0
    3462:	0b be       	out	0x3b, r0	; 59
    3464:	0f 90       	pop	r0
    3466:	09 be       	out	0x39, r0	; 57
    3468:	0f 90       	pop	r0
    346a:	08 be       	out	0x38, r0	; 56
    346c:	0f 90       	pop	r0
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	0f 90       	pop	r0
    3472:	1f 90       	pop	r1
    3474:	18 95       	reti

00003476 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	08 b6       	in	r0, 0x38	; 56
    3482:	0f 92       	push	r0
    3484:	18 be       	out	0x38, r1	; 56
    3486:	09 b6       	in	r0, 0x39	; 57
    3488:	0f 92       	push	r0
    348a:	19 be       	out	0x39, r1	; 57
    348c:	0b b6       	in	r0, 0x3b	; 59
    348e:	0f 92       	push	r0
    3490:	1b be       	out	0x3b, r1	; 59
    3492:	2f 93       	push	r18
    3494:	3f 93       	push	r19
    3496:	4f 93       	push	r20
    3498:	5f 93       	push	r21
    349a:	6f 93       	push	r22
    349c:	7f 93       	push	r23
    349e:	8f 93       	push	r24
    34a0:	9f 93       	push	r25
    34a2:	af 93       	push	r26
    34a4:	bf 93       	push	r27
    34a6:	ef 93       	push	r30
    34a8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    34aa:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    34ae:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    34b2:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <adcb_callback>
    34b6:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <adcb_callback+0x1>
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	80 e4       	ldi	r24, 0x40	; 64
    34be:	92 e0       	ldi	r25, 0x02	; 2
    34c0:	19 95       	eicall
}
    34c2:	ff 91       	pop	r31
    34c4:	ef 91       	pop	r30
    34c6:	bf 91       	pop	r27
    34c8:	af 91       	pop	r26
    34ca:	9f 91       	pop	r25
    34cc:	8f 91       	pop	r24
    34ce:	7f 91       	pop	r23
    34d0:	6f 91       	pop	r22
    34d2:	5f 91       	pop	r21
    34d4:	4f 91       	pop	r20
    34d6:	3f 91       	pop	r19
    34d8:	2f 91       	pop	r18
    34da:	0f 90       	pop	r0
    34dc:	0b be       	out	0x3b, r0	; 59
    34de:	0f 90       	pop	r0
    34e0:	09 be       	out	0x39, r0	; 57
    34e2:	0f 90       	pop	r0
    34e4:	08 be       	out	0x38, r0	; 56
    34e6:	0f 90       	pop	r0
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	0f 90       	pop	r0
    34ec:	1f 90       	pop	r1
    34ee:	18 95       	reti

000034f0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    34f0:	1f 92       	push	r1
    34f2:	0f 92       	push	r0
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	0f 92       	push	r0
    34f8:	11 24       	eor	r1, r1
    34fa:	08 b6       	in	r0, 0x38	; 56
    34fc:	0f 92       	push	r0
    34fe:	18 be       	out	0x38, r1	; 56
    3500:	09 b6       	in	r0, 0x39	; 57
    3502:	0f 92       	push	r0
    3504:	19 be       	out	0x39, r1	; 57
    3506:	0b b6       	in	r0, 0x3b	; 59
    3508:	0f 92       	push	r0
    350a:	1b be       	out	0x3b, r1	; 59
    350c:	2f 93       	push	r18
    350e:	3f 93       	push	r19
    3510:	4f 93       	push	r20
    3512:	5f 93       	push	r21
    3514:	6f 93       	push	r22
    3516:	7f 93       	push	r23
    3518:	8f 93       	push	r24
    351a:	9f 93       	push	r25
    351c:	af 93       	push	r26
    351e:	bf 93       	push	r27
    3520:	ef 93       	push	r30
    3522:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3524:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3528:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    352c:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <adcb_callback>
    3530:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <adcb_callback+0x1>
    3534:	62 e0       	ldi	r22, 0x02	; 2
    3536:	80 e4       	ldi	r24, 0x40	; 64
    3538:	92 e0       	ldi	r25, 0x02	; 2
    353a:	19 95       	eicall
}
    353c:	ff 91       	pop	r31
    353e:	ef 91       	pop	r30
    3540:	bf 91       	pop	r27
    3542:	af 91       	pop	r26
    3544:	9f 91       	pop	r25
    3546:	8f 91       	pop	r24
    3548:	7f 91       	pop	r23
    354a:	6f 91       	pop	r22
    354c:	5f 91       	pop	r21
    354e:	4f 91       	pop	r20
    3550:	3f 91       	pop	r19
    3552:	2f 91       	pop	r18
    3554:	0f 90       	pop	r0
    3556:	0b be       	out	0x3b, r0	; 59
    3558:	0f 90       	pop	r0
    355a:	09 be       	out	0x39, r0	; 57
    355c:	0f 90       	pop	r0
    355e:	08 be       	out	0x38, r0	; 56
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	0f 90       	pop	r0
    3566:	1f 90       	pop	r1
    3568:	18 95       	reti

0000356a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    356a:	1f 92       	push	r1
    356c:	0f 92       	push	r0
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	0f 92       	push	r0
    3572:	11 24       	eor	r1, r1
    3574:	08 b6       	in	r0, 0x38	; 56
    3576:	0f 92       	push	r0
    3578:	18 be       	out	0x38, r1	; 56
    357a:	09 b6       	in	r0, 0x39	; 57
    357c:	0f 92       	push	r0
    357e:	19 be       	out	0x39, r1	; 57
    3580:	0b b6       	in	r0, 0x3b	; 59
    3582:	0f 92       	push	r0
    3584:	1b be       	out	0x3b, r1	; 59
    3586:	2f 93       	push	r18
    3588:	3f 93       	push	r19
    358a:	4f 93       	push	r20
    358c:	5f 93       	push	r21
    358e:	6f 93       	push	r22
    3590:	7f 93       	push	r23
    3592:	8f 93       	push	r24
    3594:	9f 93       	push	r25
    3596:	af 93       	push	r26
    3598:	bf 93       	push	r27
    359a:	ef 93       	push	r30
    359c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    359e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    35a2:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    35a6:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <adcb_callback>
    35aa:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <adcb_callback+0x1>
    35ae:	64 e0       	ldi	r22, 0x04	; 4
    35b0:	80 e4       	ldi	r24, 0x40	; 64
    35b2:	92 e0       	ldi	r25, 0x02	; 2
    35b4:	19 95       	eicall
}
    35b6:	ff 91       	pop	r31
    35b8:	ef 91       	pop	r30
    35ba:	bf 91       	pop	r27
    35bc:	af 91       	pop	r26
    35be:	9f 91       	pop	r25
    35c0:	8f 91       	pop	r24
    35c2:	7f 91       	pop	r23
    35c4:	6f 91       	pop	r22
    35c6:	5f 91       	pop	r21
    35c8:	4f 91       	pop	r20
    35ca:	3f 91       	pop	r19
    35cc:	2f 91       	pop	r18
    35ce:	0f 90       	pop	r0
    35d0:	0b be       	out	0x3b, r0	; 59
    35d2:	0f 90       	pop	r0
    35d4:	09 be       	out	0x39, r0	; 57
    35d6:	0f 90       	pop	r0
    35d8:	08 be       	out	0x38, r0	; 56
    35da:	0f 90       	pop	r0
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	0f 90       	pop	r0
    35e0:	1f 90       	pop	r1
    35e2:	18 95       	reti

000035e4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    35e4:	1f 92       	push	r1
    35e6:	0f 92       	push	r0
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	0f 92       	push	r0
    35ec:	11 24       	eor	r1, r1
    35ee:	08 b6       	in	r0, 0x38	; 56
    35f0:	0f 92       	push	r0
    35f2:	18 be       	out	0x38, r1	; 56
    35f4:	09 b6       	in	r0, 0x39	; 57
    35f6:	0f 92       	push	r0
    35f8:	19 be       	out	0x39, r1	; 57
    35fa:	0b b6       	in	r0, 0x3b	; 59
    35fc:	0f 92       	push	r0
    35fe:	1b be       	out	0x3b, r1	; 59
    3600:	2f 93       	push	r18
    3602:	3f 93       	push	r19
    3604:	4f 93       	push	r20
    3606:	5f 93       	push	r21
    3608:	6f 93       	push	r22
    360a:	7f 93       	push	r23
    360c:	8f 93       	push	r24
    360e:	9f 93       	push	r25
    3610:	af 93       	push	r26
    3612:	bf 93       	push	r27
    3614:	ef 93       	push	r30
    3616:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3618:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    361c:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    3620:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <adcb_callback>
    3624:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <adcb_callback+0x1>
    3628:	68 e0       	ldi	r22, 0x08	; 8
    362a:	80 e4       	ldi	r24, 0x40	; 64
    362c:	92 e0       	ldi	r25, 0x02	; 2
    362e:	19 95       	eicall
}
    3630:	ff 91       	pop	r31
    3632:	ef 91       	pop	r30
    3634:	bf 91       	pop	r27
    3636:	af 91       	pop	r26
    3638:	9f 91       	pop	r25
    363a:	8f 91       	pop	r24
    363c:	7f 91       	pop	r23
    363e:	6f 91       	pop	r22
    3640:	5f 91       	pop	r21
    3642:	4f 91       	pop	r20
    3644:	3f 91       	pop	r19
    3646:	2f 91       	pop	r18
    3648:	0f 90       	pop	r0
    364a:	0b be       	out	0x3b, r0	; 59
    364c:	0f 90       	pop	r0
    364e:	09 be       	out	0x39, r0	; 57
    3650:	0f 90       	pop	r0
    3652:	08 be       	out	0x38, r0	; 56
    3654:	0f 90       	pop	r0
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	0f 90       	pop	r0
    365a:	1f 90       	pop	r1
    365c:	18 95       	reti

0000365e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    365e:	bf 92       	push	r11
    3660:	cf 92       	push	r12
    3662:	df 92       	push	r13
    3664:	ef 92       	push	r14
    3666:	ff 92       	push	r15
    3668:	0f 93       	push	r16
    366a:	1f 93       	push	r17
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	1f 92       	push	r1
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	8c 01       	movw	r16, r24
    3678:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    367a:	81 15       	cp	r24, r1
    367c:	22 e0       	ldi	r18, 0x02	; 2
    367e:	92 07       	cpc	r25, r18
    3680:	71 f4       	brne	.+28     	; 0x369e <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3682:	61 e2       	ldi	r22, 0x21	; 33
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	64 d2       	rcall	.+1224   	; 0x3b52 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    368a:	c8 2e       	mov	r12, r24
    368c:	d1 2c       	mov	r13, r1
    368e:	60 e2       	ldi	r22, 0x20	; 32
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	5e d2       	rcall	.+1212   	; 0x3b52 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    3696:	dc 2c       	mov	r13, r12
    3698:	cc 24       	eor	r12, r12
    369a:	c8 2a       	or	r12, r24
    369c:	10 c0       	rjmp	.+32     	; 0x36be <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    369e:	80 34       	cpi	r24, 0x40	; 64
    36a0:	92 40       	sbci	r25, 0x02	; 2
    36a2:	d1 f5       	brne	.+116    	; 0x3718 <adc_write_configuration+0xba>
    36a4:	65 e2       	ldi	r22, 0x25	; 37
    36a6:	70 e0       	ldi	r23, 0x00	; 0
    36a8:	82 e0       	ldi	r24, 0x02	; 2
    36aa:	53 d2       	rcall	.+1190   	; 0x3b52 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    36ac:	c8 2e       	mov	r12, r24
    36ae:	d1 2c       	mov	r13, r1
    36b0:	64 e2       	ldi	r22, 0x24	; 36
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	4d d2       	rcall	.+1178   	; 0x3b52 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    36b8:	dc 2c       	mov	r13, r12
    36ba:	cc 24       	eor	r12, r12
    36bc:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36be:	8f b7       	in	r24, 0x3f	; 63
    36c0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    36c2:	f8 94       	cli
	return flags;
    36c4:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    36c6:	c8 01       	movw	r24, r16
    36c8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    36cc:	f8 01       	movw	r30, r16
    36ce:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    36d0:	92 e0       	ldi	r25, 0x02	; 2
    36d2:	90 83       	st	Z, r25
	adc->CAL = cal;
    36d4:	c4 86       	std	Z+12, r12	; 0x0c
    36d6:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    36d8:	f7 01       	movw	r30, r14
    36da:	25 81       	ldd	r18, Z+5	; 0x05
    36dc:	36 81       	ldd	r19, Z+6	; 0x06
    36de:	f8 01       	movw	r30, r16
    36e0:	20 8f       	std	Z+24, r18	; 0x18
    36e2:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    36e4:	f7 01       	movw	r30, r14
    36e6:	92 81       	ldd	r25, Z+2	; 0x02
    36e8:	f8 01       	movw	r30, r16
    36ea:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    36ec:	f7 01       	movw	r30, r14
    36ee:	94 81       	ldd	r25, Z+4	; 0x04
    36f0:	f8 01       	movw	r30, r16
    36f2:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    36f4:	f7 01       	movw	r30, r14
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	f8 01       	movw	r30, r16
    36fa:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    36fc:	f7 01       	movw	r30, r14
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	f8 01       	movw	r30, r16
    3702:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    3704:	81 70       	andi	r24, 0x01	; 1
    3706:	f7 01       	movw	r30, r14
    3708:	90 81       	ld	r25, Z
    370a:	89 2b       	or	r24, r25
    370c:	f8 01       	movw	r30, r16
    370e:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    3710:	c8 01       	movw	r24, r16
    3712:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3716:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    3718:	0f 90       	pop	r0
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
    3722:	ff 90       	pop	r15
    3724:	ef 90       	pop	r14
    3726:	df 90       	pop	r13
    3728:	cf 90       	pop	r12
    372a:	bf 90       	pop	r11
    372c:	08 95       	ret

0000372e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    372e:	df 92       	push	r13
    3730:	ef 92       	push	r14
    3732:	ff 92       	push	r15
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
    373c:	1f 92       	push	r1
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	8c 01       	movw	r16, r24
    3744:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3746:	8f b7       	in	r24, 0x3f	; 63
    3748:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    374a:	f8 94       	cli
	return flags;
    374c:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    374e:	c8 01       	movw	r24, r16
    3750:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    3754:	f8 01       	movw	r30, r16
    3756:	80 81       	ld	r24, Z
    3758:	80 7c       	andi	r24, 0xC0	; 192
    375a:	f7 01       	movw	r30, r14
    375c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    375e:	f8 01       	movw	r30, r16
    3760:	80 8d       	ldd	r24, Z+24	; 0x18
    3762:	91 8d       	ldd	r25, Z+25	; 0x19
    3764:	f7 01       	movw	r30, r14
    3766:	85 83       	std	Z+5, r24	; 0x05
    3768:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    376a:	f8 01       	movw	r30, r16
    376c:	82 81       	ldd	r24, Z+2	; 0x02
    376e:	f7 01       	movw	r30, r14
    3770:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    3772:	f8 01       	movw	r30, r16
    3774:	84 81       	ldd	r24, Z+4	; 0x04
    3776:	f7 01       	movw	r30, r14
    3778:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    377a:	f8 01       	movw	r30, r16
    377c:	83 81       	ldd	r24, Z+3	; 0x03
    377e:	f7 01       	movw	r30, r14
    3780:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    3782:	f8 01       	movw	r30, r16
    3784:	81 81       	ldd	r24, Z+1	; 0x01
    3786:	f7 01       	movw	r30, r14
    3788:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    378a:	c8 01       	movw	r24, r16
    378c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3790:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    3792:	0f 90       	pop	r0
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	ef 90       	pop	r14
    37a0:	df 90       	pop	r13
    37a2:	08 95       	ret

000037a4 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    37a4:	af 92       	push	r10
    37a6:	bf 92       	push	r11
    37a8:	cf 92       	push	r12
    37aa:	df 92       	push	r13
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	1f 92       	push	r1
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	6c 01       	movw	r12, r24
    37c0:	b6 2e       	mov	r11, r22
    37c2:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    37c4:	86 2f       	mov	r24, r22
    37c6:	83 70       	andi	r24, 0x03	; 3
    37c8:	29 f4       	brne	.+10     	; 0x37d4 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    37ca:	96 2f       	mov	r25, r22
    37cc:	96 95       	lsr	r25
    37ce:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    37d0:	82 e0       	ldi	r24, 0x02	; 2
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    37d4:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    37d6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    37d8:	90 ff       	sbrs	r25, 0
		index++;
    37da:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    37dc:	86 01       	movw	r16, r12
    37de:	00 5e       	subi	r16, 0xE0	; 224
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	98 e0       	ldi	r25, 0x08	; 8
    37e4:	89 9f       	mul	r24, r25
    37e6:	00 0d       	add	r16, r0
    37e8:	11 1d       	adc	r17, r1
    37ea:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    37ec:	8f b7       	in	r24, 0x3f	; 63
    37ee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    37f0:	f8 94       	cli
	return flags;
    37f2:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    37f4:	c6 01       	movw	r24, r12
    37f6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    37fa:	f7 01       	movw	r30, r14
    37fc:	80 81       	ld	r24, Z
    37fe:	f8 01       	movw	r30, r16
    3800:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    3802:	f7 01       	movw	r30, r14
    3804:	82 81       	ldd	r24, Z+2	; 0x02
    3806:	f8 01       	movw	r30, r16
    3808:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    380a:	f7 01       	movw	r30, r14
    380c:	81 81       	ldd	r24, Z+1	; 0x01
    380e:	f8 01       	movw	r30, r16
    3810:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3812:	b0 fe       	sbrs	r11, 0
    3814:	04 c0       	rjmp	.+8      	; 0x381e <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3816:	f7 01       	movw	r30, r14
    3818:	83 81       	ldd	r24, Z+3	; 0x03
    381a:	f8 01       	movw	r30, r16
    381c:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    381e:	c6 01       	movw	r24, r12
    3820:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3824:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    3826:	0f 90       	pop	r0
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	df 90       	pop	r13
    3836:	cf 90       	pop	r12
    3838:	bf 90       	pop	r11
    383a:	af 90       	pop	r10
    383c:	08 95       	ret

0000383e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    383e:	af 92       	push	r10
    3840:	bf 92       	push	r11
    3842:	cf 92       	push	r12
    3844:	df 92       	push	r13
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	1f 92       	push	r1
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	6c 01       	movw	r12, r24
    385a:	b6 2e       	mov	r11, r22
    385c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    385e:	86 2f       	mov	r24, r22
    3860:	83 70       	andi	r24, 0x03	; 3
    3862:	29 f4       	brne	.+10     	; 0x386e <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3864:	96 2f       	mov	r25, r22
    3866:	96 95       	lsr	r25
    3868:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    386a:	82 e0       	ldi	r24, 0x02	; 2
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    386e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3870:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3872:	90 ff       	sbrs	r25, 0
		index++;
    3874:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3876:	86 01       	movw	r16, r12
    3878:	00 5e       	subi	r16, 0xE0	; 224
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	98 e0       	ldi	r25, 0x08	; 8
    387e:	89 9f       	mul	r24, r25
    3880:	00 0d       	add	r16, r0
    3882:	11 1d       	adc	r17, r1
    3884:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3886:	8f b7       	in	r24, 0x3f	; 63
    3888:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    388a:	f8 94       	cli
	return flags;
    388c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    388e:	c6 01       	movw	r24, r12
    3890:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3894:	f8 01       	movw	r30, r16
    3896:	80 81       	ld	r24, Z
    3898:	f7 01       	movw	r30, r14
    389a:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    389c:	f8 01       	movw	r30, r16
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	f7 01       	movw	r30, r14
    38a2:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    38a4:	f8 01       	movw	r30, r16
    38a6:	81 81       	ldd	r24, Z+1	; 0x01
    38a8:	f7 01       	movw	r30, r14
    38aa:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    38ac:	b0 fe       	sbrs	r11, 0
    38ae:	04 c0       	rjmp	.+8      	; 0x38b8 <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    38b0:	f8 01       	movw	r30, r16
    38b2:	86 81       	ldd	r24, Z+6	; 0x06
    38b4:	f7 01       	movw	r30, r14
    38b6:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    38b8:	c6 01       	movw	r24, r12
    38ba:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38be:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    38c0:	0f 90       	pop	r0
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	ff 90       	pop	r15
    38cc:	ef 90       	pop	r14
    38ce:	df 90       	pop	r13
    38d0:	cf 90       	pop	r12
    38d2:	bf 90       	pop	r11
    38d4:	af 90       	pop	r10
    38d6:	08 95       	ret

000038d8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
    38dc:	00 d0       	rcall	.+0      	; 0x38de <sysclk_init+0x6>
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    38e2:	8f ef       	ldi	r24, 0xFF	; 255
    38e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    38e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    38ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    38f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    38f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    38f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    38fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    3900:	61 e0       	ldi	r22, 0x01	; 1
    3902:	81 e4       	ldi	r24, 0x41	; 65
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	2f d1       	rcall	.+606    	; 0x3b66 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3908:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    390c:	84 fd       	sbrc	r24, 4
    390e:	20 c0       	rjmp	.+64     	; 0x3950 <sysclk_init+0x78>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3910:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3914:	81 fd       	sbrc	r24, 1
    3916:	0d c0       	rjmp	.+26     	; 0x3932 <sysclk_init+0x5a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3918:	8f b7       	in	r24, 0x3f	; 63
    391a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    391c:	f8 94       	cli
	return flags;
    391e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3920:	e0 e5       	ldi	r30, 0x50	; 80
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	82 60       	ori	r24, 0x02	; 2
    3928:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    392a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    392c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    392e:	81 ff       	sbrs	r24, 1
    3930:	fd cf       	rjmp	.-6      	; 0x392c <sysclk_init+0x54>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3932:	8f b7       	in	r24, 0x3f	; 63
    3934:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3936:	f8 94       	cli
	return flags;
    3938:	9a 81       	ldd	r25, Y+2	; 0x02
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    393a:	e0 e5       	ldi	r30, 0x50	; 80
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	88 e8       	ldi	r24, 0x88	; 136
    3940:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3942:	80 81       	ld	r24, Z
    3944:	80 61       	ori	r24, 0x10	; 16
    3946:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3948:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    394a:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    394c:	84 ff       	sbrs	r24, 4
    394e:	fd cf       	rjmp	.-6      	; 0x394a <sysclk_init+0x72>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3950:	64 e0       	ldi	r22, 0x04	; 4
    3952:	80 e4       	ldi	r24, 0x40	; 64
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	07 d1       	rcall	.+526    	; 0x3b66 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3958:	8f b7       	in	r24, 0x3f	; 63
    395a:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    395c:	f8 94       	cli
	return flags;
    395e:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3960:	e0 e5       	ldi	r30, 0x50	; 80
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8e 7f       	andi	r24, 0xFE	; 254
    3968:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    396a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    396c:	23 96       	adiw	r28, 0x03	; 3
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	08 95       	ret

00003978 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	1f 92       	push	r1
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3982:	9f b7       	in	r25, 0x3f	; 63
    3984:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3986:	f8 94       	cli
	return flags;
    3988:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    398a:	e8 2f       	mov	r30, r24
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	e0 59       	subi	r30, 0x90	; 144
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	60 95       	com	r22
    3994:	80 81       	ld	r24, Z
    3996:	68 23       	and	r22, r24
    3998:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    399a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    399c:	0f 90       	pop	r0
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	08 95       	ret

000039a4 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	1f 92       	push	r1
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39ae:	9f b7       	in	r25, 0x3f	; 63
    39b0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    39b2:	f8 94       	cli
	return flags;
    39b4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    39b6:	e8 2f       	mov	r30, r24
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	e0 59       	subi	r30, 0x90	; 144
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	68 2b       	or	r22, r24
    39c2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39c4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    39c6:	0f 90       	pop	r0
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	08 95       	ret

000039ce <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	7a 01       	movw	r14, r20
    39dc:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    39de:	eb 01       	movw	r28, r22
    39e0:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    39e2:	23 2b       	or	r18, r19
    39e4:	51 f0       	breq	.+20     	; 0x39fa <nvm_user_sig_read_buffer+0x2c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    39e6:	be 01       	movw	r22, r28
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	b3 d0       	rcall	.+358    	; 0x3b52 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    39ec:	f7 01       	movw	r30, r14
    39ee:	81 93       	st	Z+, r24
    39f0:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    39f2:	21 96       	adiw	r28, 0x01	; 1
		len--;
    39f4:	01 50       	subi	r16, 0x01	; 1
    39f6:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    39f8:	b1 f7       	brne	.-20     	; 0x39e6 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	08 95       	ret

00003a08 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    3a08:	2f 92       	push	r2
    3a0a:	3f 92       	push	r3
    3a0c:	4f 92       	push	r4
    3a0e:	5f 92       	push	r5
    3a10:	6f 92       	push	r6
    3a12:	7f 92       	push	r7
    3a14:	8f 92       	push	r8
    3a16:	9f 92       	push	r9
    3a18:	af 92       	push	r10
    3a1a:	bf 92       	push	r11
    3a1c:	cf 92       	push	r12
    3a1e:	df 92       	push	r13
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <nvm_user_sig_write_buffer+0x26>
    3a2e:	1f 92       	push	r1
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	4b 83       	std	Y+3, r20	; 0x03
    3a36:	5c 83       	std	Y+4, r21	; 0x04
    3a38:	79 01       	movw	r14, r18
    3a3a:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    3a3c:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    3a3e:	23 2b       	or	r18, r19
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <nvm_user_sig_write_buffer+0x3c>
    3a42:	4f c0       	rjmp	.+158    	; 0x3ae2 <nvm_user_sig_write_buffer+0xda>
    3a44:	65 c0       	rjmp	.+202    	; 0x3b10 <nvm_user_sig_write_buffer+0x108>
    3a46:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    3a48:	33 20       	and	r3, r3
    3a4a:	79 f0       	breq	.+30     	; 0x3a6a <nvm_user_sig_write_buffer+0x62>
    3a4c:	b2 01       	movw	r22, r4
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	80 d0       	rcall	.+256    	; 0x3b52 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    3a52:	89 83       	std	Y+1, r24	; 0x01
    3a54:	b8 01       	movw	r22, r16
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	7c d0       	rcall	.+248    	; 0x3b52 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    3a5a:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	29 f0       	breq	.+10     	; 0x3a6e <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
    3a64:	22 24       	eor	r2, r2
    3a66:	23 94       	inc	r2
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
    3a6a:	89 82       	std	Y+1, r8	; 0x01
    3a6c:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    3a6e:	e1 14       	cp	r14, r1
    3a70:	f1 04       	cpc	r15, r1
    3a72:	09 f1       	breq	.+66     	; 0x3ab6 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
    3a74:	ac 14       	cp	r10, r12
    3a76:	bd 04       	cpc	r11, r13
    3a78:	79 f4       	brne	.+30     	; 0x3a98 <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	e8 1a       	sub	r14, r24
    3a7e:	f1 08       	sbc	r15, r1
					opt_address++;
    3a80:	ef ef       	ldi	r30, 0xFF	; 255
    3a82:	ce 1a       	sub	r12, r30
    3a84:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    3a86:	eb 81       	ldd	r30, Y+3	; 0x03
    3a88:	fc 81       	ldd	r31, Y+4	; 0x04
    3a8a:	81 91       	ld	r24, Z+
    3a8c:	eb 83       	std	Y+3, r30	; 0x03
    3a8e:	fc 83       	std	Y+4, r31	; 0x04
    3a90:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    3a92:	e1 14       	cp	r14, r1
    3a94:	f1 04       	cpc	r15, r1
    3a96:	79 f0       	breq	.+30     	; 0x3ab6 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == (page_pos+1)) {
    3a98:	c0 16       	cp	r12, r16
    3a9a:	d1 06       	cpc	r13, r17
    3a9c:	61 f4       	brne	.+24     	; 0x3ab6 <nvm_user_sig_write_buffer+0xae>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    3a9e:	f1 e0       	ldi	r31, 0x01	; 1
    3aa0:	ef 1a       	sub	r14, r31
    3aa2:	f1 08       	sbc	r15, r1
					opt_address++;
    3aa4:	2f ef       	ldi	r18, 0xFF	; 255
    3aa6:	c2 1a       	sub	r12, r18
    3aa8:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    3aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    3aac:	fc 81       	ldd	r31, Y+4	; 0x04
    3aae:	81 91       	ld	r24, Z+
    3ab0:	eb 83       	std	Y+3, r30	; 0x03
    3ab2:	fc 83       	std	Y+4, r31	; 0x04
    3ab4:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    3ab6:	49 81       	ldd	r20, Y+1	; 0x01
    3ab8:	5a 81       	ldd	r21, Y+2	; 0x02
    3aba:	c3 01       	movw	r24, r6
    3abc:	b2 01       	movw	r22, r4
    3abe:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
    3ac2:	f2 e0       	ldi	r31, 0x02	; 2
    3ac4:	4f 0e       	add	r4, r31
    3ac6:	51 1c       	adc	r5, r1
    3ac8:	61 1c       	adc	r6, r1
    3aca:	71 1c       	adc	r7, r1
    3acc:	0e 5f       	subi	r16, 0xFE	; 254
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    3ad0:	01 30       	cpi	r16, 0x01	; 1
    3ad2:	22 e0       	ldi	r18, 0x02	; 2
    3ad4:	12 07       	cpc	r17, r18
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <nvm_user_sig_write_buffer+0xd2>
    3ad8:	b6 cf       	rjmp	.-148    	; 0x3a46 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    3ada:	e1 14       	cp	r14, r1
    3adc:	f1 04       	cpc	r15, r1
    3ade:	29 f4       	brne	.+10     	; 0x3aea <nvm_user_sig_write_buffer+0xe2>
    3ae0:	0a c0       	rjmp	.+20     	; 0x3af6 <nvm_user_sig_write_buffer+0xee>
    3ae2:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    3ae4:	88 24       	eor	r8, r8
    3ae6:	8a 94       	dec	r8
    3ae8:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    3aea:	01 e0       	ldi	r16, 0x01	; 1
    3aec:	10 e0       	ldi	r17, 0x00	; 0
    3aee:	41 2c       	mov	r4, r1
    3af0:	51 2c       	mov	r5, r1
    3af2:	32 01       	movw	r6, r4
    3af4:	a8 cf       	rjmp	.-176    	; 0x3a46 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    3af6:	22 20       	and	r2, r2
    3af8:	59 f0       	breq	.+22     	; 0x3b10 <nvm_user_sig_write_buffer+0x108>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3afa:	e0 ec       	ldi	r30, 0xC0	; 192
    3afc:	f1 e0       	ldi	r31, 0x01	; 1
    3afe:	87 85       	ldd	r24, Z+15	; 0x0f
    3b00:	88 23       	and	r24, r24
    3b02:	ec f3       	brlt	.-6      	; 0x3afe <nvm_user_sig_write_buffer+0xf6>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    3b04:	48 e1       	ldi	r20, 0x18	; 24
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3b10:	e0 ec       	ldi	r30, 0xC0	; 192
    3b12:	f1 e0       	ldi	r31, 0x01	; 1
    3b14:	87 85       	ldd	r24, Z+15	; 0x0f
    3b16:	88 23       	and	r24, r24
    3b18:	ec f3       	brlt	.-6      	; 0x3b14 <nvm_user_sig_write_buffer+0x10c>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    3b1a:	4a e1       	ldi	r20, 0x1A	; 26
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	cb 01       	movw	r24, r22
    3b22:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    3b26:	24 96       	adiw	r28, 0x04	; 4
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	df 90       	pop	r13
    3b3a:	cf 90       	pop	r12
    3b3c:	bf 90       	pop	r11
    3b3e:	af 90       	pop	r10
    3b40:	9f 90       	pop	r9
    3b42:	8f 90       	pop	r8
    3b44:	7f 90       	pop	r7
    3b46:	6f 90       	pop	r6
    3b48:	5f 90       	pop	r5
    3b4a:	4f 90       	pop	r4
    3b4c:	3f 90       	pop	r3
    3b4e:	2f 90       	pop	r2
    3b50:	08 95       	ret

00003b52 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3b52:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3b56:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3b58:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3b5a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3b5e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3b60:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3b64:	08 95       	ret

00003b66 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3b66:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3b68:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3b6a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3b6c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3b6e:	60 83       	st	Z, r22
	ret                             // Return to caller
    3b70:	08 95       	ret

00003b72 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3b7c:	c6 2f       	mov	r28, r22
    3b7e:	d0 e0       	ldi	r29, 0x00	; 0
    3b80:	de 01       	movw	r26, r28
    3b82:	02 2e       	mov	r0, r18
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <ioport_configure_port_pin+0x18>
    3b86:	b5 95       	asr	r27
    3b88:	a7 95       	ror	r26
    3b8a:	0a 94       	dec	r0
    3b8c:	e2 f7       	brpl	.-8      	; 0x3b86 <ioport_configure_port_pin+0x14>
    3b8e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3b90:	50 8b       	std	Z+16, r21	; 0x10
    3b92:	2f 5f       	subi	r18, 0xFF	; 255
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3b98:	28 30       	cpi	r18, 0x08	; 8
    3b9a:	31 05       	cpc	r19, r1
    3b9c:	89 f7       	brne	.-30     	; 0x3b80 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3b9e:	40 ff       	sbrs	r20, 0
    3ba0:	0a c0       	rjmp	.+20     	; 0x3bb6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    3ba2:	41 ff       	sbrs	r20, 1
    3ba4:	03 c0       	rjmp	.+6      	; 0x3bac <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	65 83       	std	Z+5, r22	; 0x05
    3baa:	02 c0       	rjmp	.+4      	; 0x3bb0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3bac:	fc 01       	movw	r30, r24
    3bae:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	61 83       	std	Z+1, r22	; 0x01
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	08 95       	ret

00003bc0 <board_init>:
    3bc0:	43 e0       	ldi	r20, 0x03	; 3
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	80 e8       	ldi	r24, 0x80	; 128
    3bc8:	96 e0       	ldi	r25, 0x06	; 6
    3bca:	d3 df       	rcall	.-90     	; 0x3b72 <ioport_configure_port_pin>
    3bcc:	43 e0       	ldi	r20, 0x03	; 3
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	62 e0       	ldi	r22, 0x02	; 2
    3bd2:	80 e8       	ldi	r24, 0x80	; 128
    3bd4:	96 e0       	ldi	r25, 0x06	; 6
    3bd6:	cd df       	rcall	.-102    	; 0x3b72 <ioport_configure_port_pin>
    3bd8:	43 e0       	ldi	r20, 0x03	; 3
    3bda:	50 e0       	ldi	r21, 0x00	; 0
    3bdc:	64 e0       	ldi	r22, 0x04	; 4
    3bde:	80 e8       	ldi	r24, 0x80	; 128
    3be0:	96 e0       	ldi	r25, 0x06	; 6
    3be2:	c7 df       	rcall	.-114    	; 0x3b72 <ioport_configure_port_pin>
    3be4:	43 e0       	ldi	r20, 0x03	; 3
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	68 e0       	ldi	r22, 0x08	; 8
    3bea:	80 e8       	ldi	r24, 0x80	; 128
    3bec:	96 e0       	ldi	r25, 0x06	; 6
    3bee:	c1 df       	rcall	.-126    	; 0x3b72 <ioport_configure_port_pin>
    3bf0:	43 e0       	ldi	r20, 0x03	; 3
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	60 e1       	ldi	r22, 0x10	; 16
    3bf6:	80 e8       	ldi	r24, 0x80	; 128
    3bf8:	96 e0       	ldi	r25, 0x06	; 6
    3bfa:	bb df       	rcall	.-138    	; 0x3b72 <ioport_configure_port_pin>
    3bfc:	43 e0       	ldi	r20, 0x03	; 3
    3bfe:	50 e0       	ldi	r21, 0x00	; 0
    3c00:	60 e2       	ldi	r22, 0x20	; 32
    3c02:	80 e8       	ldi	r24, 0x80	; 128
    3c04:	96 e0       	ldi	r25, 0x06	; 6
    3c06:	b5 df       	rcall	.-150    	; 0x3b72 <ioport_configure_port_pin>
    3c08:	43 e0       	ldi	r20, 0x03	; 3
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	60 e4       	ldi	r22, 0x40	; 64
    3c0e:	80 e8       	ldi	r24, 0x80	; 128
    3c10:	96 e0       	ldi	r25, 0x06	; 6
    3c12:	af df       	rcall	.-162    	; 0x3b72 <ioport_configure_port_pin>
    3c14:	43 e0       	ldi	r20, 0x03	; 3
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	60 e8       	ldi	r22, 0x80	; 128
    3c1a:	80 e8       	ldi	r24, 0x80	; 128
    3c1c:	96 e0       	ldi	r25, 0x06	; 6
    3c1e:	a9 df       	rcall	.-174    	; 0x3b72 <ioport_configure_port_pin>
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	58 e1       	ldi	r21, 0x18	; 24
    3c24:	61 e0       	ldi	r22, 0x01	; 1
    3c26:	80 e6       	ldi	r24, 0x60	; 96
    3c28:	96 e0       	ldi	r25, 0x06	; 6
    3c2a:	a3 df       	rcall	.-186    	; 0x3b72 <ioport_configure_port_pin>
    3c2c:	40 e0       	ldi	r20, 0x00	; 0
    3c2e:	58 e1       	ldi	r21, 0x18	; 24
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	80 e6       	ldi	r24, 0x60	; 96
    3c34:	96 e0       	ldi	r25, 0x06	; 6
    3c36:	9d df       	rcall	.-198    	; 0x3b72 <ioport_configure_port_pin>
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	58 e1       	ldi	r21, 0x18	; 24
    3c3c:	64 e0       	ldi	r22, 0x04	; 4
    3c3e:	80 e6       	ldi	r24, 0x60	; 96
    3c40:	96 e0       	ldi	r25, 0x06	; 6
    3c42:	97 df       	rcall	.-210    	; 0x3b72 <ioport_configure_port_pin>
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	58 e1       	ldi	r21, 0x18	; 24
    3c48:	68 e0       	ldi	r22, 0x08	; 8
    3c4a:	80 e6       	ldi	r24, 0x60	; 96
    3c4c:	96 e0       	ldi	r25, 0x06	; 6
    3c4e:	91 df       	rcall	.-222    	; 0x3b72 <ioport_configure_port_pin>
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	58 e1       	ldi	r21, 0x18	; 24
    3c54:	60 e1       	ldi	r22, 0x10	; 16
    3c56:	80 e6       	ldi	r24, 0x60	; 96
    3c58:	96 e0       	ldi	r25, 0x06	; 6
    3c5a:	8b df       	rcall	.-234    	; 0x3b72 <ioport_configure_port_pin>
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	58 e1       	ldi	r21, 0x18	; 24
    3c60:	60 e2       	ldi	r22, 0x20	; 32
    3c62:	80 e6       	ldi	r24, 0x60	; 96
    3c64:	96 e0       	ldi	r25, 0x06	; 6
    3c66:	85 df       	rcall	.-246    	; 0x3b72 <ioport_configure_port_pin>
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	58 e1       	ldi	r21, 0x18	; 24
    3c6c:	61 e0       	ldi	r22, 0x01	; 1
    3c6e:	80 ee       	ldi	r24, 0xE0	; 224
    3c70:	97 e0       	ldi	r25, 0x07	; 7
    3c72:	7f df       	rcall	.-258    	; 0x3b72 <ioport_configure_port_pin>
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	58 e1       	ldi	r21, 0x18	; 24
    3c78:	62 e0       	ldi	r22, 0x02	; 2
    3c7a:	80 ee       	ldi	r24, 0xE0	; 224
    3c7c:	97 e0       	ldi	r25, 0x07	; 7
    3c7e:	79 df       	rcall	.-270    	; 0x3b72 <ioport_configure_port_pin>
    3c80:	43 e0       	ldi	r20, 0x03	; 3
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	60 e8       	ldi	r22, 0x80	; 128
    3c86:	80 e4       	ldi	r24, 0x40	; 64
    3c88:	96 e0       	ldi	r25, 0x06	; 6
    3c8a:	73 df       	rcall	.-282    	; 0x3b72 <ioport_configure_port_pin>
    3c8c:	43 e0       	ldi	r20, 0x03	; 3
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	60 e2       	ldi	r22, 0x20	; 32
    3c92:	80 e4       	ldi	r24, 0x40	; 64
    3c94:	96 e0       	ldi	r25, 0x06	; 6
    3c96:	6d df       	rcall	.-294    	; 0x3b72 <ioport_configure_port_pin>
    3c98:	40 e0       	ldi	r20, 0x00	; 0
    3c9a:	50 e0       	ldi	r21, 0x00	; 0
    3c9c:	60 e4       	ldi	r22, 0x40	; 64
    3c9e:	80 e4       	ldi	r24, 0x40	; 64
    3ca0:	96 e0       	ldi	r25, 0x06	; 6
    3ca2:	67 df       	rcall	.-306    	; 0x3b72 <ioport_configure_port_pin>
    3ca4:	43 e0       	ldi	r20, 0x03	; 3
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	68 e0       	ldi	r22, 0x08	; 8
    3caa:	80 ec       	ldi	r24, 0xC0	; 192
    3cac:	97 e0       	ldi	r25, 0x07	; 7
    3cae:	61 df       	rcall	.-318    	; 0x3b72 <ioport_configure_port_pin>
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	61 e0       	ldi	r22, 0x01	; 1
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	96 e0       	ldi	r25, 0x06	; 6
    3cba:	5b df       	rcall	.-330    	; 0x3b72 <ioport_configure_port_pin>
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	64 e0       	ldi	r22, 0x04	; 4
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	96 e0       	ldi	r25, 0x06	; 6
    3cc6:	55 df       	rcall	.-342    	; 0x3b72 <ioport_configure_port_pin>
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	50 e0       	ldi	r21, 0x00	; 0
    3ccc:	62 e0       	ldi	r22, 0x02	; 2
    3cce:	80 e2       	ldi	r24, 0x20	; 32
    3cd0:	96 e0       	ldi	r25, 0x06	; 6
    3cd2:	4f df       	rcall	.-354    	; 0x3b72 <ioport_configure_port_pin>
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	57 e0       	ldi	r21, 0x07	; 7
    3cd8:	62 e0       	ldi	r22, 0x02	; 2
    3cda:	80 e2       	ldi	r24, 0x20	; 32
    3cdc:	96 e0       	ldi	r25, 0x06	; 6
    3cde:	49 df       	rcall	.-366    	; 0x3b72 <ioport_configure_port_pin>
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
    3ce2:	57 e0       	ldi	r21, 0x07	; 7
    3ce4:	61 e0       	ldi	r22, 0x01	; 1
    3ce6:	80 e2       	ldi	r24, 0x20	; 32
    3ce8:	96 e0       	ldi	r25, 0x06	; 6
    3cea:	43 df       	rcall	.-378    	; 0x3b72 <ioport_configure_port_pin>
    3cec:	41 e0       	ldi	r20, 0x01	; 1
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	68 e0       	ldi	r22, 0x08	; 8
    3cf2:	80 e2       	ldi	r24, 0x20	; 32
    3cf4:	96 e0       	ldi	r25, 0x06	; 6
    3cf6:	3d df       	rcall	.-390    	; 0x3b72 <ioport_configure_port_pin>
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	57 e0       	ldi	r21, 0x07	; 7
    3cfc:	64 e0       	ldi	r22, 0x04	; 4
    3cfe:	80 e2       	ldi	r24, 0x20	; 32
    3d00:	96 e0       	ldi	r25, 0x06	; 6
    3d02:	37 df       	rcall	.-402    	; 0x3b72 <ioport_configure_port_pin>
    3d04:	43 e0       	ldi	r20, 0x03	; 3
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	68 e0       	ldi	r22, 0x08	; 8
    3d0a:	80 ec       	ldi	r24, 0xC0	; 192
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	31 df       	rcall	.-414    	; 0x3b72 <ioport_configure_port_pin>
    3d10:	43 e0       	ldi	r20, 0x03	; 3
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	68 e0       	ldi	r22, 0x08	; 8
    3d16:	80 e4       	ldi	r24, 0x40	; 64
    3d18:	96 e0       	ldi	r25, 0x06	; 6
    3d1a:	2b df       	rcall	.-426    	; 0x3b72 <ioport_configure_port_pin>
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	64 e0       	ldi	r22, 0x04	; 4
    3d22:	80 e4       	ldi	r24, 0x40	; 64
    3d24:	96 e0       	ldi	r25, 0x06	; 6
    3d26:	25 df       	rcall	.-438    	; 0x3b72 <ioport_configure_port_pin>
    3d28:	43 e0       	ldi	r20, 0x03	; 3
    3d2a:	50 e0       	ldi	r21, 0x00	; 0
    3d2c:	68 e0       	ldi	r22, 0x08	; 8
    3d2e:	80 e6       	ldi	r24, 0x60	; 96
    3d30:	96 e0       	ldi	r25, 0x06	; 6
    3d32:	1f df       	rcall	.-450    	; 0x3b72 <ioport_configure_port_pin>
    3d34:	40 e0       	ldi	r20, 0x00	; 0
    3d36:	50 e0       	ldi	r21, 0x00	; 0
    3d38:	64 e0       	ldi	r22, 0x04	; 4
    3d3a:	80 e6       	ldi	r24, 0x60	; 96
    3d3c:	96 e0       	ldi	r25, 0x06	; 6
    3d3e:	19 df       	rcall	.-462    	; 0x3b72 <ioport_configure_port_pin>
#if defined (SENSORS_XPLAINED_BOARD)
	/* Configure the Xplained Sensor extension board, if any, after
	 * the platform Xplained board has configured basic clock settings,
	 * GPIO pin mapping, interrupt controller options, etc.
	 */
	sensor_board_init ();
    3d40:	0c 94 12 02 	jmp	0x424	; 0x424 <sensor_board_init>
    3d44:	08 95       	ret

00003d46 <adc_handler>:

/*
*	Function to play sound from speaker
*	index	-	var to identify which sound to play
*/
void playSound(uint8_t index) {
    3d46:	9a 01       	movw	r18, r20
    3d48:	a6 e6       	ldi	r26, 0x66	; 102
    3d4a:	b1 e0       	ldi	r27, 0x01	; 1
    3d4c:	0a d1       	rcall	.+532    	; 0x3f62 <__umulhisi3>
    3d4e:	20 91 71 21 	lds	r18, 0x2171	; 0x802171 <tempsense>
    3d52:	30 91 72 21 	lds	r19, 0x2172	; 0x802172 <tempsense+0x1>
    3d56:	40 e0       	ldi	r20, 0x00	; 0
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	d8 d0       	rcall	.+432    	; 0x3f0c <__udivmodsi4>
    3d5c:	20 93 6f 21 	sts	0x216F, r18	; 0x80216f <last_temperature>
    3d60:	30 93 70 21 	sts	0x2170, r19	; 0x802170 <last_temperature+0x1>
    3d64:	08 95       	ret

00003d66 <publishUSARTMessage>:
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	66 23       	and	r22, r22
    3d70:	59 f0       	breq	.+22     	; 0x3d88 <publishUSARTMessage+0x22>
    3d72:	8c 01       	movw	r16, r24
    3d74:	ec 01       	movw	r28, r24
    3d76:	06 0f       	add	r16, r22
    3d78:	11 1d       	adc	r17, r1
    3d7a:	69 91       	ld	r22, Y+
    3d7c:	80 ea       	ldi	r24, 0xA0	; 160
    3d7e:	98 e0       	ldi	r25, 0x08	; 8
    3d80:	0c d8       	rcall	.-4072   	; 0x2d9a <usart_putchar>
    3d82:	c0 17       	cp	r28, r16
    3d84:	d1 07       	cpc	r29, r17
    3d86:	c9 f7       	brne	.-14     	; 0x3d7a <publishUSARTMessage+0x14>
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	08 95       	ret

00003d92 <main>:
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void)
{
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	6b 97       	sbiw	r28, 0x1b	; 27
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	de bf       	out	0x3e, r29	; 62
	
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    3da0:	0f df       	rcall	.-482    	; 0x3bc0 <board_init>
	sysclk_init();
    3da2:	9a dd       	rcall	.-1228   	; 0x38d8 <sysclk_init>
    3da4:	e7 e7       	ldi	r30, 0x77	; 119
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3da6:	f1 e2       	ldi	r31, 0x21	; 33
    3da8:	10 82       	st	Z, r1
    3daa:	11 82       	std	Z+1, r1	; 0x01
    3dac:	12 82       	std	Z+2, r1	; 0x02
    3dae:	13 82       	std	Z+3, r1	; 0x03
    3db0:	14 82       	std	Z+4, r1	; 0x04
    3db2:	81 e0       	ldi	r24, 0x01	; 1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3db4:	85 83       	std	Z+5, r24	; 0x05
    3db6:	87 e0       	ldi	r24, 0x07	; 7
	sleepmgr_init();
	irq_initialize_vectors();
    3db8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3dbc:	78 94       	sei
	cpu_irq_enable();
    3dbe:	0e 94 94 0b 	call	0x1728	; 0x1728 <sensor_platform_init>
	sensor_platform_init();
    3dc2:	64 e5       	ldi	r22, 0x54	; 84
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	// Initialize USART driver in RS232 mode
	usart_init_rs232(USART_SERIAL, &USART_SERIAL_OPTIONS);
    3dc4:	70 e2       	ldi	r23, 0x20	; 32
    3dc6:	80 ea       	ldi	r24, 0xA0	; 160
    3dc8:	98 e0       	ldi	r25, 0x08	; 8
    3dca:	00 d9       	rcall	.-3584   	; 0x2fcc <usart_init_rs232>
    3dcc:	be 01       	movw	r22, r28

	/************************************************************************/
	/* ADC CONFIG                                                                     */
	/************************************************************************/
	// Initialize ADC configuration structures.
	adc_read_configuration(&ADCA, &adc_conf);
    3dce:	62 5f       	subi	r22, 0xF2	; 242
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	92 e0       	ldi	r25, 0x02	; 2
    3dd6:	ab dc       	rcall	.-1706   	; 0x372e <adc_read_configuration>
    3dd8:	ae 01       	movw	r20, r28
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    3dda:	4b 5e       	subi	r20, 0xEB	; 235
    3ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dde:	61 e0       	ldi	r22, 0x01	; 1
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	92 e0       	ldi	r25, 0x02	; 2
    3de4:	2c dd       	rcall	.-1448   	; 0x383e <adcch_read_configuration>
    3de6:	9f 85       	ldd	r25, Y+15	; 0x0f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3de8:	88 89       	ldd	r24, Y+16	; 0x10
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3dea:	8f 7c       	andi	r24, 0xCF	; 207
    3dec:	26 e0       	ldi	r18, 0x06	; 6
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    3dee:	2a 8b       	std	Y+18, r18	; 0x12
    3df0:	91 7e       	andi	r25, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    3df2:	9f 87       	std	Y+15, r25	; 0x0f
    3df4:	19 8a       	std	Y+17, r1	; 0x11
		conf->evctrl = ADC_EVACT_NONE_gc;
    3df6:	81 60       	ori	r24, 0x01	; 1
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    3df8:	88 8b       	std	Y+16, r24	; 0x10
    3dfa:	be 01       	movw	r22, r28
			ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);

	adc_write_configuration(&ADCA, &adc_conf);
    3dfc:	62 5f       	subi	r22, 0xF2	; 242
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	92 e0       	ldi	r25, 0x02	; 2
    3e04:	2c dc       	rcall	.-1960   	; 0x365e <adc_write_configuration>
    3e06:	63 ea       	ldi	r22, 0xA3	; 163
	adc_set_callback(&ADCA, &adc_handler);
    3e08:	7e e1       	ldi	r23, 0x1E	; 30
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	92 e0       	ldi	r25, 0x02	; 2
    3e0e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <adc_set_callback>
    3e12:	1d 8a       	std	Y+21, r1	; 0x15
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    3e14:	1e 8a       	std	Y+22, r1	; 0x16
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    3e16:	8f 89       	ldd	r24, Y+23	; 0x17
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    3e18:	80 7f       	andi	r24, 0xF0	; 240
    3e1a:	81 60       	ori	r24, 0x01	; 1
    3e1c:	8f 8b       	std	Y+23, r24	; 0x17
    3e1e:	ae 01       	movw	r20, r28
	adcch_set_input(&adcch_conf, ADCCH_POS_TEMPSENSE, ADCCH_NEG_NONE,
			1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);

	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    3e20:	4b 5e       	subi	r20, 0xEB	; 235
    3e22:	5f 4f       	sbci	r21, 0xFF	; 255
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	92 e0       	ldi	r25, 0x02	; 2
    3e2a:	bc dc       	rcall	.-1672   	; 0x37a4 <adcch_write_configuration>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3e2c:	6f e2       	ldi	r22, 0x2F	; 47
    3e2e:	70 e0       	ldi	r23, 0x00	; 0
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	8f de       	rcall	.-738    	; 0x3b52 <nvm_read_byte>
		break;
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    3e34:	08 2f       	mov	r16, r24
    3e36:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    3e38:	10 2f       	mov	r17, r16
    3e3a:	00 27       	eor	r16, r16
    3e3c:	6e e2       	ldi	r22, 0x2E	; 46
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	87 de       	rcall	.-754    	; 0x3b52 <nvm_read_byte>
    3e44:	08 2b       	or	r16, r24
	
	// Get measurement for 85 degrees C (358 kelvin) from calibration data.
	tempsense = adc_get_calibration_data(ADC_CAL_TEMPSENSE);
    3e46:	00 93 71 21 	sts	0x2171, r16	; 0x802171 <tempsense>
    3e4a:	10 93 72 21 	sts	0x2172, r17	; 0x802172 <tempsense+0x1>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
	// Enable the ADC 
	adc_enable(&ADCA);
    3e50:	92 e0       	ldi	r25, 0x02	; 2
    3e52:	0e 94 09 0c 	call	0x1812	; 0x1812 <adc_enable>
    3e56:	20 e0       	ldi	r18, 0x00	; 0
	
	/************************************************************************/
	/* Light Sensor CONFIG                                                                     */
	/************************************************************************/
	//Attach descriptors to the defined sensor devices.
	sensor_attach(&light_dev, SENSOR_TYPE_LIGHT, 0, 0);
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	60 e2       	ldi	r22, 0x20	; 32
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	ce 01       	movw	r24, r28
    3e64:	01 96       	adiw	r24, 0x01	; 1
    3e66:	0e 94 a9 07 	call	0xf52	; 0xf52 <sensor_attach>
    3e6a:	88 85       	ldd	r24, Y+8	; 0x08
	//check initialization error
	if (light_dev.err) {
    3e6c:	99 85       	ldd	r25, Y+9	; 0x09
    3e6e:	89 2b       	or	r24, r25
    3e70:	09 f0       	breq	.+2      	; 0x3e74 <main+0xe2>
    3e72:	ff cf       	rjmp	.-2      	; 0x3e72 <main+0xe0>
    3e74:	8a e0       	ldi	r24, 0x0A	; 10
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	89 8f       	std	Y+25, r24	; 0x19
    3e7a:	9a 8f       	std	Y+26, r25	; 0x1a
    3e7c:	ae 01       	movw	r20, r28
 *
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_sample_rate(sensor_t *sensor, int16_t sample_Hz)
{
	return sensor_ioctl(sensor, SENSOR_SET_SAMPLE_RATE, &sample_Hz);
    3e7e:	47 5e       	subi	r20, 0xE7	; 231
    3e80:	5f 4f       	sbci	r21, 0xFF	; 255
    3e82:	66 e1       	ldi	r22, 0x16	; 22
    3e84:	ce 01       	movw	r24, r28
    3e86:	01 96       	adiw	r24, 0x01	; 1
    3e88:	0e 94 00 08 	call	0x1000	; 0x1000 <sensor_ioctl>
    3e8c:	c1 2c       	mov	r12, r1
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    3e8e:	68 94       	set
    3e90:	dd 24       	eor	r13, r13
    3e92:	d1 f8       	bld	r13, 1
    3e94:	0f 2e       	mov	r0, r31
	/************************************************************************/
	while (true) {
		//Add Delay
		adc_start_conversion(&ADCA, ADC_CH0);
		sensor_get_light(&light_dev, &light_data);
		sprintf(tempArray,"_[%4d]_[%5d]_\n\r",last_temperature,light_data.light.value);
    3e96:	fe ee       	ldi	r31, 0xEE	; 238
    3e98:	ef 2e       	mov	r14, r31
    3e9a:	f0 e2       	ldi	r31, 0x20	; 32
    3e9c:	ff 2e       	mov	r15, r31
    3e9e:	f0 2d       	mov	r31, r0
    3ea0:	0b e5       	ldi	r16, 0x5B	; 91
    3ea2:	10 e2       	ldi	r17, 0x20	; 32
    3ea4:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ea6:	8b 8f       	std	Y+27, r24	; 0x1b
    3ea8:	f8 94       	cli
	cpu_irq_disable();
    3eaa:	9b 8d       	ldd	r25, Y+27	; 0x1b
	return flags;
    3eac:	f6 01       	movw	r30, r12
    3eae:	80 81       	ld	r24, Z
    3eb0:	84 60       	ori	r24, 0x04	; 4
    3eb2:	80 83       	st	Z, r24
    3eb4:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3eb6:	43 e4       	ldi	r20, 0x43	; 67
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_light(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_LIGHT, data);
    3eb8:	50 e2       	ldi	r21, 0x20	; 32
    3eba:	65 e0       	ldi	r22, 0x05	; 5
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <sensor_read>
    3ec4:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <last_temperature>
    3ec8:	90 91 70 21 	lds	r25, 0x2170	; 0x802170 <last_temperature+0x1>
    3ecc:	e3 e4       	ldi	r30, 0x43	; 67
    3ece:	f0 e2       	ldi	r31, 0x20	; 32
    3ed0:	23 81       	ldd	r18, Z+3	; 0x03
    3ed2:	2f 93       	push	r18
    3ed4:	22 81       	ldd	r18, Z+2	; 0x02
    3ed6:	2f 93       	push	r18
    3ed8:	21 81       	ldd	r18, Z+1	; 0x01
    3eda:	2f 93       	push	r18
    3edc:	20 81       	ld	r18, Z
    3ede:	2f 93       	push	r18
    3ee0:	9f 93       	push	r25
    3ee2:	8f 93       	push	r24
    3ee4:	ff 92       	push	r15
    3ee6:	ef 92       	push	r14
    3ee8:	1f 93       	push	r17
    3eea:	0f 93       	push	r16
    3eec:	56 d0       	rcall	.+172    	; 0x3f9a <sprintf>
		publishUSARTMessage(tempArray,14);
    3eee:	6e e0       	ldi	r22, 0x0E	; 14
    3ef0:	c8 01       	movw	r24, r16
    3ef2:	39 df       	rcall	.-398    	; 0x3d66 <publishUSARTMessage>
    3ef4:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ef6:	2f e4       	ldi	r18, 0x4F	; 79
    3ef8:	83 ec       	ldi	r24, 0xC3	; 195
    3efa:	f1 50       	subi	r31, 0x01	; 1
    3efc:	20 40       	sbci	r18, 0x00	; 0
    3efe:	80 40       	sbci	r24, 0x00	; 0
    3f00:	e1 f7       	brne	.-8      	; 0x3efa <main+0x168>
    3f02:	00 c0       	rjmp	.+0      	; 0x3f04 <main+0x172>
    3f04:	00 00       	nop
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	cc cf       	rjmp	.-104    	; 0x3ea4 <main+0x112>

00003f0c <__udivmodsi4>:
    3f0c:	a1 e2       	ldi	r26, 0x21	; 33
    3f0e:	1a 2e       	mov	r1, r26
    3f10:	aa 1b       	sub	r26, r26
    3f12:	bb 1b       	sub	r27, r27
    3f14:	fd 01       	movw	r30, r26
    3f16:	0d c0       	rjmp	.+26     	; 0x3f32 <__udivmodsi4_ep>

00003f18 <__udivmodsi4_loop>:
    3f18:	aa 1f       	adc	r26, r26
    3f1a:	bb 1f       	adc	r27, r27
    3f1c:	ee 1f       	adc	r30, r30
    3f1e:	ff 1f       	adc	r31, r31
    3f20:	a2 17       	cp	r26, r18
    3f22:	b3 07       	cpc	r27, r19
    3f24:	e4 07       	cpc	r30, r20
    3f26:	f5 07       	cpc	r31, r21
    3f28:	20 f0       	brcs	.+8      	; 0x3f32 <__udivmodsi4_ep>
    3f2a:	a2 1b       	sub	r26, r18
    3f2c:	b3 0b       	sbc	r27, r19
    3f2e:	e4 0b       	sbc	r30, r20
    3f30:	f5 0b       	sbc	r31, r21

00003f32 <__udivmodsi4_ep>:
    3f32:	66 1f       	adc	r22, r22
    3f34:	77 1f       	adc	r23, r23
    3f36:	88 1f       	adc	r24, r24
    3f38:	99 1f       	adc	r25, r25
    3f3a:	1a 94       	dec	r1
    3f3c:	69 f7       	brne	.-38     	; 0x3f18 <__udivmodsi4_loop>
    3f3e:	60 95       	com	r22
    3f40:	70 95       	com	r23
    3f42:	80 95       	com	r24
    3f44:	90 95       	com	r25
    3f46:	9b 01       	movw	r18, r22
    3f48:	ac 01       	movw	r20, r24
    3f4a:	bd 01       	movw	r22, r26
    3f4c:	cf 01       	movw	r24, r30
    3f4e:	08 95       	ret

00003f50 <__tablejump2__>:
    3f50:	ee 0f       	add	r30, r30
    3f52:	ff 1f       	adc	r31, r31
    3f54:	88 1f       	adc	r24, r24
    3f56:	8b bf       	out	0x3b, r24	; 59
    3f58:	07 90       	elpm	r0, Z+
    3f5a:	f6 91       	elpm	r31, Z
    3f5c:	e0 2d       	mov	r30, r0
    3f5e:	1b be       	out	0x3b, r1	; 59
    3f60:	19 94       	eijmp

00003f62 <__umulhisi3>:
    3f62:	a2 9f       	mul	r26, r18
    3f64:	b0 01       	movw	r22, r0
    3f66:	b3 9f       	mul	r27, r19
    3f68:	c0 01       	movw	r24, r0
    3f6a:	a3 9f       	mul	r26, r19
    3f6c:	70 0d       	add	r23, r0
    3f6e:	81 1d       	adc	r24, r1
    3f70:	11 24       	eor	r1, r1
    3f72:	91 1d       	adc	r25, r1
    3f74:	b2 9f       	mul	r27, r18
    3f76:	70 0d       	add	r23, r0
    3f78:	81 1d       	adc	r24, r1
    3f7a:	11 24       	eor	r1, r1
    3f7c:	91 1d       	adc	r25, r1
    3f7e:	08 95       	ret

00003f80 <memcmp>:
    3f80:	fb 01       	movw	r30, r22
    3f82:	dc 01       	movw	r26, r24
    3f84:	04 c0       	rjmp	.+8      	; 0x3f8e <memcmp+0xe>
    3f86:	8d 91       	ld	r24, X+
    3f88:	01 90       	ld	r0, Z+
    3f8a:	80 19       	sub	r24, r0
    3f8c:	21 f4       	brne	.+8      	; 0x3f96 <memcmp+0x16>
    3f8e:	41 50       	subi	r20, 0x01	; 1
    3f90:	50 40       	sbci	r21, 0x00	; 0
    3f92:	c8 f7       	brcc	.-14     	; 0x3f86 <memcmp+0x6>
    3f94:	88 1b       	sub	r24, r24
    3f96:	99 0b       	sbc	r25, r25
    3f98:	08 95       	ret

00003f9a <sprintf>:
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	2e 97       	sbiw	r28, 0x0e	; 14
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0e 89       	ldd	r16, Y+22	; 0x16
    3fae:	1f 89       	ldd	r17, Y+23	; 0x17
    3fb0:	86 e0       	ldi	r24, 0x06	; 6
    3fb2:	8c 83       	std	Y+4, r24	; 0x04
    3fb4:	09 83       	std	Y+1, r16	; 0x01
    3fb6:	1a 83       	std	Y+2, r17	; 0x02
    3fb8:	8f ef       	ldi	r24, 0xFF	; 255
    3fba:	9f e7       	ldi	r25, 0x7F	; 127
    3fbc:	8d 83       	std	Y+5, r24	; 0x05
    3fbe:	9e 83       	std	Y+6, r25	; 0x06
    3fc0:	ae 01       	movw	r20, r28
    3fc2:	46 5e       	subi	r20, 0xE6	; 230
    3fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc6:	68 8d       	ldd	r22, Y+24	; 0x18
    3fc8:	79 8d       	ldd	r23, Y+25	; 0x19
    3fca:	ce 01       	movw	r24, r28
    3fcc:	01 96       	adiw	r24, 0x01	; 1
    3fce:	0d d0       	rcall	.+26     	; 0x3fea <vfprintf>
    3fd0:	ef 81       	ldd	r30, Y+7	; 0x07
    3fd2:	f8 85       	ldd	r31, Y+8	; 0x08
    3fd4:	e0 0f       	add	r30, r16
    3fd6:	f1 1f       	adc	r31, r17
    3fd8:	10 82       	st	Z, r1
    3fda:	2e 96       	adiw	r28, 0x0e	; 14
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	df 91       	pop	r29
    3fe2:	cf 91       	pop	r28
    3fe4:	1f 91       	pop	r17
    3fe6:	0f 91       	pop	r16
    3fe8:	08 95       	ret

00003fea <vfprintf>:
    3fea:	2f 92       	push	r2
    3fec:	3f 92       	push	r3
    3fee:	4f 92       	push	r4
    3ff0:	5f 92       	push	r5
    3ff2:	6f 92       	push	r6
    3ff4:	7f 92       	push	r7
    3ff6:	8f 92       	push	r8
    3ff8:	9f 92       	push	r9
    3ffa:	af 92       	push	r10
    3ffc:	bf 92       	push	r11
    3ffe:	cf 92       	push	r12
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    4012:	2b 97       	sbiw	r28, 0x0b	; 11
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	6c 01       	movw	r12, r24
    401a:	7b 01       	movw	r14, r22
    401c:	8a 01       	movw	r16, r20
    401e:	fc 01       	movw	r30, r24
    4020:	16 82       	std	Z+6, r1	; 0x06
    4022:	17 82       	std	Z+7, r1	; 0x07
    4024:	83 81       	ldd	r24, Z+3	; 0x03
    4026:	81 ff       	sbrs	r24, 1
    4028:	bf c1       	rjmp	.+894    	; 0x43a8 <__stack+0x3a9>
    402a:	ce 01       	movw	r24, r28
    402c:	01 96       	adiw	r24, 0x01	; 1
    402e:	3c 01       	movw	r6, r24
    4030:	f6 01       	movw	r30, r12
    4032:	93 81       	ldd	r25, Z+3	; 0x03
    4034:	f7 01       	movw	r30, r14
    4036:	93 fd       	sbrc	r25, 3
    4038:	85 91       	lpm	r24, Z+
    403a:	93 ff       	sbrs	r25, 3
    403c:	81 91       	ld	r24, Z+
    403e:	7f 01       	movw	r14, r30
    4040:	88 23       	and	r24, r24
    4042:	09 f4       	brne	.+2      	; 0x4046 <__stack+0x47>
    4044:	ad c1       	rjmp	.+858    	; 0x43a0 <__stack+0x3a1>
    4046:	85 32       	cpi	r24, 0x25	; 37
    4048:	39 f4       	brne	.+14     	; 0x4058 <__stack+0x59>
    404a:	93 fd       	sbrc	r25, 3
    404c:	85 91       	lpm	r24, Z+
    404e:	93 ff       	sbrs	r25, 3
    4050:	81 91       	ld	r24, Z+
    4052:	7f 01       	movw	r14, r30
    4054:	85 32       	cpi	r24, 0x25	; 37
    4056:	21 f4       	brne	.+8      	; 0x4060 <__stack+0x61>
    4058:	b6 01       	movw	r22, r12
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	d3 d1       	rcall	.+934    	; 0x4404 <fputc>
    405e:	e8 cf       	rjmp	.-48     	; 0x4030 <__stack+0x31>
    4060:	91 2c       	mov	r9, r1
    4062:	21 2c       	mov	r2, r1
    4064:	31 2c       	mov	r3, r1
    4066:	ff e1       	ldi	r31, 0x1F	; 31
    4068:	f3 15       	cp	r31, r3
    406a:	d8 f0       	brcs	.+54     	; 0x40a2 <__stack+0xa3>
    406c:	8b 32       	cpi	r24, 0x2B	; 43
    406e:	79 f0       	breq	.+30     	; 0x408e <__stack+0x8f>
    4070:	38 f4       	brcc	.+14     	; 0x4080 <__stack+0x81>
    4072:	80 32       	cpi	r24, 0x20	; 32
    4074:	79 f0       	breq	.+30     	; 0x4094 <__stack+0x95>
    4076:	83 32       	cpi	r24, 0x23	; 35
    4078:	a1 f4       	brne	.+40     	; 0x40a2 <__stack+0xa3>
    407a:	23 2d       	mov	r18, r3
    407c:	20 61       	ori	r18, 0x10	; 16
    407e:	1d c0       	rjmp	.+58     	; 0x40ba <__stack+0xbb>
    4080:	8d 32       	cpi	r24, 0x2D	; 45
    4082:	61 f0       	breq	.+24     	; 0x409c <__stack+0x9d>
    4084:	80 33       	cpi	r24, 0x30	; 48
    4086:	69 f4       	brne	.+26     	; 0x40a2 <__stack+0xa3>
    4088:	23 2d       	mov	r18, r3
    408a:	21 60       	ori	r18, 0x01	; 1
    408c:	16 c0       	rjmp	.+44     	; 0x40ba <__stack+0xbb>
    408e:	83 2d       	mov	r24, r3
    4090:	82 60       	ori	r24, 0x02	; 2
    4092:	38 2e       	mov	r3, r24
    4094:	e3 2d       	mov	r30, r3
    4096:	e4 60       	ori	r30, 0x04	; 4
    4098:	3e 2e       	mov	r3, r30
    409a:	2a c0       	rjmp	.+84     	; 0x40f0 <__stack+0xf1>
    409c:	f3 2d       	mov	r31, r3
    409e:	f8 60       	ori	r31, 0x08	; 8
    40a0:	1d c0       	rjmp	.+58     	; 0x40dc <__stack+0xdd>
    40a2:	37 fc       	sbrc	r3, 7
    40a4:	2d c0       	rjmp	.+90     	; 0x4100 <__stack+0x101>
    40a6:	20 ed       	ldi	r18, 0xD0	; 208
    40a8:	28 0f       	add	r18, r24
    40aa:	2a 30       	cpi	r18, 0x0A	; 10
    40ac:	40 f0       	brcs	.+16     	; 0x40be <__stack+0xbf>
    40ae:	8e 32       	cpi	r24, 0x2E	; 46
    40b0:	b9 f4       	brne	.+46     	; 0x40e0 <__stack+0xe1>
    40b2:	36 fc       	sbrc	r3, 6
    40b4:	75 c1       	rjmp	.+746    	; 0x43a0 <__stack+0x3a1>
    40b6:	23 2d       	mov	r18, r3
    40b8:	20 64       	ori	r18, 0x40	; 64
    40ba:	32 2e       	mov	r3, r18
    40bc:	19 c0       	rjmp	.+50     	; 0x40f0 <__stack+0xf1>
    40be:	36 fe       	sbrs	r3, 6
    40c0:	06 c0       	rjmp	.+12     	; 0x40ce <__stack+0xcf>
    40c2:	8a e0       	ldi	r24, 0x0A	; 10
    40c4:	98 9e       	mul	r9, r24
    40c6:	20 0d       	add	r18, r0
    40c8:	11 24       	eor	r1, r1
    40ca:	92 2e       	mov	r9, r18
    40cc:	11 c0       	rjmp	.+34     	; 0x40f0 <__stack+0xf1>
    40ce:	ea e0       	ldi	r30, 0x0A	; 10
    40d0:	2e 9e       	mul	r2, r30
    40d2:	20 0d       	add	r18, r0
    40d4:	11 24       	eor	r1, r1
    40d6:	22 2e       	mov	r2, r18
    40d8:	f3 2d       	mov	r31, r3
    40da:	f0 62       	ori	r31, 0x20	; 32
    40dc:	3f 2e       	mov	r3, r31
    40de:	08 c0       	rjmp	.+16     	; 0x40f0 <__stack+0xf1>
    40e0:	8c 36       	cpi	r24, 0x6C	; 108
    40e2:	21 f4       	brne	.+8      	; 0x40ec <__stack+0xed>
    40e4:	83 2d       	mov	r24, r3
    40e6:	80 68       	ori	r24, 0x80	; 128
    40e8:	38 2e       	mov	r3, r24
    40ea:	02 c0       	rjmp	.+4      	; 0x40f0 <__stack+0xf1>
    40ec:	88 36       	cpi	r24, 0x68	; 104
    40ee:	41 f4       	brne	.+16     	; 0x4100 <__stack+0x101>
    40f0:	f7 01       	movw	r30, r14
    40f2:	93 fd       	sbrc	r25, 3
    40f4:	85 91       	lpm	r24, Z+
    40f6:	93 ff       	sbrs	r25, 3
    40f8:	81 91       	ld	r24, Z+
    40fa:	7f 01       	movw	r14, r30
    40fc:	81 11       	cpse	r24, r1
    40fe:	b3 cf       	rjmp	.-154    	; 0x4066 <__stack+0x67>
    4100:	98 2f       	mov	r25, r24
    4102:	9f 7d       	andi	r25, 0xDF	; 223
    4104:	95 54       	subi	r25, 0x45	; 69
    4106:	93 30       	cpi	r25, 0x03	; 3
    4108:	28 f4       	brcc	.+10     	; 0x4114 <__stack+0x115>
    410a:	0c 5f       	subi	r16, 0xFC	; 252
    410c:	1f 4f       	sbci	r17, 0xFF	; 255
    410e:	9f e3       	ldi	r25, 0x3F	; 63
    4110:	99 83       	std	Y+1, r25	; 0x01
    4112:	0d c0       	rjmp	.+26     	; 0x412e <__stack+0x12f>
    4114:	83 36       	cpi	r24, 0x63	; 99
    4116:	31 f0       	breq	.+12     	; 0x4124 <__stack+0x125>
    4118:	83 37       	cpi	r24, 0x73	; 115
    411a:	71 f0       	breq	.+28     	; 0x4138 <__stack+0x139>
    411c:	83 35       	cpi	r24, 0x53	; 83
    411e:	09 f0       	breq	.+2      	; 0x4122 <__stack+0x123>
    4120:	55 c0       	rjmp	.+170    	; 0x41cc <__stack+0x1cd>
    4122:	20 c0       	rjmp	.+64     	; 0x4164 <__stack+0x165>
    4124:	f8 01       	movw	r30, r16
    4126:	80 81       	ld	r24, Z
    4128:	89 83       	std	Y+1, r24	; 0x01
    412a:	0e 5f       	subi	r16, 0xFE	; 254
    412c:	1f 4f       	sbci	r17, 0xFF	; 255
    412e:	88 24       	eor	r8, r8
    4130:	83 94       	inc	r8
    4132:	91 2c       	mov	r9, r1
    4134:	53 01       	movw	r10, r6
    4136:	12 c0       	rjmp	.+36     	; 0x415c <__stack+0x15d>
    4138:	28 01       	movw	r4, r16
    413a:	f2 e0       	ldi	r31, 0x02	; 2
    413c:	4f 0e       	add	r4, r31
    413e:	51 1c       	adc	r5, r1
    4140:	f8 01       	movw	r30, r16
    4142:	a0 80       	ld	r10, Z
    4144:	b1 80       	ldd	r11, Z+1	; 0x01
    4146:	36 fe       	sbrs	r3, 6
    4148:	03 c0       	rjmp	.+6      	; 0x4150 <__stack+0x151>
    414a:	69 2d       	mov	r22, r9
    414c:	70 e0       	ldi	r23, 0x00	; 0
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <__stack+0x155>
    4150:	6f ef       	ldi	r22, 0xFF	; 255
    4152:	7f ef       	ldi	r23, 0xFF	; 255
    4154:	c5 01       	movw	r24, r10
    4156:	4b d1       	rcall	.+662    	; 0x43ee <strnlen>
    4158:	4c 01       	movw	r8, r24
    415a:	82 01       	movw	r16, r4
    415c:	f3 2d       	mov	r31, r3
    415e:	ff 77       	andi	r31, 0x7F	; 127
    4160:	3f 2e       	mov	r3, r31
    4162:	15 c0       	rjmp	.+42     	; 0x418e <__stack+0x18f>
    4164:	28 01       	movw	r4, r16
    4166:	22 e0       	ldi	r18, 0x02	; 2
    4168:	42 0e       	add	r4, r18
    416a:	51 1c       	adc	r5, r1
    416c:	f8 01       	movw	r30, r16
    416e:	a0 80       	ld	r10, Z
    4170:	b1 80       	ldd	r11, Z+1	; 0x01
    4172:	36 fe       	sbrs	r3, 6
    4174:	03 c0       	rjmp	.+6      	; 0x417c <__stack+0x17d>
    4176:	69 2d       	mov	r22, r9
    4178:	70 e0       	ldi	r23, 0x00	; 0
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <__stack+0x181>
    417c:	6f ef       	ldi	r22, 0xFF	; 255
    417e:	7f ef       	ldi	r23, 0xFF	; 255
    4180:	c5 01       	movw	r24, r10
    4182:	2a d1       	rcall	.+596    	; 0x43d8 <strnlen_P>
    4184:	4c 01       	movw	r8, r24
    4186:	f3 2d       	mov	r31, r3
    4188:	f0 68       	ori	r31, 0x80	; 128
    418a:	3f 2e       	mov	r3, r31
    418c:	82 01       	movw	r16, r4
    418e:	33 fc       	sbrc	r3, 3
    4190:	19 c0       	rjmp	.+50     	; 0x41c4 <__stack+0x1c5>
    4192:	82 2d       	mov	r24, r2
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	88 16       	cp	r8, r24
    4198:	99 06       	cpc	r9, r25
    419a:	a0 f4       	brcc	.+40     	; 0x41c4 <__stack+0x1c5>
    419c:	b6 01       	movw	r22, r12
    419e:	80 e2       	ldi	r24, 0x20	; 32
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	30 d1       	rcall	.+608    	; 0x4404 <fputc>
    41a4:	2a 94       	dec	r2
    41a6:	f5 cf       	rjmp	.-22     	; 0x4192 <__stack+0x193>
    41a8:	f5 01       	movw	r30, r10
    41aa:	37 fc       	sbrc	r3, 7
    41ac:	85 91       	lpm	r24, Z+
    41ae:	37 fe       	sbrs	r3, 7
    41b0:	81 91       	ld	r24, Z+
    41b2:	5f 01       	movw	r10, r30
    41b4:	b6 01       	movw	r22, r12
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	25 d1       	rcall	.+586    	; 0x4404 <fputc>
    41ba:	21 10       	cpse	r2, r1
    41bc:	2a 94       	dec	r2
    41be:	21 e0       	ldi	r18, 0x01	; 1
    41c0:	82 1a       	sub	r8, r18
    41c2:	91 08       	sbc	r9, r1
    41c4:	81 14       	cp	r8, r1
    41c6:	91 04       	cpc	r9, r1
    41c8:	79 f7       	brne	.-34     	; 0x41a8 <__stack+0x1a9>
    41ca:	e1 c0       	rjmp	.+450    	; 0x438e <__stack+0x38f>
    41cc:	84 36       	cpi	r24, 0x64	; 100
    41ce:	11 f0       	breq	.+4      	; 0x41d4 <__stack+0x1d5>
    41d0:	89 36       	cpi	r24, 0x69	; 105
    41d2:	39 f5       	brne	.+78     	; 0x4222 <__stack+0x223>
    41d4:	f8 01       	movw	r30, r16
    41d6:	37 fe       	sbrs	r3, 7
    41d8:	07 c0       	rjmp	.+14     	; 0x41e8 <__stack+0x1e9>
    41da:	60 81       	ld	r22, Z
    41dc:	71 81       	ldd	r23, Z+1	; 0x01
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	93 81       	ldd	r25, Z+3	; 0x03
    41e2:	0c 5f       	subi	r16, 0xFC	; 252
    41e4:	1f 4f       	sbci	r17, 0xFF	; 255
    41e6:	08 c0       	rjmp	.+16     	; 0x41f8 <__stack+0x1f9>
    41e8:	60 81       	ld	r22, Z
    41ea:	71 81       	ldd	r23, Z+1	; 0x01
    41ec:	07 2e       	mov	r0, r23
    41ee:	00 0c       	add	r0, r0
    41f0:	88 0b       	sbc	r24, r24
    41f2:	99 0b       	sbc	r25, r25
    41f4:	0e 5f       	subi	r16, 0xFE	; 254
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	f3 2d       	mov	r31, r3
    41fa:	ff 76       	andi	r31, 0x6F	; 111
    41fc:	3f 2e       	mov	r3, r31
    41fe:	97 ff       	sbrs	r25, 7
    4200:	09 c0       	rjmp	.+18     	; 0x4214 <__stack+0x215>
    4202:	90 95       	com	r25
    4204:	80 95       	com	r24
    4206:	70 95       	com	r23
    4208:	61 95       	neg	r22
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	8f 4f       	sbci	r24, 0xFF	; 255
    420e:	9f 4f       	sbci	r25, 0xFF	; 255
    4210:	f0 68       	ori	r31, 0x80	; 128
    4212:	3f 2e       	mov	r3, r31
    4214:	2a e0       	ldi	r18, 0x0A	; 10
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	a3 01       	movw	r20, r6
    421a:	30 d1       	rcall	.+608    	; 0x447c <__ultoa_invert>
    421c:	88 2e       	mov	r8, r24
    421e:	86 18       	sub	r8, r6
    4220:	44 c0       	rjmp	.+136    	; 0x42aa <__stack+0x2ab>
    4222:	85 37       	cpi	r24, 0x75	; 117
    4224:	31 f4       	brne	.+12     	; 0x4232 <__stack+0x233>
    4226:	23 2d       	mov	r18, r3
    4228:	2f 7e       	andi	r18, 0xEF	; 239
    422a:	b2 2e       	mov	r11, r18
    422c:	2a e0       	ldi	r18, 0x0A	; 10
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	25 c0       	rjmp	.+74     	; 0x427c <__stack+0x27d>
    4232:	93 2d       	mov	r25, r3
    4234:	99 7f       	andi	r25, 0xF9	; 249
    4236:	b9 2e       	mov	r11, r25
    4238:	8f 36       	cpi	r24, 0x6F	; 111
    423a:	c1 f0       	breq	.+48     	; 0x426c <__stack+0x26d>
    423c:	18 f4       	brcc	.+6      	; 0x4244 <__stack+0x245>
    423e:	88 35       	cpi	r24, 0x58	; 88
    4240:	79 f0       	breq	.+30     	; 0x4260 <__stack+0x261>
    4242:	ae c0       	rjmp	.+348    	; 0x43a0 <__stack+0x3a1>
    4244:	80 37       	cpi	r24, 0x70	; 112
    4246:	19 f0       	breq	.+6      	; 0x424e <__stack+0x24f>
    4248:	88 37       	cpi	r24, 0x78	; 120
    424a:	21 f0       	breq	.+8      	; 0x4254 <__stack+0x255>
    424c:	a9 c0       	rjmp	.+338    	; 0x43a0 <__stack+0x3a1>
    424e:	e9 2f       	mov	r30, r25
    4250:	e0 61       	ori	r30, 0x10	; 16
    4252:	be 2e       	mov	r11, r30
    4254:	b4 fe       	sbrs	r11, 4
    4256:	0d c0       	rjmp	.+26     	; 0x4272 <__stack+0x273>
    4258:	fb 2d       	mov	r31, r11
    425a:	f4 60       	ori	r31, 0x04	; 4
    425c:	bf 2e       	mov	r11, r31
    425e:	09 c0       	rjmp	.+18     	; 0x4272 <__stack+0x273>
    4260:	34 fe       	sbrs	r3, 4
    4262:	0a c0       	rjmp	.+20     	; 0x4278 <__stack+0x279>
    4264:	29 2f       	mov	r18, r25
    4266:	26 60       	ori	r18, 0x06	; 6
    4268:	b2 2e       	mov	r11, r18
    426a:	06 c0       	rjmp	.+12     	; 0x4278 <__stack+0x279>
    426c:	28 e0       	ldi	r18, 0x08	; 8
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	05 c0       	rjmp	.+10     	; 0x427c <__stack+0x27d>
    4272:	20 e1       	ldi	r18, 0x10	; 16
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	02 c0       	rjmp	.+4      	; 0x427c <__stack+0x27d>
    4278:	20 e1       	ldi	r18, 0x10	; 16
    427a:	32 e0       	ldi	r19, 0x02	; 2
    427c:	f8 01       	movw	r30, r16
    427e:	b7 fe       	sbrs	r11, 7
    4280:	07 c0       	rjmp	.+14     	; 0x4290 <__stack+0x291>
    4282:	60 81       	ld	r22, Z
    4284:	71 81       	ldd	r23, Z+1	; 0x01
    4286:	82 81       	ldd	r24, Z+2	; 0x02
    4288:	93 81       	ldd	r25, Z+3	; 0x03
    428a:	0c 5f       	subi	r16, 0xFC	; 252
    428c:	1f 4f       	sbci	r17, 0xFF	; 255
    428e:	06 c0       	rjmp	.+12     	; 0x429c <__stack+0x29d>
    4290:	60 81       	ld	r22, Z
    4292:	71 81       	ldd	r23, Z+1	; 0x01
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	0e 5f       	subi	r16, 0xFE	; 254
    429a:	1f 4f       	sbci	r17, 0xFF	; 255
    429c:	a3 01       	movw	r20, r6
    429e:	ee d0       	rcall	.+476    	; 0x447c <__ultoa_invert>
    42a0:	88 2e       	mov	r8, r24
    42a2:	86 18       	sub	r8, r6
    42a4:	fb 2d       	mov	r31, r11
    42a6:	ff 77       	andi	r31, 0x7F	; 127
    42a8:	3f 2e       	mov	r3, r31
    42aa:	36 fe       	sbrs	r3, 6
    42ac:	0d c0       	rjmp	.+26     	; 0x42c8 <__stack+0x2c9>
    42ae:	23 2d       	mov	r18, r3
    42b0:	2e 7f       	andi	r18, 0xFE	; 254
    42b2:	a2 2e       	mov	r10, r18
    42b4:	89 14       	cp	r8, r9
    42b6:	58 f4       	brcc	.+22     	; 0x42ce <__stack+0x2cf>
    42b8:	34 fe       	sbrs	r3, 4
    42ba:	0b c0       	rjmp	.+22     	; 0x42d2 <__stack+0x2d3>
    42bc:	32 fc       	sbrc	r3, 2
    42be:	09 c0       	rjmp	.+18     	; 0x42d2 <__stack+0x2d3>
    42c0:	83 2d       	mov	r24, r3
    42c2:	8e 7e       	andi	r24, 0xEE	; 238
    42c4:	a8 2e       	mov	r10, r24
    42c6:	05 c0       	rjmp	.+10     	; 0x42d2 <__stack+0x2d3>
    42c8:	b8 2c       	mov	r11, r8
    42ca:	a3 2c       	mov	r10, r3
    42cc:	03 c0       	rjmp	.+6      	; 0x42d4 <__stack+0x2d5>
    42ce:	b8 2c       	mov	r11, r8
    42d0:	01 c0       	rjmp	.+2      	; 0x42d4 <__stack+0x2d5>
    42d2:	b9 2c       	mov	r11, r9
    42d4:	a4 fe       	sbrs	r10, 4
    42d6:	0f c0       	rjmp	.+30     	; 0x42f6 <__stack+0x2f7>
    42d8:	fe 01       	movw	r30, r28
    42da:	e8 0d       	add	r30, r8
    42dc:	f1 1d       	adc	r31, r1
    42de:	80 81       	ld	r24, Z
    42e0:	80 33       	cpi	r24, 0x30	; 48
    42e2:	21 f4       	brne	.+8      	; 0x42ec <__stack+0x2ed>
    42e4:	9a 2d       	mov	r25, r10
    42e6:	99 7e       	andi	r25, 0xE9	; 233
    42e8:	a9 2e       	mov	r10, r25
    42ea:	09 c0       	rjmp	.+18     	; 0x42fe <__stack+0x2ff>
    42ec:	a2 fe       	sbrs	r10, 2
    42ee:	06 c0       	rjmp	.+12     	; 0x42fc <__stack+0x2fd>
    42f0:	b3 94       	inc	r11
    42f2:	b3 94       	inc	r11
    42f4:	04 c0       	rjmp	.+8      	; 0x42fe <__stack+0x2ff>
    42f6:	8a 2d       	mov	r24, r10
    42f8:	86 78       	andi	r24, 0x86	; 134
    42fa:	09 f0       	breq	.+2      	; 0x42fe <__stack+0x2ff>
    42fc:	b3 94       	inc	r11
    42fe:	a3 fc       	sbrc	r10, 3
    4300:	10 c0       	rjmp	.+32     	; 0x4322 <__stack+0x323>
    4302:	a0 fe       	sbrs	r10, 0
    4304:	06 c0       	rjmp	.+12     	; 0x4312 <__stack+0x313>
    4306:	b2 14       	cp	r11, r2
    4308:	80 f4       	brcc	.+32     	; 0x432a <__stack+0x32b>
    430a:	28 0c       	add	r2, r8
    430c:	92 2c       	mov	r9, r2
    430e:	9b 18       	sub	r9, r11
    4310:	0d c0       	rjmp	.+26     	; 0x432c <__stack+0x32d>
    4312:	b2 14       	cp	r11, r2
    4314:	58 f4       	brcc	.+22     	; 0x432c <__stack+0x32d>
    4316:	b6 01       	movw	r22, r12
    4318:	80 e2       	ldi	r24, 0x20	; 32
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	73 d0       	rcall	.+230    	; 0x4404 <fputc>
    431e:	b3 94       	inc	r11
    4320:	f8 cf       	rjmp	.-16     	; 0x4312 <__stack+0x313>
    4322:	b2 14       	cp	r11, r2
    4324:	18 f4       	brcc	.+6      	; 0x432c <__stack+0x32d>
    4326:	2b 18       	sub	r2, r11
    4328:	02 c0       	rjmp	.+4      	; 0x432e <__stack+0x32f>
    432a:	98 2c       	mov	r9, r8
    432c:	21 2c       	mov	r2, r1
    432e:	a4 fe       	sbrs	r10, 4
    4330:	0f c0       	rjmp	.+30     	; 0x4350 <__stack+0x351>
    4332:	b6 01       	movw	r22, r12
    4334:	80 e3       	ldi	r24, 0x30	; 48
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	65 d0       	rcall	.+202    	; 0x4404 <fputc>
    433a:	a2 fe       	sbrs	r10, 2
    433c:	16 c0       	rjmp	.+44     	; 0x436a <__stack+0x36b>
    433e:	a1 fc       	sbrc	r10, 1
    4340:	03 c0       	rjmp	.+6      	; 0x4348 <__stack+0x349>
    4342:	88 e7       	ldi	r24, 0x78	; 120
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	02 c0       	rjmp	.+4      	; 0x434c <__stack+0x34d>
    4348:	88 e5       	ldi	r24, 0x58	; 88
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	b6 01       	movw	r22, r12
    434e:	0c c0       	rjmp	.+24     	; 0x4368 <__stack+0x369>
    4350:	8a 2d       	mov	r24, r10
    4352:	86 78       	andi	r24, 0x86	; 134
    4354:	51 f0       	breq	.+20     	; 0x436a <__stack+0x36b>
    4356:	a1 fe       	sbrs	r10, 1
    4358:	02 c0       	rjmp	.+4      	; 0x435e <__stack+0x35f>
    435a:	8b e2       	ldi	r24, 0x2B	; 43
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <__stack+0x361>
    435e:	80 e2       	ldi	r24, 0x20	; 32
    4360:	a7 fc       	sbrc	r10, 7
    4362:	8d e2       	ldi	r24, 0x2D	; 45
    4364:	b6 01       	movw	r22, r12
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	4d d0       	rcall	.+154    	; 0x4404 <fputc>
    436a:	89 14       	cp	r8, r9
    436c:	30 f4       	brcc	.+12     	; 0x437a <__stack+0x37b>
    436e:	b6 01       	movw	r22, r12
    4370:	80 e3       	ldi	r24, 0x30	; 48
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	47 d0       	rcall	.+142    	; 0x4404 <fputc>
    4376:	9a 94       	dec	r9
    4378:	f8 cf       	rjmp	.-16     	; 0x436a <__stack+0x36b>
    437a:	8a 94       	dec	r8
    437c:	f3 01       	movw	r30, r6
    437e:	e8 0d       	add	r30, r8
    4380:	f1 1d       	adc	r31, r1
    4382:	80 81       	ld	r24, Z
    4384:	b6 01       	movw	r22, r12
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	3d d0       	rcall	.+122    	; 0x4404 <fputc>
    438a:	81 10       	cpse	r8, r1
    438c:	f6 cf       	rjmp	.-20     	; 0x437a <__stack+0x37b>
    438e:	22 20       	and	r2, r2
    4390:	09 f4       	brne	.+2      	; 0x4394 <__stack+0x395>
    4392:	4e ce       	rjmp	.-868    	; 0x4030 <__stack+0x31>
    4394:	b6 01       	movw	r22, r12
    4396:	80 e2       	ldi	r24, 0x20	; 32
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	34 d0       	rcall	.+104    	; 0x4404 <fputc>
    439c:	2a 94       	dec	r2
    439e:	f7 cf       	rjmp	.-18     	; 0x438e <__stack+0x38f>
    43a0:	f6 01       	movw	r30, r12
    43a2:	86 81       	ldd	r24, Z+6	; 0x06
    43a4:	97 81       	ldd	r25, Z+7	; 0x07
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <__stack+0x3ad>
    43a8:	8f ef       	ldi	r24, 0xFF	; 255
    43aa:	9f ef       	ldi	r25, 0xFF	; 255
    43ac:	2b 96       	adiw	r28, 0x0b	; 11
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	df 90       	pop	r13
    43c0:	cf 90       	pop	r12
    43c2:	bf 90       	pop	r11
    43c4:	af 90       	pop	r10
    43c6:	9f 90       	pop	r9
    43c8:	8f 90       	pop	r8
    43ca:	7f 90       	pop	r7
    43cc:	6f 90       	pop	r6
    43ce:	5f 90       	pop	r5
    43d0:	4f 90       	pop	r4
    43d2:	3f 90       	pop	r3
    43d4:	2f 90       	pop	r2
    43d6:	08 95       	ret

000043d8 <strnlen_P>:
    43d8:	fc 01       	movw	r30, r24
    43da:	05 90       	lpm	r0, Z+
    43dc:	61 50       	subi	r22, 0x01	; 1
    43de:	70 40       	sbci	r23, 0x00	; 0
    43e0:	01 10       	cpse	r0, r1
    43e2:	d8 f7       	brcc	.-10     	; 0x43da <strnlen_P+0x2>
    43e4:	80 95       	com	r24
    43e6:	90 95       	com	r25
    43e8:	8e 0f       	add	r24, r30
    43ea:	9f 1f       	adc	r25, r31
    43ec:	08 95       	ret

000043ee <strnlen>:
    43ee:	fc 01       	movw	r30, r24
    43f0:	61 50       	subi	r22, 0x01	; 1
    43f2:	70 40       	sbci	r23, 0x00	; 0
    43f4:	01 90       	ld	r0, Z+
    43f6:	01 10       	cpse	r0, r1
    43f8:	d8 f7       	brcc	.-10     	; 0x43f0 <strnlen+0x2>
    43fa:	80 95       	com	r24
    43fc:	90 95       	com	r25
    43fe:	8e 0f       	add	r24, r30
    4400:	9f 1f       	adc	r25, r31
    4402:	08 95       	ret

00004404 <fputc>:
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	cf 93       	push	r28
    440a:	df 93       	push	r29
    440c:	fb 01       	movw	r30, r22
    440e:	23 81       	ldd	r18, Z+3	; 0x03
    4410:	21 fd       	sbrc	r18, 1
    4412:	03 c0       	rjmp	.+6      	; 0x441a <fputc+0x16>
    4414:	8f ef       	ldi	r24, 0xFF	; 255
    4416:	9f ef       	ldi	r25, 0xFF	; 255
    4418:	2c c0       	rjmp	.+88     	; 0x4472 <fputc+0x6e>
    441a:	22 ff       	sbrs	r18, 2
    441c:	16 c0       	rjmp	.+44     	; 0x444a <fputc+0x46>
    441e:	46 81       	ldd	r20, Z+6	; 0x06
    4420:	57 81       	ldd	r21, Z+7	; 0x07
    4422:	24 81       	ldd	r18, Z+4	; 0x04
    4424:	35 81       	ldd	r19, Z+5	; 0x05
    4426:	42 17       	cp	r20, r18
    4428:	53 07       	cpc	r21, r19
    442a:	44 f4       	brge	.+16     	; 0x443c <fputc+0x38>
    442c:	a0 81       	ld	r26, Z
    442e:	b1 81       	ldd	r27, Z+1	; 0x01
    4430:	9d 01       	movw	r18, r26
    4432:	2f 5f       	subi	r18, 0xFF	; 255
    4434:	3f 4f       	sbci	r19, 0xFF	; 255
    4436:	20 83       	st	Z, r18
    4438:	31 83       	std	Z+1, r19	; 0x01
    443a:	8c 93       	st	X, r24
    443c:	26 81       	ldd	r18, Z+6	; 0x06
    443e:	37 81       	ldd	r19, Z+7	; 0x07
    4440:	2f 5f       	subi	r18, 0xFF	; 255
    4442:	3f 4f       	sbci	r19, 0xFF	; 255
    4444:	26 83       	std	Z+6, r18	; 0x06
    4446:	37 83       	std	Z+7, r19	; 0x07
    4448:	14 c0       	rjmp	.+40     	; 0x4472 <fputc+0x6e>
    444a:	8b 01       	movw	r16, r22
    444c:	ec 01       	movw	r28, r24
    444e:	fb 01       	movw	r30, r22
    4450:	00 84       	ldd	r0, Z+8	; 0x08
    4452:	f1 85       	ldd	r31, Z+9	; 0x09
    4454:	e0 2d       	mov	r30, r0
    4456:	19 95       	eicall
    4458:	89 2b       	or	r24, r25
    445a:	e1 f6       	brne	.-72     	; 0x4414 <fputc+0x10>
    445c:	d8 01       	movw	r26, r16
    445e:	16 96       	adiw	r26, 0x06	; 6
    4460:	8d 91       	ld	r24, X+
    4462:	9c 91       	ld	r25, X
    4464:	17 97       	sbiw	r26, 0x07	; 7
    4466:	01 96       	adiw	r24, 0x01	; 1
    4468:	16 96       	adiw	r26, 0x06	; 6
    446a:	8d 93       	st	X+, r24
    446c:	9c 93       	st	X, r25
    446e:	17 97       	sbiw	r26, 0x07	; 7
    4470:	ce 01       	movw	r24, r28
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	08 95       	ret

0000447c <__ultoa_invert>:
    447c:	fa 01       	movw	r30, r20
    447e:	aa 27       	eor	r26, r26
    4480:	28 30       	cpi	r18, 0x08	; 8
    4482:	51 f1       	breq	.+84     	; 0x44d8 <__ultoa_invert+0x5c>
    4484:	20 31       	cpi	r18, 0x10	; 16
    4486:	81 f1       	breq	.+96     	; 0x44e8 <__ultoa_invert+0x6c>
    4488:	e8 94       	clt
    448a:	6f 93       	push	r22
    448c:	6e 7f       	andi	r22, 0xFE	; 254
    448e:	6e 5f       	subi	r22, 0xFE	; 254
    4490:	7f 4f       	sbci	r23, 0xFF	; 255
    4492:	8f 4f       	sbci	r24, 0xFF	; 255
    4494:	9f 4f       	sbci	r25, 0xFF	; 255
    4496:	af 4f       	sbci	r26, 0xFF	; 255
    4498:	b1 e0       	ldi	r27, 0x01	; 1
    449a:	3e d0       	rcall	.+124    	; 0x4518 <__ultoa_invert+0x9c>
    449c:	b4 e0       	ldi	r27, 0x04	; 4
    449e:	3c d0       	rcall	.+120    	; 0x4518 <__ultoa_invert+0x9c>
    44a0:	67 0f       	add	r22, r23
    44a2:	78 1f       	adc	r23, r24
    44a4:	89 1f       	adc	r24, r25
    44a6:	9a 1f       	adc	r25, r26
    44a8:	a1 1d       	adc	r26, r1
    44aa:	68 0f       	add	r22, r24
    44ac:	79 1f       	adc	r23, r25
    44ae:	8a 1f       	adc	r24, r26
    44b0:	91 1d       	adc	r25, r1
    44b2:	a1 1d       	adc	r26, r1
    44b4:	6a 0f       	add	r22, r26
    44b6:	71 1d       	adc	r23, r1
    44b8:	81 1d       	adc	r24, r1
    44ba:	91 1d       	adc	r25, r1
    44bc:	a1 1d       	adc	r26, r1
    44be:	20 d0       	rcall	.+64     	; 0x4500 <__ultoa_invert+0x84>
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <__ultoa_invert+0x48>
    44c2:	68 94       	set
    44c4:	3f 91       	pop	r19
    44c6:	2a e0       	ldi	r18, 0x0A	; 10
    44c8:	26 9f       	mul	r18, r22
    44ca:	11 24       	eor	r1, r1
    44cc:	30 19       	sub	r19, r0
    44ce:	30 5d       	subi	r19, 0xD0	; 208
    44d0:	31 93       	st	Z+, r19
    44d2:	de f6       	brtc	.-74     	; 0x448a <__ultoa_invert+0xe>
    44d4:	cf 01       	movw	r24, r30
    44d6:	08 95       	ret
    44d8:	46 2f       	mov	r20, r22
    44da:	47 70       	andi	r20, 0x07	; 7
    44dc:	40 5d       	subi	r20, 0xD0	; 208
    44de:	41 93       	st	Z+, r20
    44e0:	b3 e0       	ldi	r27, 0x03	; 3
    44e2:	0f d0       	rcall	.+30     	; 0x4502 <__ultoa_invert+0x86>
    44e4:	c9 f7       	brne	.-14     	; 0x44d8 <__ultoa_invert+0x5c>
    44e6:	f6 cf       	rjmp	.-20     	; 0x44d4 <__ultoa_invert+0x58>
    44e8:	46 2f       	mov	r20, r22
    44ea:	4f 70       	andi	r20, 0x0F	; 15
    44ec:	40 5d       	subi	r20, 0xD0	; 208
    44ee:	4a 33       	cpi	r20, 0x3A	; 58
    44f0:	18 f0       	brcs	.+6      	; 0x44f8 <__ultoa_invert+0x7c>
    44f2:	49 5d       	subi	r20, 0xD9	; 217
    44f4:	31 fd       	sbrc	r19, 1
    44f6:	40 52       	subi	r20, 0x20	; 32
    44f8:	41 93       	st	Z+, r20
    44fa:	02 d0       	rcall	.+4      	; 0x4500 <__ultoa_invert+0x84>
    44fc:	a9 f7       	brne	.-22     	; 0x44e8 <__ultoa_invert+0x6c>
    44fe:	ea cf       	rjmp	.-44     	; 0x44d4 <__ultoa_invert+0x58>
    4500:	b4 e0       	ldi	r27, 0x04	; 4
    4502:	a6 95       	lsr	r26
    4504:	97 95       	ror	r25
    4506:	87 95       	ror	r24
    4508:	77 95       	ror	r23
    450a:	67 95       	ror	r22
    450c:	ba 95       	dec	r27
    450e:	c9 f7       	brne	.-14     	; 0x4502 <__ultoa_invert+0x86>
    4510:	00 97       	sbiw	r24, 0x00	; 0
    4512:	61 05       	cpc	r22, r1
    4514:	71 05       	cpc	r23, r1
    4516:	08 95       	ret
    4518:	9b 01       	movw	r18, r22
    451a:	ac 01       	movw	r20, r24
    451c:	0a 2e       	mov	r0, r26
    451e:	06 94       	lsr	r0
    4520:	57 95       	ror	r21
    4522:	47 95       	ror	r20
    4524:	37 95       	ror	r19
    4526:	27 95       	ror	r18
    4528:	ba 95       	dec	r27
    452a:	c9 f7       	brne	.-14     	; 0x451e <__ultoa_invert+0xa2>
    452c:	62 0f       	add	r22, r18
    452e:	73 1f       	adc	r23, r19
    4530:	84 1f       	adc	r24, r20
    4532:	95 1f       	adc	r25, r21
    4534:	a0 1d       	adc	r26, r0
    4536:	08 95       	ret

00004538 <_exit>:
    4538:	f8 94       	cli

0000453a <__stop_program>:
    453a:	ff cf       	rjmp	.-2      	; 0x453a <__stop_program>
