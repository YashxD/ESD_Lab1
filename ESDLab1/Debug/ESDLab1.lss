
ESDLab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  000029da  00002a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  00802012  00802012  00002a80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c5f7  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004694  00000000  00000000  0000f4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050b3  00000000  00000000  00013b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015f4  00000000  00000000  00018c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002e164  00000000  00000000  0001a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c19  00000000  00000000  00048360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0004cf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a2ca  00000000  00000000  0004d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c1       	rjmp	.+566    	; 0x240 <__bad_interrupt>
       a:	00 00       	nop
       c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c1       	rjmp	.+538    	; 0x240 <__bad_interrupt>
      26:	00 00       	nop
      28:	0b c1       	rjmp	.+534    	; 0x240 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	09 c1       	rjmp	.+530    	; 0x240 <__bad_interrupt>
      2e:	00 00       	nop
      30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c1       	rjmp	.+522    	; 0x240 <__bad_interrupt>
      36:	00 00       	nop
      38:	90 c1       	rjmp	.+800    	; 0x35a <__vector_14>
      3a:	00 00       	nop
      3c:	c6 c1       	rjmp	.+908    	; 0x3ca <__vector_15>
      3e:	00 00       	nop
      40:	fc c1       	rjmp	.+1016   	; 0x43a <__vector_16>
      42:	00 00       	nop
      44:	32 c2       	rjmp	.+1124   	; 0x4aa <__vector_17>
      46:	00 00       	nop
      48:	68 c2       	rjmp	.+1232   	; 0x51a <__vector_18>
      4a:	00 00       	nop
      4c:	9e c2       	rjmp	.+1340   	; 0x58a <__vector_19>
      4e:	00 00       	nop
      50:	d4 c2       	rjmp	.+1448   	; 0x5fa <__vector_20>
      52:	00 00       	nop
      54:	0a c3       	rjmp	.+1556   	; 0x66a <__vector_21>
      56:	00 00       	nop
      58:	40 c3       	rjmp	.+1664   	; 0x6da <__vector_22>
      5a:	00 00       	nop
      5c:	76 c3       	rjmp	.+1772   	; 0x74a <__vector_23>
      5e:	00 00       	nop
      60:	ef c0       	rjmp	.+478    	; 0x240 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__bad_interrupt>
      66:	00 00       	nop
      68:	eb c0       	rjmp	.+470    	; 0x240 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e9 c0       	rjmp	.+466    	; 0x240 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e7 c0       	rjmp	.+462    	; 0x240 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c0       	rjmp	.+458    	; 0x240 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c0       	rjmp	.+454    	; 0x240 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c0       	rjmp	.+450    	; 0x240 <__bad_interrupt>
      7e:	00 00       	nop
      80:	df c0       	rjmp	.+446    	; 0x240 <__bad_interrupt>
      82:	00 00       	nop
      84:	dd c0       	rjmp	.+442    	; 0x240 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c0       	rjmp	.+438    	; 0x240 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c0       	rjmp	.+434    	; 0x240 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c0       	rjmp	.+426    	; 0x240 <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 c0       	rjmp	.+422    	; 0x240 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__vector_39>
      a0:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_40>
      a4:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_41>
      a8:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_42>
      ac:	c9 c0       	rjmp	.+402    	; 0x240 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c7 c0       	rjmp	.+398    	; 0x240 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c5 c0       	rjmp	.+394    	; 0x240 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c0       	rjmp	.+390    	; 0x240 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ae c5       	rjmp	.+2908   	; 0xc1a <__vector_47>
      be:	00 00       	nop
      c0:	e4 c5       	rjmp	.+3016   	; 0xc8a <__vector_48>
      c2:	00 00       	nop
      c4:	1a c6       	rjmp	.+3124   	; 0xcfa <__vector_49>
      c6:	00 00       	nop
      c8:	50 c6       	rjmp	.+3232   	; 0xd6a <__vector_50>
      ca:	00 00       	nop
      cc:	86 c6       	rjmp	.+3340   	; 0xdda <__vector_51>
      ce:	00 00       	nop
      d0:	bc c6       	rjmp	.+3448   	; 0xe4a <__vector_52>
      d2:	00 00       	nop
      d4:	f2 c6       	rjmp	.+3556   	; 0xeba <__vector_53>
      d6:	00 00       	nop
      d8:	28 c7       	rjmp	.+3664   	; 0xf2a <__vector_54>
      da:	00 00       	nop
      dc:	5e c7       	rjmp	.+3772   	; 0xf9a <__vector_55>
      de:	00 00       	nop
      e0:	94 c7       	rjmp	.+3880   	; 0x100a <__vector_56>
      e2:	00 00       	nop
      e4:	ad c0       	rjmp	.+346    	; 0x240 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ab c0       	rjmp	.+342    	; 0x240 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a9 c0       	rjmp	.+338    	; 0x240 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a7 c0       	rjmp	.+334    	; 0x240 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a5 c0       	rjmp	.+330    	; 0x240 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a3 c0       	rjmp	.+326    	; 0x240 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a1 c0       	rjmp	.+322    	; 0x240 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9f c0       	rjmp	.+318    	; 0x240 <__bad_interrupt>
     102:	00 00       	nop
     104:	9d c0       	rjmp	.+314    	; 0x240 <__bad_interrupt>
     106:	00 00       	nop
     108:	9b c0       	rjmp	.+310    	; 0x240 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	99 c0       	rjmp	.+306    	; 0x240 <__bad_interrupt>
     10e:	00 00       	nop
     110:	97 c0       	rjmp	.+302    	; 0x240 <__bad_interrupt>
     112:	00 00       	nop
     114:	95 c0       	rjmp	.+298    	; 0x240 <__bad_interrupt>
     116:	00 00       	nop
     118:	93 c0       	rjmp	.+294    	; 0x240 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_71>
     120:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_72>
     124:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_73>
     128:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_74>
     12c:	89 c0       	rjmp	.+274    	; 0x240 <__bad_interrupt>
     12e:	00 00       	nop
     130:	87 c0       	rjmp	.+270    	; 0x240 <__bad_interrupt>
     132:	00 00       	nop
     134:	42 c3       	rjmp	.+1668   	; 0x7ba <__vector_77>
     136:	00 00       	nop
     138:	78 c3       	rjmp	.+1776   	; 0x82a <__vector_78>
     13a:	00 00       	nop
     13c:	ae c3       	rjmp	.+1884   	; 0x89a <__vector_79>
     13e:	00 00       	nop
     140:	e4 c3       	rjmp	.+1992   	; 0x90a <__vector_80>
     142:	00 00       	nop
     144:	1a c4       	rjmp	.+2100   	; 0x97a <__vector_81>
     146:	00 00       	nop
     148:	50 c4       	rjmp	.+2208   	; 0x9ea <__vector_82>
     14a:	00 00       	nop
     14c:	86 c4       	rjmp	.+2316   	; 0xa5a <__vector_83>
     14e:	00 00       	nop
     150:	bc c4       	rjmp	.+2424   	; 0xaca <__vector_84>
     152:	00 00       	nop
     154:	f2 c4       	rjmp	.+2532   	; 0xb3a <__vector_85>
     156:	00 00       	nop
     158:	28 c5       	rjmp	.+2640   	; 0xbaa <__vector_86>
     15a:	00 00       	nop
     15c:	71 c0       	rjmp	.+226    	; 0x240 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6f c0       	rjmp	.+222    	; 0x240 <__bad_interrupt>
     162:	00 00       	nop
     164:	6d c0       	rjmp	.+218    	; 0x240 <__bad_interrupt>
     166:	00 00       	nop
     168:	6b c0       	rjmp	.+214    	; 0x240 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	69 c0       	rjmp	.+210    	; 0x240 <__bad_interrupt>
     16e:	00 00       	nop
     170:	67 c0       	rjmp	.+206    	; 0x240 <__bad_interrupt>
     172:	00 00       	nop
     174:	65 c0       	rjmp	.+202    	; 0x240 <__bad_interrupt>
     176:	00 00       	nop
     178:	63 c0       	rjmp	.+198    	; 0x240 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	61 c0       	rjmp	.+194    	; 0x240 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5f c0       	rjmp	.+190    	; 0x240 <__bad_interrupt>
     182:	00 00       	nop
     184:	5d c0       	rjmp	.+186    	; 0x240 <__bad_interrupt>
     186:	00 00       	nop
     188:	5b c0       	rjmp	.+182    	; 0x240 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	59 c0       	rjmp	.+178    	; 0x240 <__bad_interrupt>
     18e:	00 00       	nop
     190:	57 c0       	rjmp	.+174    	; 0x240 <__bad_interrupt>
     192:	00 00       	nop
     194:	55 c0       	rjmp	.+170    	; 0x240 <__bad_interrupt>
     196:	00 00       	nop
     198:	53 c0       	rjmp	.+166    	; 0x240 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	51 c0       	rjmp	.+162    	; 0x240 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4f c0       	rjmp	.+158    	; 0x240 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4d c0       	rjmp	.+154    	; 0x240 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4b c0       	rjmp	.+150    	; 0x240 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	49 c0       	rjmp	.+146    	; 0x240 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	64 c7       	rjmp	.+3784   	; 0x107a <__vector_108>
     1b2:	00 00       	nop
     1b4:	9a c7       	rjmp	.+3892   	; 0x10ea <__vector_109>
     1b6:	00 00       	nop
     1b8:	d0 c7       	rjmp	.+4000   	; 0x115a <__vector_110>
     1ba:	00 00       	nop
     1bc:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_111>
     1c0:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_112>
     1c4:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_113>
     1c8:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_114>
     1cc:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_115>
     1d0:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_116>
     1d4:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_117>
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	31 c0       	rjmp	.+98     	; 0x240 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2f c0       	rjmp	.+94     	; 0x240 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2b c0       	rjmp	.+86     	; 0x240 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	29 c0       	rjmp	.+82     	; 0x240 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea ed       	ldi	r30, 0xDA	; 218
     214:	f9 e2       	ldi	r31, 0x29	; 41
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 31       	cpi	r26, 0x12	; 18
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	a2 e1       	ldi	r26, 0x12	; 18
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a2 37       	cpi	r26, 0x72	; 114
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 37 11 	call	0x226e	; 0x226e <main>
     23c:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <_exit>

00000240 <__bad_interrupt>:
     240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     24c:	2f b7       	in	r18, 0x3f	; 63
     24e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     250:	f8 94       	cli
	return flags;
     252:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     254:	28 2f       	mov	r18, r24
     256:	39 2f       	mov	r19, r25
     258:	21 15       	cp	r18, r1
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	38 07       	cpc	r19, r24
     25e:	29 f4       	brne	.+10     	; 0x26a <adc_set_callback+0x28>
		adca_callback = callback;
     260:	60 93 6a 20 	sts	0x206A, r22	; 0x80206a <adca_callback>
     264:	70 93 6b 20 	sts	0x206B, r23	; 0x80206b <adca_callback+0x1>
     268:	07 c0       	rjmp	.+14     	; 0x278 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     26a:	20 34       	cpi	r18, 0x40	; 64
     26c:	32 40       	sbci	r19, 0x02	; 2
     26e:	21 f4       	brne	.+8      	; 0x278 <adc_set_callback+0x36>
		adcb_callback = callback;
     270:	60 93 68 20 	sts	0x2068, r22	; 0x802068 <adcb_callback>
     274:	70 93 69 20 	sts	0x2069, r23	; 0x802069 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     278:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     282:	81 15       	cp	r24, r1
     284:	22 e0       	ldi	r18, 0x02	; 2
     286:	92 07       	cpc	r25, r18
     288:	69 f4       	brne	.+26     	; 0x2a4 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     28a:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <adca_enable_count>
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	98 0f       	add	r25, r24
     292:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <adca_enable_count>
     296:	81 11       	cpse	r24, r1
     298:	14 c0       	rjmp	.+40     	; 0x2c2 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <sysclk_enable_module>
     2a2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2a4:	80 34       	cpi	r24, 0x40	; 64
     2a6:	92 40       	sbci	r25, 0x02	; 2
     2a8:	61 f4       	brne	.+24     	; 0x2c2 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     2aa:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <__data_end>
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	98 0f       	add	r25, r24
     2b2:	90 93 12 20 	sts	0x2012, r25	; 0x802012 <__data_end>
     2b6:	81 11       	cpse	r24, r1
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <sysclk_enable_module>
     2c2:	08 95       	ret

000002c4 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2c4:	81 15       	cp	r24, r1
     2c6:	22 e0       	ldi	r18, 0x02	; 2
     2c8:	92 07       	cpc	r25, r18
     2ca:	61 f4       	brne	.+24     	; 0x2e4 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2cc:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <adca_enable_count>
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <adca_enable_count>
     2d6:	81 11       	cpse	r24, r1
     2d8:	13 c0       	rjmp	.+38     	; 0x300 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0c 94 30 10 	jmp	0x2060	; 0x2060 <sysclk_disable_module>
     2e2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2e4:	80 34       	cpi	r24, 0x40	; 64
     2e6:	92 40       	sbci	r25, 0x02	; 2
     2e8:	59 f4       	brne	.+22     	; 0x300 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2ea:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <__data_end>
     2ee:	81 50       	subi	r24, 0x01	; 1
     2f0:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end>
     2f4:	81 11       	cpse	r24, r1
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2f8:	62 e0       	ldi	r22, 0x02	; 2
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0c 94 30 10 	jmp	0x2060	; 0x2060 <sysclk_disable_module>
     300:	08 95       	ret

00000302 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	1f 92       	push	r1
     30e:	1f 92       	push	r1
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     316:	8f b7       	in	r24, 0x3f	; 63
     318:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     31a:	f8 94       	cli
	return flags;
     31c:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     31e:	c7 01       	movw	r24, r14
     320:	b0 df       	rcall	.-160    	; 0x282 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     322:	f7 01       	movw	r30, r14
     324:	80 81       	ld	r24, Z
     326:	81 60       	ori	r24, 0x01	; 1
     328:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     32a:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     32c:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <sleepmgr_locks+0x1>
     330:	8f 3f       	cpi	r24, 0xFF	; 255
     332:	09 f4       	brne	.+2      	; 0x336 <adc_enable+0x34>
     334:	ff cf       	rjmp	.-2      	; 0x334 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     336:	8f b7       	in	r24, 0x3f	; 63
     338:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     33a:	f8 94       	cli
	return flags;
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     33e:	ec e6       	ldi	r30, 0x6C	; 108
     340:	f0 e2       	ldi	r31, 0x20	; 32
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     348:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	08 b6       	in	r0, 0x38	; 56
     366:	0f 92       	push	r0
     368:	18 be       	out	0x38, r1	; 56
     36a:	09 b6       	in	r0, 0x39	; 57
     36c:	0f 92       	push	r0
     36e:	19 be       	out	0x39, r1	; 57
     370:	0b b6       	in	r0, 0x3b	; 59
     372:	0f 92       	push	r0
     374:	1b be       	out	0x3b, r1	; 59
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     38e:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc0_ovf_callback>
     392:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc0_ovf_callback+0x1>
     396:	30 97       	sbiw	r30, 0x00	; 0
     398:	09 f0       	breq	.+2      	; 0x39c <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     39a:	19 95       	eicall
	}
}
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	7f 91       	pop	r23
     3aa:	6f 91       	pop	r22
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
     3b4:	0f 90       	pop	r0
     3b6:	0b be       	out	0x3b, r0	; 59
     3b8:	0f 90       	pop	r0
     3ba:	09 be       	out	0x39, r0	; 57
     3bc:	0f 90       	pop	r0
     3be:	08 be       	out	0x38, r0	; 56
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	08 b6       	in	r0, 0x38	; 56
     3d6:	0f 92       	push	r0
     3d8:	18 be       	out	0x38, r1	; 56
     3da:	09 b6       	in	r0, 0x39	; 57
     3dc:	0f 92       	push	r0
     3de:	19 be       	out	0x39, r1	; 57
     3e0:	0b b6       	in	r0, 0x3b	; 59
     3e2:	0f 92       	push	r0
     3e4:	1b be       	out	0x3b, r1	; 59
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     3fe:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcc0_err_callback>
     402:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcc0_err_callback+0x1>
     406:	30 97       	sbiw	r30, 0x00	; 0
     408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		tc_tcc0_err_callback();
     40a:	19 95       	eicall
	}
}
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	bf 91       	pop	r27
     412:	af 91       	pop	r26
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	7f 91       	pop	r23
     41a:	6f 91       	pop	r22
     41c:	5f 91       	pop	r21
     41e:	4f 91       	pop	r20
     420:	3f 91       	pop	r19
     422:	2f 91       	pop	r18
     424:	0f 90       	pop	r0
     426:	0b be       	out	0x3b, r0	; 59
     428:	0f 90       	pop	r0
     42a:	09 be       	out	0x39, r0	; 57
     42c:	0f 90       	pop	r0
     42e:	08 be       	out	0x38, r0	; 56
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	08 b6       	in	r0, 0x38	; 56
     446:	0f 92       	push	r0
     448:	18 be       	out	0x38, r1	; 56
     44a:	09 b6       	in	r0, 0x39	; 57
     44c:	0f 92       	push	r0
     44e:	19 be       	out	0x39, r1	; 57
     450:	0b b6       	in	r0, 0x3b	; 59
     452:	0f 92       	push	r0
     454:	1b be       	out	0x3b, r1	; 59
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     46e:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcc0_cca_callback>
     472:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcc0_cca_callback+0x1>
     476:	30 97       	sbiw	r30, 0x00	; 0
     478:	09 f0       	breq	.+2      	; 0x47c <__vector_16+0x42>
		tc_tcc0_cca_callback();
     47a:	19 95       	eicall
	}
}
     47c:	ff 91       	pop	r31
     47e:	ef 91       	pop	r30
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	0f 90       	pop	r0
     496:	0b be       	out	0x3b, r0	; 59
     498:	0f 90       	pop	r0
     49a:	09 be       	out	0x39, r0	; 57
     49c:	0f 90       	pop	r0
     49e:	08 be       	out	0x38, r0	; 56
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	08 b6       	in	r0, 0x38	; 56
     4b6:	0f 92       	push	r0
     4b8:	18 be       	out	0x38, r1	; 56
     4ba:	09 b6       	in	r0, 0x39	; 57
     4bc:	0f 92       	push	r0
     4be:	19 be       	out	0x39, r1	; 57
     4c0:	0b b6       	in	r0, 0x3b	; 59
     4c2:	0f 92       	push	r0
     4c4:	1b be       	out	0x3b, r1	; 59
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     4de:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcc0_ccb_callback>
     4e2:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcc0_ccb_callback+0x1>
     4e6:	30 97       	sbiw	r30, 0x00	; 0
     4e8:	09 f0       	breq	.+2      	; 0x4ec <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     4ea:	19 95       	eicall
	}
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0b be       	out	0x3b, r0	; 59
     508:	0f 90       	pop	r0
     50a:	09 be       	out	0x39, r0	; 57
     50c:	0f 90       	pop	r0
     50e:	08 be       	out	0x38, r0	; 56
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	08 b6       	in	r0, 0x38	; 56
     526:	0f 92       	push	r0
     528:	18 be       	out	0x38, r1	; 56
     52a:	09 b6       	in	r0, 0x39	; 57
     52c:	0f 92       	push	r0
     52e:	19 be       	out	0x39, r1	; 57
     530:	0b b6       	in	r0, 0x3b	; 59
     532:	0f 92       	push	r0
     534:	1b be       	out	0x3b, r1	; 59
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     54e:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcc0_ccc_callback>
     552:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcc0_ccc_callback+0x1>
     556:	30 97       	sbiw	r30, 0x00	; 0
     558:	09 f0       	breq	.+2      	; 0x55c <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     55a:	19 95       	eicall
	}
}
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0b be       	out	0x3b, r0	; 59
     578:	0f 90       	pop	r0
     57a:	09 be       	out	0x39, r0	; 57
     57c:	0f 90       	pop	r0
     57e:	08 be       	out	0x38, r0	; 56
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	08 b6       	in	r0, 0x38	; 56
     596:	0f 92       	push	r0
     598:	18 be       	out	0x38, r1	; 56
     59a:	09 b6       	in	r0, 0x39	; 57
     59c:	0f 92       	push	r0
     59e:	19 be       	out	0x39, r1	; 57
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	1b be       	out	0x3b, r1	; 59
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     5be:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcc0_ccd_callback>
     5c2:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcc0_ccd_callback+0x1>
     5c6:	30 97       	sbiw	r30, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     5ca:	19 95       	eicall
	}
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0b be       	out	0x3b, r0	; 59
     5e8:	0f 90       	pop	r0
     5ea:	09 be       	out	0x39, r0	; 57
     5ec:	0f 90       	pop	r0
     5ee:	08 be       	out	0x38, r0	; 56
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	08 b6       	in	r0, 0x38	; 56
     606:	0f 92       	push	r0
     608:	18 be       	out	0x38, r1	; 56
     60a:	09 b6       	in	r0, 0x39	; 57
     60c:	0f 92       	push	r0
     60e:	19 be       	out	0x39, r1	; 57
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	1b be       	out	0x3b, r1	; 59
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     62e:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcc1_ovf_callback>
     632:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcc1_ovf_callback+0x1>
     636:	30 97       	sbiw	r30, 0x00	; 0
     638:	09 f0       	breq	.+2      	; 0x63c <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     63a:	19 95       	eicall
	}
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0b be       	out	0x3b, r0	; 59
     658:	0f 90       	pop	r0
     65a:	09 be       	out	0x39, r0	; 57
     65c:	0f 90       	pop	r0
     65e:	08 be       	out	0x38, r0	; 56
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	08 b6       	in	r0, 0x38	; 56
     676:	0f 92       	push	r0
     678:	18 be       	out	0x38, r1	; 56
     67a:	09 b6       	in	r0, 0x39	; 57
     67c:	0f 92       	push	r0
     67e:	19 be       	out	0x39, r1	; 57
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	1b be       	out	0x3b, r1	; 59
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     69e:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcc1_err_callback>
     6a2:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcc1_err_callback+0x1>
     6a6:	30 97       	sbiw	r30, 0x00	; 0
     6a8:	09 f0       	breq	.+2      	; 0x6ac <__vector_21+0x42>
		tc_tcc1_err_callback();
     6aa:	19 95       	eicall
	}
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	09 be       	out	0x39, r0	; 57
     6cc:	0f 90       	pop	r0
     6ce:	08 be       	out	0x38, r0	; 56
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	08 b6       	in	r0, 0x38	; 56
     6e6:	0f 92       	push	r0
     6e8:	18 be       	out	0x38, r1	; 56
     6ea:	09 b6       	in	r0, 0x39	; 57
     6ec:	0f 92       	push	r0
     6ee:	19 be       	out	0x39, r1	; 57
     6f0:	0b b6       	in	r0, 0x3b	; 59
     6f2:	0f 92       	push	r0
     6f4:	1b be       	out	0x3b, r1	; 59
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     70e:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcc1_cca_callback>
     712:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcc1_cca_callback+0x1>
     716:	30 97       	sbiw	r30, 0x00	; 0
     718:	09 f0       	breq	.+2      	; 0x71c <__vector_22+0x42>
		tc_tcc1_cca_callback();
     71a:	19 95       	eicall
	}
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0b be       	out	0x3b, r0	; 59
     738:	0f 90       	pop	r0
     73a:	09 be       	out	0x39, r0	; 57
     73c:	0f 90       	pop	r0
     73e:	08 be       	out	0x38, r0	; 56
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	08 b6       	in	r0, 0x38	; 56
     756:	0f 92       	push	r0
     758:	18 be       	out	0x38, r1	; 56
     75a:	09 b6       	in	r0, 0x39	; 57
     75c:	0f 92       	push	r0
     75e:	19 be       	out	0x39, r1	; 57
     760:	0b b6       	in	r0, 0x3b	; 59
     762:	0f 92       	push	r0
     764:	1b be       	out	0x3b, r1	; 59
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     77e:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcc1_ccb_callback>
     782:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcc1_ccb_callback+0x1>
     786:	30 97       	sbiw	r30, 0x00	; 0
     788:	09 f0       	breq	.+2      	; 0x78c <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     78a:	19 95       	eicall
	}
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	08 b6       	in	r0, 0x38	; 56
     7c6:	0f 92       	push	r0
     7c8:	18 be       	out	0x38, r1	; 56
     7ca:	09 b6       	in	r0, 0x39	; 57
     7cc:	0f 92       	push	r0
     7ce:	19 be       	out	0x39, r1	; 57
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	1b be       	out	0x3b, r1	; 59
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     7ee:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd0_ovf_callback>
     7f2:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd0_ovf_callback+0x1>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	09 f0       	breq	.+2      	; 0x7fc <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     7fa:	19 95       	eicall
	}
}
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0b be       	out	0x3b, r0	; 59
     818:	0f 90       	pop	r0
     81a:	09 be       	out	0x39, r0	; 57
     81c:	0f 90       	pop	r0
     81e:	08 be       	out	0x38, r0	; 56
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	08 b6       	in	r0, 0x38	; 56
     836:	0f 92       	push	r0
     838:	18 be       	out	0x38, r1	; 56
     83a:	09 b6       	in	r0, 0x39	; 57
     83c:	0f 92       	push	r0
     83e:	19 be       	out	0x39, r1	; 57
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	1b be       	out	0x3b, r1	; 59
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     85e:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcd0_err_callback>
     862:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcd0_err_callback+0x1>
     866:	30 97       	sbiw	r30, 0x00	; 0
     868:	09 f0       	breq	.+2      	; 0x86c <__vector_78+0x42>
		tc_tcd0_err_callback();
     86a:	19 95       	eicall
	}
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	09 be       	out	0x39, r0	; 57
     88c:	0f 90       	pop	r0
     88e:	08 be       	out	0x38, r0	; 56
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	08 b6       	in	r0, 0x38	; 56
     8a6:	0f 92       	push	r0
     8a8:	18 be       	out	0x38, r1	; 56
     8aa:	09 b6       	in	r0, 0x39	; 57
     8ac:	0f 92       	push	r0
     8ae:	19 be       	out	0x39, r1	; 57
     8b0:	0b b6       	in	r0, 0x3b	; 59
     8b2:	0f 92       	push	r0
     8b4:	1b be       	out	0x3b, r1	; 59
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     8ce:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tcd0_cca_callback>
     8d2:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tcd0_cca_callback+0x1>
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <__vector_79+0x42>
		tc_tcd0_cca_callback();
     8da:	19 95       	eicall
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0b be       	out	0x3b, r0	; 59
     8f8:	0f 90       	pop	r0
     8fa:	09 be       	out	0x39, r0	; 57
     8fc:	0f 90       	pop	r0
     8fe:	08 be       	out	0x38, r0	; 56
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	08 b6       	in	r0, 0x38	; 56
     916:	0f 92       	push	r0
     918:	18 be       	out	0x38, r1	; 56
     91a:	09 b6       	in	r0, 0x39	; 57
     91c:	0f 92       	push	r0
     91e:	19 be       	out	0x39, r1	; 57
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	1b be       	out	0x3b, r1	; 59
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	4f 93       	push	r20
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     93e:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcd0_ccb_callback>
     942:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcd0_ccb_callback+0x1>
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	09 f0       	breq	.+2      	; 0x94c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     94a:	19 95       	eicall
	}
}
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0b be       	out	0x3b, r0	; 59
     968:	0f 90       	pop	r0
     96a:	09 be       	out	0x39, r0	; 57
     96c:	0f 90       	pop	r0
     96e:	08 be       	out	0x38, r0	; 56
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	08 b6       	in	r0, 0x38	; 56
     986:	0f 92       	push	r0
     988:	18 be       	out	0x38, r1	; 56
     98a:	09 b6       	in	r0, 0x39	; 57
     98c:	0f 92       	push	r0
     98e:	19 be       	out	0x39, r1	; 57
     990:	0b b6       	in	r0, 0x3b	; 59
     992:	0f 92       	push	r0
     994:	1b be       	out	0x3b, r1	; 59
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     9ae:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcd0_ccc_callback>
     9b2:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcd0_ccc_callback+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     9ba:	19 95       	eicall
	}
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	09 be       	out	0x39, r0	; 57
     9dc:	0f 90       	pop	r0
     9de:	08 be       	out	0x38, r0	; 56
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	08 b6       	in	r0, 0x38	; 56
     9f6:	0f 92       	push	r0
     9f8:	18 be       	out	0x38, r1	; 56
     9fa:	09 b6       	in	r0, 0x39	; 57
     9fc:	0f 92       	push	r0
     9fe:	19 be       	out	0x39, r1	; 57
     a00:	0b b6       	in	r0, 0x3b	; 59
     a02:	0f 92       	push	r0
     a04:	1b be       	out	0x3b, r1	; 59
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     a1e:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcd0_ccd_callback>
     a22:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcd0_ccd_callback+0x1>
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     a2a:	19 95       	eicall
	}
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	09 be       	out	0x39, r0	; 57
     a4c:	0f 90       	pop	r0
     a4e:	08 be       	out	0x38, r0	; 56
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	08 b6       	in	r0, 0x38	; 56
     a66:	0f 92       	push	r0
     a68:	18 be       	out	0x38, r1	; 56
     a6a:	09 b6       	in	r0, 0x39	; 57
     a6c:	0f 92       	push	r0
     a6e:	19 be       	out	0x39, r1	; 57
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	1b be       	out	0x3b, r1	; 59
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     a8e:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcd1_ovf_callback>
     a92:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcd1_ovf_callback+0x1>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     a9a:	19 95       	eicall
	}
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	09 be       	out	0x39, r0	; 57
     abc:	0f 90       	pop	r0
     abe:	08 be       	out	0x38, r0	; 56
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	08 b6       	in	r0, 0x38	; 56
     ad6:	0f 92       	push	r0
     ad8:	18 be       	out	0x38, r1	; 56
     ada:	09 b6       	in	r0, 0x39	; 57
     adc:	0f 92       	push	r0
     ade:	19 be       	out	0x39, r1	; 57
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	1b be       	out	0x3b, r1	; 59
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     afe:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcd1_err_callback>
     b02:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcd1_err_callback+0x1>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_84+0x42>
		tc_tcd1_err_callback();
     b0a:	19 95       	eicall
	}
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	09 be       	out	0x39, r0	; 57
     b2c:	0f 90       	pop	r0
     b2e:	08 be       	out	0x38, r0	; 56
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	08 b6       	in	r0, 0x38	; 56
     b46:	0f 92       	push	r0
     b48:	18 be       	out	0x38, r1	; 56
     b4a:	09 b6       	in	r0, 0x39	; 57
     b4c:	0f 92       	push	r0
     b4e:	19 be       	out	0x39, r1	; 57
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	1b be       	out	0x3b, r1	; 59
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     b6e:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcd1_cca_callback>
     b72:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcd1_cca_callback+0x1>
     b76:	30 97       	sbiw	r30, 0x00	; 0
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_85+0x42>
		tc_tcd1_cca_callback();
     b7a:	19 95       	eicall
	}
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	09 be       	out	0x39, r0	; 57
     b9c:	0f 90       	pop	r0
     b9e:	08 be       	out	0x38, r0	; 56
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	08 b6       	in	r0, 0x38	; 56
     bb6:	0f 92       	push	r0
     bb8:	18 be       	out	0x38, r1	; 56
     bba:	09 b6       	in	r0, 0x39	; 57
     bbc:	0f 92       	push	r0
     bbe:	19 be       	out	0x39, r1	; 57
     bc0:	0b b6       	in	r0, 0x3b	; 59
     bc2:	0f 92       	push	r0
     bc4:	1b be       	out	0x3b, r1	; 59
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     bde:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcd1_ccb_callback>
     be2:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcd1_ccb_callback+0x1>
     be6:	30 97       	sbiw	r30, 0x00	; 0
     be8:	09 f0       	breq	.+2      	; 0xbec <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     bea:	19 95       	eicall
	}
}
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0b be       	out	0x3b, r0	; 59
     c08:	0f 90       	pop	r0
     c0a:	09 be       	out	0x39, r0	; 57
     c0c:	0f 90       	pop	r0
     c0e:	08 be       	out	0x38, r0	; 56
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	08 b6       	in	r0, 0x38	; 56
     c26:	0f 92       	push	r0
     c28:	18 be       	out	0x38, r1	; 56
     c2a:	09 b6       	in	r0, 0x39	; 57
     c2c:	0f 92       	push	r0
     c2e:	19 be       	out	0x39, r1	; 57
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	1b be       	out	0x3b, r1	; 59
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     c4e:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tce0_ovf_callback>
     c52:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tce0_ovf_callback+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_47+0x42>
		tc_tce0_ovf_callback();
     c5a:	19 95       	eicall
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	09 be       	out	0x39, r0	; 57
     c7c:	0f 90       	pop	r0
     c7e:	08 be       	out	0x38, r0	; 56
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	08 b6       	in	r0, 0x38	; 56
     c96:	0f 92       	push	r0
     c98:	18 be       	out	0x38, r1	; 56
     c9a:	09 b6       	in	r0, 0x39	; 57
     c9c:	0f 92       	push	r0
     c9e:	19 be       	out	0x39, r1	; 57
     ca0:	0b b6       	in	r0, 0x3b	; 59
     ca2:	0f 92       	push	r0
     ca4:	1b be       	out	0x3b, r1	; 59
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     cbe:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tce0_err_callback>
     cc2:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tce0_err_callback+0x1>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	09 f0       	breq	.+2      	; 0xccc <__vector_48+0x42>
		tc_tce0_err_callback();
     cca:	19 95       	eicall
	}
}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     d2e:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tce0_cca_callback>
     d32:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tce0_cca_callback+0x1>
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_49+0x42>
		tc_tce0_cca_callback();
     d3a:	19 95       	eicall
	}
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0b be       	out	0x3b, r0	; 59
     d58:	0f 90       	pop	r0
     d5a:	09 be       	out	0x39, r0	; 57
     d5c:	0f 90       	pop	r0
     d5e:	08 be       	out	0x38, r0	; 56
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	08 b6       	in	r0, 0x38	; 56
     d76:	0f 92       	push	r0
     d78:	18 be       	out	0x38, r1	; 56
     d7a:	09 b6       	in	r0, 0x39	; 57
     d7c:	0f 92       	push	r0
     d7e:	19 be       	out	0x39, r1	; 57
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	1b be       	out	0x3b, r1	; 59
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     d9e:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tce0_ccb_callback>
     da2:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tce0_ccb_callback+0x1>
     da6:	30 97       	sbiw	r30, 0x00	; 0
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_50+0x42>
		tc_tce0_ccb_callback();
     daa:	19 95       	eicall
	}
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	09 be       	out	0x39, r0	; 57
     dcc:	0f 90       	pop	r0
     dce:	08 be       	out	0x38, r0	; 56
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	08 b6       	in	r0, 0x38	; 56
     de6:	0f 92       	push	r0
     de8:	18 be       	out	0x38, r1	; 56
     dea:	09 b6       	in	r0, 0x39	; 57
     dec:	0f 92       	push	r0
     dee:	19 be       	out	0x39, r1	; 57
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	1b be       	out	0x3b, r1	; 59
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     e0e:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tce0_ccc_callback>
     e12:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tce0_ccc_callback+0x1>
     e16:	30 97       	sbiw	r30, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_51+0x42>
		tc_tce0_ccc_callback();
     e1a:	19 95       	eicall
	}
}
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	09 be       	out	0x39, r0	; 57
     e3c:	0f 90       	pop	r0
     e3e:	08 be       	out	0x38, r0	; 56
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	08 b6       	in	r0, 0x38	; 56
     e56:	0f 92       	push	r0
     e58:	18 be       	out	0x38, r1	; 56
     e5a:	09 b6       	in	r0, 0x39	; 57
     e5c:	0f 92       	push	r0
     e5e:	19 be       	out	0x39, r1	; 57
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	1b be       	out	0x3b, r1	; 59
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     e7e:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tce0_ccd_callback>
     e82:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tce0_ccd_callback+0x1>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_52+0x42>
		tc_tce0_ccd_callback();
     e8a:	19 95       	eicall
	}
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	09 be       	out	0x39, r0	; 57
     eac:	0f 90       	pop	r0
     eae:	08 be       	out	0x38, r0	; 56
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	08 b6       	in	r0, 0x38	; 56
     ec6:	0f 92       	push	r0
     ec8:	18 be       	out	0x38, r1	; 56
     eca:	09 b6       	in	r0, 0x39	; 57
     ecc:	0f 92       	push	r0
     ece:	19 be       	out	0x39, r1	; 57
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	1b be       	out	0x3b, r1	; 59
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     eee:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tce1_ovf_callback>
     ef2:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tce1_ovf_callback+0x1>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_53+0x42>
		tc_tce1_ovf_callback();
     efa:	19 95       	eicall
	}
}
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	09 be       	out	0x39, r0	; 57
     f1c:	0f 90       	pop	r0
     f1e:	08 be       	out	0x38, r0	; 56
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	08 b6       	in	r0, 0x38	; 56
     f36:	0f 92       	push	r0
     f38:	18 be       	out	0x38, r1	; 56
     f3a:	09 b6       	in	r0, 0x39	; 57
     f3c:	0f 92       	push	r0
     f3e:	19 be       	out	0x39, r1	; 57
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	1b be       	out	0x3b, r1	; 59
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     f5e:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tce1_err_callback>
     f62:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tce1_err_callback+0x1>
     f66:	30 97       	sbiw	r30, 0x00	; 0
     f68:	09 f0       	breq	.+2      	; 0xf6c <__vector_54+0x42>
		tc_tce1_err_callback();
     f6a:	19 95       	eicall
	}
}
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0b be       	out	0x3b, r0	; 59
     f88:	0f 90       	pop	r0
     f8a:	09 be       	out	0x39, r0	; 57
     f8c:	0f 90       	pop	r0
     f8e:	08 be       	out	0x38, r0	; 56
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	08 b6       	in	r0, 0x38	; 56
     fa6:	0f 92       	push	r0
     fa8:	18 be       	out	0x38, r1	; 56
     faa:	09 b6       	in	r0, 0x39	; 57
     fac:	0f 92       	push	r0
     fae:	19 be       	out	0x39, r1	; 57
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	1b be       	out	0x3b, r1	; 59
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     fce:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tce1_cca_callback>
     fd2:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tce1_cca_callback+0x1>
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_55+0x42>
		tc_tce1_cca_callback();
     fda:	19 95       	eicall
	}
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0b be       	out	0x3b, r0	; 59
     ff8:	0f 90       	pop	r0
     ffa:	09 be       	out	0x39, r0	; 57
     ffc:	0f 90       	pop	r0
     ffe:	08 be       	out	0x38, r0	; 56
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	08 b6       	in	r0, 0x38	; 56
    1016:	0f 92       	push	r0
    1018:	18 be       	out	0x38, r1	; 56
    101a:	09 b6       	in	r0, 0x39	; 57
    101c:	0f 92       	push	r0
    101e:	19 be       	out	0x39, r1	; 57
    1020:	0b b6       	in	r0, 0x3b	; 59
    1022:	0f 92       	push	r0
    1024:	1b be       	out	0x3b, r1	; 59
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    103e:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tce1_ccb_callback>
    1042:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tce1_ccb_callback+0x1>
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    104a:	19 95       	eicall
	}
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	09 be       	out	0x39, r0	; 57
    106c:	0f 90       	pop	r0
    106e:	08 be       	out	0x38, r0	; 56
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	08 b6       	in	r0, 0x38	; 56
    1086:	0f 92       	push	r0
    1088:	18 be       	out	0x38, r1	; 56
    108a:	09 b6       	in	r0, 0x39	; 57
    108c:	0f 92       	push	r0
    108e:	19 be       	out	0x39, r1	; 57
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	1b be       	out	0x3b, r1	; 59
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    10ae:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcf0_ovf_callback>
    10b2:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcf0_ovf_callback+0x1>
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    10ba:	19 95       	eicall
	}
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0b be       	out	0x3b, r0	; 59
    10d8:	0f 90       	pop	r0
    10da:	09 be       	out	0x39, r0	; 57
    10dc:	0f 90       	pop	r0
    10de:	08 be       	out	0x38, r0	; 56
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	08 b6       	in	r0, 0x38	; 56
    10f6:	0f 92       	push	r0
    10f8:	18 be       	out	0x38, r1	; 56
    10fa:	09 b6       	in	r0, 0x39	; 57
    10fc:	0f 92       	push	r0
    10fe:	19 be       	out	0x39, r1	; 57
    1100:	0b b6       	in	r0, 0x3b	; 59
    1102:	0f 92       	push	r0
    1104:	1b be       	out	0x3b, r1	; 59
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    111e:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcf0_err_callback>
    1122:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcf0_err_callback+0x1>
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	09 f0       	breq	.+2      	; 0x112c <__vector_109+0x42>
		tc_tcf0_err_callback();
    112a:	19 95       	eicall
	}
}
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	09 be       	out	0x39, r0	; 57
    114c:	0f 90       	pop	r0
    114e:	08 be       	out	0x38, r0	; 56
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	08 b6       	in	r0, 0x38	; 56
    1166:	0f 92       	push	r0
    1168:	18 be       	out	0x38, r1	; 56
    116a:	09 b6       	in	r0, 0x39	; 57
    116c:	0f 92       	push	r0
    116e:	19 be       	out	0x39, r1	; 57
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	1b be       	out	0x3b, r1	; 59
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    118e:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcf0_cca_callback>
    1192:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcf0_cca_callback+0x1>
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	09 f0       	breq	.+2      	; 0x119c <__vector_110+0x42>
		tc_tcf0_cca_callback();
    119a:	19 95       	eicall
	}
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0b be       	out	0x3b, r0	; 59
    11b8:	0f 90       	pop	r0
    11ba:	09 be       	out	0x39, r0	; 57
    11bc:	0f 90       	pop	r0
    11be:	08 be       	out	0x38, r0	; 56
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	08 b6       	in	r0, 0x38	; 56
    11d6:	0f 92       	push	r0
    11d8:	18 be       	out	0x38, r1	; 56
    11da:	09 b6       	in	r0, 0x39	; 57
    11dc:	0f 92       	push	r0
    11de:	19 be       	out	0x39, r1	; 57
    11e0:	0b b6       	in	r0, 0x3b	; 59
    11e2:	0f 92       	push	r0
    11e4:	1b be       	out	0x3b, r1	; 59
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    11fe:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tcf0_ccb_callback>
    1202:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tcf0_ccb_callback+0x1>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    120a:	19 95       	eicall
	}
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0b be       	out	0x3b, r0	; 59
    1228:	0f 90       	pop	r0
    122a:	09 be       	out	0x39, r0	; 57
    122c:	0f 90       	pop	r0
    122e:	08 be       	out	0x38, r0	; 56
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	08 b6       	in	r0, 0x38	; 56
    1246:	0f 92       	push	r0
    1248:	18 be       	out	0x38, r1	; 56
    124a:	09 b6       	in	r0, 0x39	; 57
    124c:	0f 92       	push	r0
    124e:	19 be       	out	0x39, r1	; 57
    1250:	0b b6       	in	r0, 0x3b	; 59
    1252:	0f 92       	push	r0
    1254:	1b be       	out	0x3b, r1	; 59
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    126e:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tcf0_ccc_callback>
    1272:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tcf0_ccc_callback+0x1>
    1276:	30 97       	sbiw	r30, 0x00	; 0
    1278:	09 f0       	breq	.+2      	; 0x127c <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    127a:	19 95       	eicall
	}
}
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0b be       	out	0x3b, r0	; 59
    1298:	0f 90       	pop	r0
    129a:	09 be       	out	0x39, r0	; 57
    129c:	0f 90       	pop	r0
    129e:	08 be       	out	0x38, r0	; 56
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	08 b6       	in	r0, 0x38	; 56
    12b6:	0f 92       	push	r0
    12b8:	18 be       	out	0x38, r1	; 56
    12ba:	09 b6       	in	r0, 0x39	; 57
    12bc:	0f 92       	push	r0
    12be:	19 be       	out	0x39, r1	; 57
    12c0:	0b b6       	in	r0, 0x3b	; 59
    12c2:	0f 92       	push	r0
    12c4:	1b be       	out	0x3b, r1	; 59
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    12de:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tcf0_ccd_callback>
    12e2:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tcf0_ccd_callback+0x1>
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    12ea:	19 95       	eicall
	}
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0b be       	out	0x3b, r0	; 59
    1308:	0f 90       	pop	r0
    130a:	09 be       	out	0x39, r0	; 57
    130c:	0f 90       	pop	r0
    130e:	08 be       	out	0x38, r0	; 56
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	08 b6       	in	r0, 0x38	; 56
    1326:	0f 92       	push	r0
    1328:	18 be       	out	0x38, r1	; 56
    132a:	09 b6       	in	r0, 0x39	; 57
    132c:	0f 92       	push	r0
    132e:	19 be       	out	0x39, r1	; 57
    1330:	0b b6       	in	r0, 0x3b	; 59
    1332:	0f 92       	push	r0
    1334:	1b be       	out	0x3b, r1	; 59
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    134e:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tcf1_ovf_callback>
    1352:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tcf1_ovf_callback+0x1>
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	09 f0       	breq	.+2      	; 0x135c <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    135a:	19 95       	eicall
	}
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0b be       	out	0x3b, r0	; 59
    1378:	0f 90       	pop	r0
    137a:	09 be       	out	0x39, r0	; 57
    137c:	0f 90       	pop	r0
    137e:	08 be       	out	0x38, r0	; 56
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	08 b6       	in	r0, 0x38	; 56
    1396:	0f 92       	push	r0
    1398:	18 be       	out	0x38, r1	; 56
    139a:	09 b6       	in	r0, 0x39	; 57
    139c:	0f 92       	push	r0
    139e:	19 be       	out	0x39, r1	; 57
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	1b be       	out	0x3b, r1	; 59
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    13be:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tcf1_err_callback>
    13c2:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tcf1_err_callback+0x1>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_115+0x42>
		tc_tcf1_err_callback();
    13ca:	19 95       	eicall
	}
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0b be       	out	0x3b, r0	; 59
    13e8:	0f 90       	pop	r0
    13ea:	09 be       	out	0x39, r0	; 57
    13ec:	0f 90       	pop	r0
    13ee:	08 be       	out	0x38, r0	; 56
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	08 b6       	in	r0, 0x38	; 56
    1406:	0f 92       	push	r0
    1408:	18 be       	out	0x38, r1	; 56
    140a:	09 b6       	in	r0, 0x39	; 57
    140c:	0f 92       	push	r0
    140e:	19 be       	out	0x39, r1	; 57
    1410:	0b b6       	in	r0, 0x3b	; 59
    1412:	0f 92       	push	r0
    1414:	1b be       	out	0x3b, r1	; 59
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    142e:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tcf1_cca_callback>
    1432:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tcf1_cca_callback+0x1>
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_116+0x42>
		tc_tcf1_cca_callback();
    143a:	19 95       	eicall
	}
}
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0b be       	out	0x3b, r0	; 59
    1458:	0f 90       	pop	r0
    145a:	09 be       	out	0x39, r0	; 57
    145c:	0f 90       	pop	r0
    145e:	08 be       	out	0x38, r0	; 56
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	08 b6       	in	r0, 0x38	; 56
    1476:	0f 92       	push	r0
    1478:	18 be       	out	0x38, r1	; 56
    147a:	09 b6       	in	r0, 0x39	; 57
    147c:	0f 92       	push	r0
    147e:	19 be       	out	0x39, r1	; 57
    1480:	0b b6       	in	r0, 0x3b	; 59
    1482:	0f 92       	push	r0
    1484:	1b be       	out	0x3b, r1	; 59
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    149e:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tcf1_ccb_callback>
    14a2:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tcf1_ccb_callback+0x1>
    14a6:	30 97       	sbiw	r30, 0x00	; 0
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    14aa:	19 95       	eicall
	}
}
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0b be       	out	0x3b, r0	; 59
    14c8:	0f 90       	pop	r0
    14ca:	09 be       	out	0x39, r0	; 57
    14cc:	0f 90       	pop	r0
    14ce:	08 be       	out	0x38, r0	; 56
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    14da:	fc 01       	movw	r30, r24
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	95 ff       	sbrs	r25, 5
    14e0:	fd cf       	rjmp	.-6      	; 0x14dc <usart_putchar+0x2>
    14e2:	60 83       	st	Z, r22
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	08 95       	ret

000014ea <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    14ea:	4f 92       	push	r4
    14ec:	5f 92       	push	r5
    14ee:	6f 92       	push	r6
    14f0:	7f 92       	push	r7
    14f2:	8f 92       	push	r8
    14f4:	9f 92       	push	r9
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	7c 01       	movw	r14, r24
    1506:	4a 01       	movw	r8, r20
    1508:	5b 01       	movw	r10, r22
    150a:	28 01       	movw	r4, r16
    150c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    150e:	fc 01       	movw	r30, r24
    1510:	84 81       	ldd	r24, Z+4	; 0x04
    1512:	82 ff       	sbrs	r24, 2
    1514:	16 c0       	rjmp	.+44     	; 0x1542 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1516:	d9 01       	movw	r26, r18
    1518:	c8 01       	movw	r24, r16
    151a:	68 94       	set
    151c:	12 f8       	bld	r1, 2
    151e:	b6 95       	lsr	r27
    1520:	a7 95       	ror	r26
    1522:	97 95       	ror	r25
    1524:	87 95       	ror	r24
    1526:	16 94       	lsr	r1
    1528:	d1 f7       	brne	.-12     	; 0x151e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    152a:	b9 01       	movw	r22, r18
    152c:	a8 01       	movw	r20, r16
    152e:	03 2e       	mov	r0, r19
    1530:	36 e1       	ldi	r19, 0x16	; 22
    1532:	76 95       	lsr	r23
    1534:	67 95       	ror	r22
    1536:	57 95       	ror	r21
    1538:	47 95       	ror	r20
    153a:	3a 95       	dec	r19
    153c:	d1 f7       	brne	.-12     	; 0x1532 <usart_set_baudrate+0x48>
    153e:	30 2d       	mov	r19, r0
    1540:	15 c0       	rjmp	.+42     	; 0x156c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1542:	d9 01       	movw	r26, r18
    1544:	c8 01       	movw	r24, r16
    1546:	68 94       	set
    1548:	13 f8       	bld	r1, 3
    154a:	b6 95       	lsr	r27
    154c:	a7 95       	ror	r26
    154e:	97 95       	ror	r25
    1550:	87 95       	ror	r24
    1552:	16 94       	lsr	r1
    1554:	d1 f7       	brne	.-12     	; 0x154a <usart_set_baudrate+0x60>
		min_rate /= 2;
    1556:	b9 01       	movw	r22, r18
    1558:	a8 01       	movw	r20, r16
    155a:	03 2e       	mov	r0, r19
    155c:	37 e1       	ldi	r19, 0x17	; 23
    155e:	76 95       	lsr	r23
    1560:	67 95       	ror	r22
    1562:	57 95       	ror	r21
    1564:	47 95       	ror	r20
    1566:	3a 95       	dec	r19
    1568:	d1 f7       	brne	.-12     	; 0x155e <usart_set_baudrate+0x74>
    156a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    156c:	88 15       	cp	r24, r8
    156e:	99 05       	cpc	r25, r9
    1570:	aa 05       	cpc	r26, r10
    1572:	bb 05       	cpc	r27, r11
    1574:	08 f4       	brcc	.+2      	; 0x1578 <usart_set_baudrate+0x8e>
    1576:	a2 c0       	rjmp	.+324    	; 0x16bc <usart_set_baudrate+0x1d2>
    1578:	84 16       	cp	r8, r20
    157a:	95 06       	cpc	r9, r21
    157c:	a6 06       	cpc	r10, r22
    157e:	b7 06       	cpc	r11, r23
    1580:	08 f4       	brcc	.+2      	; 0x1584 <usart_set_baudrate+0x9a>
    1582:	9e c0       	rjmp	.+316    	; 0x16c0 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1584:	f7 01       	movw	r30, r14
    1586:	84 81       	ldd	r24, Z+4	; 0x04
    1588:	82 fd       	sbrc	r24, 2
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <usart_set_baudrate+0xaa>
		baud *= 2;
    158c:	88 0c       	add	r8, r8
    158e:	99 1c       	adc	r9, r9
    1590:	aa 1c       	adc	r10, r10
    1592:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1594:	c3 01       	movw	r24, r6
    1596:	b2 01       	movw	r22, r4
    1598:	a5 01       	movw	r20, r10
    159a:	94 01       	movw	r18, r8
    159c:	1c d7       	rcall	.+3640   	; 0x23d6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    159e:	2f 3f       	cpi	r18, 0xFF	; 255
    15a0:	31 05       	cpc	r19, r1
    15a2:	41 05       	cpc	r20, r1
    15a4:	51 05       	cpc	r21, r1
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <usart_set_baudrate+0xc0>
    15a8:	8d c0       	rjmp	.+282    	; 0x16c4 <usart_set_baudrate+0x1da>
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e0       	ldi	r26, 0x00	; 0
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	c9 ef       	ldi	r28, 0xF9	; 249
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <usart_set_baudrate+0xd6>
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	4a 07       	cpc	r20, r26
    15bc:	5b 07       	cpc	r21, r27
    15be:	58 f0       	brcs	.+22     	; 0x15d6 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	aa 1f       	adc	r26, r26
    15c6:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    15c8:	cd 3f       	cpi	r28, 0xFD	; 253
    15ca:	0c f4       	brge	.+2      	; 0x15ce <usart_set_baudrate+0xe4>
			limit |= 1;
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15d0:	c7 30       	cpi	r28, 0x07	; 7
    15d2:	89 f7       	brne	.-30     	; 0x15b6 <usart_set_baudrate+0xcc>
    15d4:	4d c0       	rjmp	.+154    	; 0x1670 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    15d6:	cc 23       	and	r28, r28
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <usart_set_baudrate+0xf2>
    15da:	4a c0       	rjmp	.+148    	; 0x1670 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    15dc:	d5 01       	movw	r26, r10
    15de:	c4 01       	movw	r24, r8
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	aa 1f       	adc	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	aa 1f       	adc	r26, r26
    15ee:	bb 1f       	adc	r27, r27
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	aa 1f       	adc	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	48 1a       	sub	r4, r24
    15fa:	59 0a       	sbc	r5, r25
    15fc:	6a 0a       	sbc	r6, r26
    15fe:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1600:	ce 3f       	cpi	r28, 0xFE	; 254
    1602:	ec f4       	brge	.+58     	; 0x163e <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1604:	8d ef       	ldi	r24, 0xFD	; 253
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	8c 1b       	sub	r24, r28
    160a:	91 09       	sbc	r25, r1
    160c:	c7 fd       	sbrc	r28, 7
    160e:	93 95       	inc	r25
    1610:	04 c0       	rjmp	.+8      	; 0x161a <usart_set_baudrate+0x130>
    1612:	44 0c       	add	r4, r4
    1614:	55 1c       	adc	r5, r5
    1616:	66 1c       	adc	r6, r6
    1618:	77 1c       	adc	r7, r7
    161a:	8a 95       	dec	r24
    161c:	d2 f7       	brpl	.-12     	; 0x1612 <usart_set_baudrate+0x128>
    161e:	d5 01       	movw	r26, r10
    1620:	c4 01       	movw	r24, r8
    1622:	b6 95       	lsr	r27
    1624:	a7 95       	ror	r26
    1626:	97 95       	ror	r25
    1628:	87 95       	ror	r24
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	64 0d       	add	r22, r4
    1630:	75 1d       	adc	r23, r5
    1632:	86 1d       	adc	r24, r6
    1634:	97 1d       	adc	r25, r7
    1636:	a5 01       	movw	r20, r10
    1638:	94 01       	movw	r18, r8
    163a:	cd d6       	rcall	.+3482   	; 0x23d6 <__udivmodsi4>
    163c:	35 c0       	rjmp	.+106    	; 0x16a8 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	8c 0f       	add	r24, r28
    1642:	a5 01       	movw	r20, r10
    1644:	94 01       	movw	r18, r8
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <usart_set_baudrate+0x166>
    1648:	22 0f       	add	r18, r18
    164a:	33 1f       	adc	r19, r19
    164c:	44 1f       	adc	r20, r20
    164e:	55 1f       	adc	r21, r21
    1650:	8a 95       	dec	r24
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    1654:	da 01       	movw	r26, r20
    1656:	c9 01       	movw	r24, r18
    1658:	b6 95       	lsr	r27
    165a:	a7 95       	ror	r26
    165c:	97 95       	ror	r25
    165e:	87 95       	ror	r24
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	64 0d       	add	r22, r4
    1666:	75 1d       	adc	r23, r5
    1668:	86 1d       	adc	r24, r6
    166a:	97 1d       	adc	r25, r7
    166c:	b4 d6       	rcall	.+3432   	; 0x23d6 <__udivmodsi4>
    166e:	1c c0       	rjmp	.+56     	; 0x16a8 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	8c 0f       	add	r24, r28
    1674:	a5 01       	movw	r20, r10
    1676:	94 01       	movw	r18, r8
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <usart_set_baudrate+0x198>
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	44 1f       	adc	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	8a 95       	dec	r24
    1684:	d2 f7       	brpl	.-12     	; 0x167a <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1686:	da 01       	movw	r26, r20
    1688:	c9 01       	movw	r24, r18
    168a:	b6 95       	lsr	r27
    168c:	a7 95       	ror	r26
    168e:	97 95       	ror	r25
    1690:	87 95       	ror	r24
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	64 0d       	add	r22, r4
    1698:	75 1d       	adc	r23, r5
    169a:	86 1d       	adc	r24, r6
    169c:	97 1d       	adc	r25, r7
    169e:	9b d6       	rcall	.+3382   	; 0x23d6 <__udivmodsi4>
    16a0:	21 50       	subi	r18, 0x01	; 1
    16a2:	31 09       	sbc	r19, r1
    16a4:	41 09       	sbc	r20, r1
    16a6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    16a8:	83 2f       	mov	r24, r19
    16aa:	8f 70       	andi	r24, 0x0F	; 15
    16ac:	c2 95       	swap	r28
    16ae:	c0 7f       	andi	r28, 0xF0	; 240
    16b0:	c8 2b       	or	r28, r24
    16b2:	f7 01       	movw	r30, r14
    16b4:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    16b6:	26 83       	std	Z+6, r18	; 0x06

	return true;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	18 c0       	rjmp	.+48     	; 0x16ec <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	16 c0       	rjmp	.+44     	; 0x16ec <usart_set_baudrate+0x202>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    16c4:	d5 01       	movw	r26, r10
    16c6:	c4 01       	movw	r24, r8
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	aa 1f       	adc	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	aa 1f       	adc	r26, r26
    16d6:	bb 1f       	adc	r27, r27
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	aa 1f       	adc	r26, r26
    16de:	bb 1f       	adc	r27, r27
    16e0:	48 1a       	sub	r4, r24
    16e2:	59 0a       	sbc	r5, r25
    16e4:	6a 0a       	sbc	r6, r26
    16e6:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16e8:	c9 ef       	ldi	r28, 0xF9	; 249
    16ea:	8c cf       	rjmp	.-232    	; 0x1604 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	9f 90       	pop	r9
    16fc:	8f 90       	pop	r8
    16fe:	7f 90       	pop	r7
    1700:	6f 90       	pop	r6
    1702:	5f 90       	pop	r5
    1704:	4f 90       	pop	r4
    1706:	08 95       	ret

00001708 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
    1712:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <usart_init_rs232+0x12>
    1718:	36 c1       	rjmp	.+620    	; 0x1986 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    171a:	80 3c       	cpi	r24, 0xC0	; 192
    171c:	91 05       	cpc	r25, r1
    171e:	21 f4       	brne	.+8      	; 0x1728 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1720:	60 e1       	ldi	r22, 0x10	; 16
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	87 d4       	rcall	.+2318   	; 0x2034 <sysclk_enable_module>
    1726:	2f c1       	rjmp	.+606    	; 0x1986 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1728:	c0 34       	cpi	r28, 0x40	; 64
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	d8 07       	cpc	r29, r24
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1730:	68 e0       	ldi	r22, 0x08	; 8
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	7f d4       	rcall	.+2302   	; 0x2034 <sysclk_enable_module>
    1736:	27 c1       	rjmp	.+590    	; 0x1986 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1738:	c1 15       	cp	r28, r1
    173a:	e4 e0       	ldi	r30, 0x04	; 4
    173c:	de 07       	cpc	r29, r30
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	77 d4       	rcall	.+2286   	; 0x2034 <sysclk_enable_module>
    1746:	1f c1       	rjmp	.+574    	; 0x1986 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1748:	c0 38       	cpi	r28, 0x80	; 128
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    174e:	21 f4       	brne	.+8      	; 0x1758 <usart_init_rs232+0x50>
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	6f d4       	rcall	.+2270   	; 0x2034 <sysclk_enable_module>
    1756:	17 c1       	rjmp	.+558    	; 0x1986 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1758:	c1 15       	cp	r28, r1
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    175e:	21 f4       	brne	.+8      	; 0x1768 <usart_init_rs232+0x60>
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	67 d4       	rcall	.+2254   	; 0x2034 <sysclk_enable_module>
    1766:	0f c1       	rjmp	.+542    	; 0x1986 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1768:	c0 38       	cpi	r28, 0x80	; 128
    176a:	e3 e0       	ldi	r30, 0x03	; 3
    176c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    176e:	21 f4       	brne	.+8      	; 0x1778 <usart_init_rs232+0x70>
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	5f d4       	rcall	.+2238   	; 0x2034 <sysclk_enable_module>
    1776:	07 c1       	rjmp	.+526    	; 0x1986 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1778:	c0 39       	cpi	r28, 0x90	; 144
    177a:	f3 e0       	ldi	r31, 0x03	; 3
    177c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    177e:	21 f4       	brne	.+8      	; 0x1788 <usart_init_rs232+0x80>
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	57 d4       	rcall	.+2222   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1786:	ff c0       	rjmp	.+510    	; 0x1986 <usart_init_rs232+0x27e>
    1788:	c1 15       	cp	r28, r1
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    178e:	21 f4       	brne	.+8      	; 0x1798 <usart_init_rs232+0x90>
    1790:	62 e0       	ldi	r22, 0x02	; 2
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	4f d4       	rcall	.+2206   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1796:	f7 c0       	rjmp	.+494    	; 0x1986 <usart_init_rs232+0x27e>
    1798:	c0 34       	cpi	r28, 0x40	; 64
    179a:	e2 e0       	ldi	r30, 0x02	; 2
    179c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    179e:	21 f4       	brne	.+8      	; 0x17a8 <usart_init_rs232+0xa0>
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	47 d4       	rcall	.+2190   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    17a6:	ef c0       	rjmp	.+478    	; 0x1986 <usart_init_rs232+0x27e>
    17a8:	c1 15       	cp	r28, r1
    17aa:	f3 e0       	ldi	r31, 0x03	; 3
    17ac:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <usart_init_rs232+0xb0>
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	3f d4       	rcall	.+2174   	; 0x2034 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    17b6:	e7 c0       	rjmp	.+462    	; 0x1986 <usart_init_rs232+0x27e>
    17b8:	c0 32       	cpi	r28, 0x20	; 32
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    17be:	21 f4       	brne	.+8      	; 0x17c8 <usart_init_rs232+0xc0>
    17c0:	64 e0       	ldi	r22, 0x04	; 4
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	37 d4       	rcall	.+2158   	; 0x2034 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    17c6:	df c0       	rjmp	.+446    	; 0x1986 <usart_init_rs232+0x27e>
    17c8:	c1 15       	cp	r28, r1
    17ca:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    17cc:	de 07       	cpc	r29, r30
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <usart_init_rs232+0xd0>
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	2f d4       	rcall	.+2142   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    17d6:	d7 c0       	rjmp	.+430    	; 0x1986 <usart_init_rs232+0x27e>
    17d8:	c1 15       	cp	r28, r1
    17da:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    17dc:	df 07       	cpc	r29, r31
    17de:	21 f4       	brne	.+8      	; 0x17e8 <usart_init_rs232+0xe0>
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	27 d4       	rcall	.+2126   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    17e6:	cf c0       	rjmp	.+414    	; 0x1986 <usart_init_rs232+0x27e>
    17e8:	c1 15       	cp	r28, r1
    17ea:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    17ec:	d8 07       	cpc	r29, r24
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <usart_init_rs232+0xf0>
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	85 e0       	ldi	r24, 0x05	; 5
    17f4:	1f d4       	rcall	.+2110   	; 0x2034 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    17f6:	c7 c0       	rjmp	.+398    	; 0x1986 <usart_init_rs232+0x27e>
    17f8:	c1 15       	cp	r28, r1
    17fa:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    17fc:	de 07       	cpc	r29, r30
    17fe:	21 f4       	brne	.+8      	; 0x1808 <usart_init_rs232+0x100>
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1804:	17 d4       	rcall	.+2094   	; 0x2034 <sysclk_enable_module>
    1806:	bf c0       	rjmp	.+382    	; 0x1986 <usart_init_rs232+0x27e>
    1808:	c0 34       	cpi	r28, 0x40	; 64
    180a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    180c:	df 07       	cpc	r29, r31
    180e:	21 f4       	brne	.+8      	; 0x1818 <usart_init_rs232+0x110>
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1814:	0f d4       	rcall	.+2078   	; 0x2034 <sysclk_enable_module>
    1816:	b7 c0       	rjmp	.+366    	; 0x1986 <usart_init_rs232+0x27e>
    1818:	c0 34       	cpi	r28, 0x40	; 64
    181a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    181c:	d8 07       	cpc	r29, r24
    181e:	21 f4       	brne	.+8      	; 0x1828 <usart_init_rs232+0x120>
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1824:	07 d4       	rcall	.+2062   	; 0x2034 <sysclk_enable_module>
    1826:	af c0       	rjmp	.+350    	; 0x1986 <usart_init_rs232+0x27e>
    1828:	c0 34       	cpi	r28, 0x40	; 64
    182a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    182c:	de 07       	cpc	r29, r30
    182e:	21 f4       	brne	.+8      	; 0x1838 <usart_init_rs232+0x130>
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1834:	ff d3       	rcall	.+2046   	; 0x2034 <sysclk_enable_module>
    1836:	a7 c0       	rjmp	.+334    	; 0x1986 <usart_init_rs232+0x27e>
    1838:	c0 34       	cpi	r28, 0x40	; 64
    183a:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    183c:	df 07       	cpc	r29, r31
    183e:	21 f4       	brne	.+8      	; 0x1848 <usart_init_rs232+0x140>
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1844:	f7 d3       	rcall	.+2030   	; 0x2034 <sysclk_enable_module>
    1846:	9f c0       	rjmp	.+318    	; 0x1986 <usart_init_rs232+0x27e>
    1848:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    184a:	88 e0       	ldi	r24, 0x08	; 8
    184c:	d8 07       	cpc	r29, r24
    184e:	21 f4       	brne	.+8      	; 0x1858 <usart_init_rs232+0x150>
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1854:	ef d3       	rcall	.+2014   	; 0x2034 <sysclk_enable_module>
    1856:	97 c0       	rjmp	.+302    	; 0x1986 <usart_init_rs232+0x27e>
    1858:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    185a:	e9 e0       	ldi	r30, 0x09	; 9
    185c:	de 07       	cpc	r29, r30
    185e:	21 f4       	brne	.+8      	; 0x1868 <usart_init_rs232+0x160>
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1864:	e7 d3       	rcall	.+1998   	; 0x2034 <sysclk_enable_module>
    1866:	8f c0       	rjmp	.+286    	; 0x1986 <usart_init_rs232+0x27e>
    1868:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    186a:	fa e0       	ldi	r31, 0x0A	; 10
    186c:	df 07       	cpc	r29, r31
    186e:	21 f4       	brne	.+8      	; 0x1878 <usart_init_rs232+0x170>
    1870:	64 e0       	ldi	r22, 0x04	; 4
    1872:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1874:	df d3       	rcall	.+1982   	; 0x2034 <sysclk_enable_module>
    1876:	87 c0       	rjmp	.+270    	; 0x1986 <usart_init_rs232+0x27e>
    1878:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    187a:	8b e0       	ldi	r24, 0x0B	; 11
    187c:	d8 07       	cpc	r29, r24
    187e:	21 f4       	brne	.+8      	; 0x1888 <usart_init_rs232+0x180>
    1880:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	d7 d3       	rcall	.+1966   	; 0x2034 <sysclk_enable_module>
    1886:	7f c0       	rjmp	.+254    	; 0x1986 <usart_init_rs232+0x27e>
    1888:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    188a:	e8 e0       	ldi	r30, 0x08	; 8
    188c:	de 07       	cpc	r29, r30
    188e:	21 f4       	brne	.+8      	; 0x1898 <usart_init_rs232+0x190>
    1890:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	cf d3       	rcall	.+1950   	; 0x2034 <sysclk_enable_module>
    1896:	77 c0       	rjmp	.+238    	; 0x1986 <usart_init_rs232+0x27e>
    1898:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    189a:	f9 e0       	ldi	r31, 0x09	; 9
    189c:	df 07       	cpc	r29, r31
    189e:	21 f4       	brne	.+8      	; 0x18a8 <usart_init_rs232+0x1a0>
    18a0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	c7 d3       	rcall	.+1934   	; 0x2034 <sysclk_enable_module>
    18a6:	6f c0       	rjmp	.+222    	; 0x1986 <usart_init_rs232+0x27e>
    18a8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    18aa:	8a e0       	ldi	r24, 0x0A	; 10
    18ac:	d8 07       	cpc	r29, r24
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <usart_init_rs232+0x1b0>
    18b0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    18b2:	85 e0       	ldi	r24, 0x05	; 5
    18b4:	bf d3       	rcall	.+1918   	; 0x2034 <sysclk_enable_module>
    18b6:	67 c0       	rjmp	.+206    	; 0x1986 <usart_init_rs232+0x27e>
    18b8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    18ba:	eb e0       	ldi	r30, 0x0B	; 11
    18bc:	de 07       	cpc	r29, r30
    18be:	21 f4       	brne	.+8      	; 0x18c8 <usart_init_rs232+0x1c0>
    18c0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	b7 d3       	rcall	.+1902   	; 0x2034 <sysclk_enable_module>
    18c6:	5f c0       	rjmp	.+190    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    18c8:	c0 3a       	cpi	r28, 0xA0	; 160
    18ca:	f8 e0       	ldi	r31, 0x08	; 8
    18cc:	df 07       	cpc	r29, r31
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <usart_init_rs232+0x1d0>
    18d0:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	af d3       	rcall	.+1886   	; 0x2034 <sysclk_enable_module>
    18d6:	57 c0       	rjmp	.+174    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    18d8:	c0 3a       	cpi	r28, 0xA0	; 160
    18da:	89 e0       	ldi	r24, 0x09	; 9
    18dc:	d8 07       	cpc	r29, r24
    18de:	21 f4       	brne	.+8      	; 0x18e8 <usart_init_rs232+0x1e0>
    18e0:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	a7 d3       	rcall	.+1870   	; 0x2034 <sysclk_enable_module>
    18e6:	4f c0       	rjmp	.+158    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    18e8:	c0 3a       	cpi	r28, 0xA0	; 160
    18ea:	ea e0       	ldi	r30, 0x0A	; 10
    18ec:	de 07       	cpc	r29, r30
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <usart_init_rs232+0x1f0>
    18f0:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    18f2:	85 e0       	ldi	r24, 0x05	; 5
    18f4:	9f d3       	rcall	.+1854   	; 0x2034 <sysclk_enable_module>
    18f6:	47 c0       	rjmp	.+142    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    18f8:	c0 3a       	cpi	r28, 0xA0	; 160
    18fa:	fb e0       	ldi	r31, 0x0B	; 11
    18fc:	df 07       	cpc	r29, r31
    18fe:	21 f4       	brne	.+8      	; 0x1908 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1900:	60 e1       	ldi	r22, 0x10	; 16
    1902:	86 e0       	ldi	r24, 0x06	; 6
    1904:	97 d3       	rcall	.+1838   	; 0x2034 <sysclk_enable_module>
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1908:	c0 3b       	cpi	r28, 0xB0	; 176
    190a:	88 e0       	ldi	r24, 0x08	; 8
    190c:	d8 07       	cpc	r29, r24
    190e:	21 f4       	brne	.+8      	; 0x1918 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1910:	60 e2       	ldi	r22, 0x20	; 32
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	8f d3       	rcall	.+1822   	; 0x2034 <sysclk_enable_module>
    1916:	37 c0       	rjmp	.+110    	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1918:	c0 3b       	cpi	r28, 0xB0	; 176
    191a:	e9 e0       	ldi	r30, 0x09	; 9
    191c:	de 07       	cpc	r29, r30
    191e:	21 f4       	brne	.+8      	; 0x1928 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1920:	60 e2       	ldi	r22, 0x20	; 32
    1922:	84 e0       	ldi	r24, 0x04	; 4
    1924:	87 d3       	rcall	.+1806   	; 0x2034 <sysclk_enable_module>
    1926:	2f c0       	rjmp	.+94     	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1928:	c0 3b       	cpi	r28, 0xB0	; 176
    192a:	fa e0       	ldi	r31, 0x0A	; 10
    192c:	df 07       	cpc	r29, r31
    192e:	21 f4       	brne	.+8      	; 0x1938 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1930:	60 e2       	ldi	r22, 0x20	; 32
    1932:	85 e0       	ldi	r24, 0x05	; 5
    1934:	7f d3       	rcall	.+1790   	; 0x2034 <sysclk_enable_module>
    1936:	27 c0       	rjmp	.+78     	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1938:	c0 3b       	cpi	r28, 0xB0	; 176
    193a:	8b e0       	ldi	r24, 0x0B	; 11
    193c:	d8 07       	cpc	r29, r24
    193e:	21 f4       	brne	.+8      	; 0x1948 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1940:	60 e2       	ldi	r22, 0x20	; 32
    1942:	86 e0       	ldi	r24, 0x06	; 6
    1944:	77 d3       	rcall	.+1774   	; 0x2034 <sysclk_enable_module>
    1946:	1f c0       	rjmp	.+62     	; 0x1986 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1948:	c0 38       	cpi	r28, 0x80	; 128
    194a:	e4 e0       	ldi	r30, 0x04	; 4
    194c:	de 07       	cpc	r29, r30
    194e:	21 f4       	brne	.+8      	; 0x1958 <usart_init_rs232+0x250>
    1950:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	6f d3       	rcall	.+1758   	; 0x2034 <sysclk_enable_module>
    1956:	17 c0       	rjmp	.+46     	; 0x1986 <usart_init_rs232+0x27e>
    1958:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    195a:	f4 e0       	ldi	r31, 0x04	; 4
    195c:	df 07       	cpc	r29, r31
    195e:	21 f4       	brne	.+8      	; 0x1968 <usart_init_rs232+0x260>
    1960:	60 e4       	ldi	r22, 0x40	; 64
    1962:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1964:	67 d3       	rcall	.+1742   	; 0x2034 <sysclk_enable_module>
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <usart_init_rs232+0x27e>
    1968:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    196a:	84 e0       	ldi	r24, 0x04	; 4
    196c:	d8 07       	cpc	r29, r24
    196e:	21 f4       	brne	.+8      	; 0x1978 <usart_init_rs232+0x270>
    1970:	60 e4       	ldi	r22, 0x40	; 64
    1972:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1974:	5f d3       	rcall	.+1726   	; 0x2034 <sysclk_enable_module>
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <usart_init_rs232+0x27e>
    1978:	c0 3b       	cpi	r28, 0xB0	; 176
    197a:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    197c:	de 07       	cpc	r29, r30
    197e:	19 f4       	brne	.+6      	; 0x1986 <usart_init_rs232+0x27e>
    1980:	60 e4       	ldi	r22, 0x40	; 64
    1982:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1984:	57 d3       	rcall	.+1710   	; 0x2034 <sysclk_enable_module>
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	f8 01       	movw	r30, r16
    198e:	95 81       	ldd	r25, Z+5	; 0x05
    1990:	84 81       	ldd	r24, Z+4	; 0x04
    1992:	89 2b       	or	r24, r25
    1994:	96 81       	ldd	r25, Z+6	; 0x06
    1996:	91 11       	cpse	r25, r1
    1998:	98 e0       	ldi	r25, 0x08	; 8
    199a:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	f8 01       	movw	r30, r16
    19a0:	40 81       	ld	r20, Z
    19a2:	51 81       	ldd	r21, Z+1	; 0x01
    19a4:	62 81       	ldd	r22, Z+2	; 0x02
    19a6:	73 81       	ldd	r23, Z+3	; 0x03
    19a8:	00 e8       	ldi	r16, 0x80	; 128
    19aa:	14 e8       	ldi	r17, 0x84	; 132
    19ac:	2e e1       	ldi	r18, 0x1E	; 30
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	ce 01       	movw	r24, r28
    19b2:	9b dd       	rcall	.-1226   	; 0x14ea <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	98 60       	ori	r25, 0x08	; 8
    19b8:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	90 61       	ori	r25, 0x10	; 16
    19be:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	08 b6       	in	r0, 0x38	; 56
    19d6:	0f 92       	push	r0
    19d8:	18 be       	out	0x38, r1	; 56
    19da:	09 b6       	in	r0, 0x39	; 57
    19dc:	0f 92       	push	r0
    19de:	19 be       	out	0x39, r1	; 57
    19e0:	0b b6       	in	r0, 0x3b	; 59
    19e2:	0f 92       	push	r0
    19e4:	1b be       	out	0x3b, r1	; 59
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    19fe:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    1a02:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1a06:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <adca_callback>
    1a0a:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <adca_callback+0x1>
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	19 95       	eicall
}
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0b be       	out	0x3b, r0	; 59
    1a32:	0f 90       	pop	r0
    1a34:	09 be       	out	0x39, r0	; 57
    1a36:	0f 90       	pop	r0
    1a38:	08 be       	out	0x38, r0	; 56
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	08 b6       	in	r0, 0x38	; 56
    1a50:	0f 92       	push	r0
    1a52:	18 be       	out	0x38, r1	; 56
    1a54:	09 b6       	in	r0, 0x39	; 57
    1a56:	0f 92       	push	r0
    1a58:	19 be       	out	0x39, r1	; 57
    1a5a:	0b b6       	in	r0, 0x3b	; 59
    1a5c:	0f 92       	push	r0
    1a5e:	1b be       	out	0x3b, r1	; 59
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1a78:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1a7c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1a80:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <adca_callback>
    1a84:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <adca_callback+0x1>
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	92 e0       	ldi	r25, 0x02	; 2
    1a8e:	19 95       	eicall
}
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	09 be       	out	0x39, r0	; 57
    1ab0:	0f 90       	pop	r0
    1ab2:	08 be       	out	0x38, r0	; 56
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 b6       	in	r0, 0x38	; 56
    1aca:	0f 92       	push	r0
    1acc:	18 be       	out	0x38, r1	; 56
    1ace:	09 b6       	in	r0, 0x39	; 57
    1ad0:	0f 92       	push	r0
    1ad2:	19 be       	out	0x39, r1	; 57
    1ad4:	0b b6       	in	r0, 0x3b	; 59
    1ad6:	0f 92       	push	r0
    1ad8:	1b be       	out	0x3b, r1	; 59
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1af2:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    1af6:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    1afa:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <adca_callback>
    1afe:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <adca_callback+0x1>
    1b02:	64 e0       	ldi	r22, 0x04	; 4
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	19 95       	eicall
}
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0b be       	out	0x3b, r0	; 59
    1b26:	0f 90       	pop	r0
    1b28:	09 be       	out	0x39, r0	; 57
    1b2a:	0f 90       	pop	r0
    1b2c:	08 be       	out	0x38, r0	; 56
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	08 b6       	in	r0, 0x38	; 56
    1b44:	0f 92       	push	r0
    1b46:	18 be       	out	0x38, r1	; 56
    1b48:	09 b6       	in	r0, 0x39	; 57
    1b4a:	0f 92       	push	r0
    1b4c:	19 be       	out	0x39, r1	; 57
    1b4e:	0b b6       	in	r0, 0x3b	; 59
    1b50:	0f 92       	push	r0
    1b52:	1b be       	out	0x3b, r1	; 59
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1b6c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1b70:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1b74:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <adca_callback>
    1b78:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <adca_callback+0x1>
    1b7c:	68 e0       	ldi	r22, 0x08	; 8
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	92 e0       	ldi	r25, 0x02	; 2
    1b82:	19 95       	eicall
}
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0b be       	out	0x3b, r0	; 59
    1ba0:	0f 90       	pop	r0
    1ba2:	09 be       	out	0x39, r0	; 57
    1ba4:	0f 90       	pop	r0
    1ba6:	08 be       	out	0x38, r0	; 56
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

00001bb2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1bb2:	1f 92       	push	r1
    1bb4:	0f 92       	push	r0
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	0f 92       	push	r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	08 b6       	in	r0, 0x38	; 56
    1bbe:	0f 92       	push	r0
    1bc0:	18 be       	out	0x38, r1	; 56
    1bc2:	09 b6       	in	r0, 0x39	; 57
    1bc4:	0f 92       	push	r0
    1bc6:	19 be       	out	0x39, r1	; 57
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	1b be       	out	0x3b, r1	; 59
    1bce:	2f 93       	push	r18
    1bd0:	3f 93       	push	r19
    1bd2:	4f 93       	push	r20
    1bd4:	5f 93       	push	r21
    1bd6:	6f 93       	push	r22
    1bd8:	7f 93       	push	r23
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1be6:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1bea:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    1bee:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <adcb_callback>
    1bf2:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <adcb_callback+0x1>
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	80 e4       	ldi	r24, 0x40	; 64
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	19 95       	eicall
}
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	7f 91       	pop	r23
    1c0c:	6f 91       	pop	r22
    1c0e:	5f 91       	pop	r21
    1c10:	4f 91       	pop	r20
    1c12:	3f 91       	pop	r19
    1c14:	2f 91       	pop	r18
    1c16:	0f 90       	pop	r0
    1c18:	0b be       	out	0x3b, r0	; 59
    1c1a:	0f 90       	pop	r0
    1c1c:	09 be       	out	0x39, r0	; 57
    1c1e:	0f 90       	pop	r0
    1c20:	08 be       	out	0x38, r0	; 56
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	08 b6       	in	r0, 0x38	; 56
    1c38:	0f 92       	push	r0
    1c3a:	18 be       	out	0x38, r1	; 56
    1c3c:	09 b6       	in	r0, 0x39	; 57
    1c3e:	0f 92       	push	r0
    1c40:	19 be       	out	0x39, r1	; 57
    1c42:	0b b6       	in	r0, 0x3b	; 59
    1c44:	0f 92       	push	r0
    1c46:	1b be       	out	0x3b, r1	; 59
    1c48:	2f 93       	push	r18
    1c4a:	3f 93       	push	r19
    1c4c:	4f 93       	push	r20
    1c4e:	5f 93       	push	r21
    1c50:	6f 93       	push	r22
    1c52:	7f 93       	push	r23
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	af 93       	push	r26
    1c5a:	bf 93       	push	r27
    1c5c:	ef 93       	push	r30
    1c5e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1c60:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1c64:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1c68:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <adcb_callback>
    1c6c:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <adcb_callback+0x1>
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	80 e4       	ldi	r24, 0x40	; 64
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	19 95       	eicall
}
    1c78:	ff 91       	pop	r31
    1c7a:	ef 91       	pop	r30
    1c7c:	bf 91       	pop	r27
    1c7e:	af 91       	pop	r26
    1c80:	9f 91       	pop	r25
    1c82:	8f 91       	pop	r24
    1c84:	7f 91       	pop	r23
    1c86:	6f 91       	pop	r22
    1c88:	5f 91       	pop	r21
    1c8a:	4f 91       	pop	r20
    1c8c:	3f 91       	pop	r19
    1c8e:	2f 91       	pop	r18
    1c90:	0f 90       	pop	r0
    1c92:	0b be       	out	0x3b, r0	; 59
    1c94:	0f 90       	pop	r0
    1c96:	09 be       	out	0x39, r0	; 57
    1c98:	0f 90       	pop	r0
    1c9a:	08 be       	out	0x38, r0	; 56
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	08 b6       	in	r0, 0x38	; 56
    1cb2:	0f 92       	push	r0
    1cb4:	18 be       	out	0x38, r1	; 56
    1cb6:	09 b6       	in	r0, 0x39	; 57
    1cb8:	0f 92       	push	r0
    1cba:	19 be       	out	0x39, r1	; 57
    1cbc:	0b b6       	in	r0, 0x3b	; 59
    1cbe:	0f 92       	push	r0
    1cc0:	1b be       	out	0x3b, r1	; 59
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1cda:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1cde:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1ce2:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <adcb_callback>
    1ce6:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <adcb_callback+0x1>
    1cea:	64 e0       	ldi	r22, 0x04	; 4
    1cec:	80 e4       	ldi	r24, 0x40	; 64
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	19 95       	eicall
}
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0b be       	out	0x3b, r0	; 59
    1d0e:	0f 90       	pop	r0
    1d10:	09 be       	out	0x39, r0	; 57
    1d12:	0f 90       	pop	r0
    1d14:	08 be       	out	0x38, r0	; 56
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	08 b6       	in	r0, 0x38	; 56
    1d2c:	0f 92       	push	r0
    1d2e:	18 be       	out	0x38, r1	; 56
    1d30:	09 b6       	in	r0, 0x39	; 57
    1d32:	0f 92       	push	r0
    1d34:	19 be       	out	0x39, r1	; 57
    1d36:	0b b6       	in	r0, 0x3b	; 59
    1d38:	0f 92       	push	r0
    1d3a:	1b be       	out	0x3b, r1	; 59
    1d3c:	2f 93       	push	r18
    1d3e:	3f 93       	push	r19
    1d40:	4f 93       	push	r20
    1d42:	5f 93       	push	r21
    1d44:	6f 93       	push	r22
    1d46:	7f 93       	push	r23
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
    1d4c:	af 93       	push	r26
    1d4e:	bf 93       	push	r27
    1d50:	ef 93       	push	r30
    1d52:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1d54:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1d58:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1d5c:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <adcb_callback>
    1d60:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <adcb_callback+0x1>
    1d64:	68 e0       	ldi	r22, 0x08	; 8
    1d66:	80 e4       	ldi	r24, 0x40	; 64
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	19 95       	eicall
}
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	9f 91       	pop	r25
    1d76:	8f 91       	pop	r24
    1d78:	7f 91       	pop	r23
    1d7a:	6f 91       	pop	r22
    1d7c:	5f 91       	pop	r21
    1d7e:	4f 91       	pop	r20
    1d80:	3f 91       	pop	r19
    1d82:	2f 91       	pop	r18
    1d84:	0f 90       	pop	r0
    1d86:	0b be       	out	0x3b, r0	; 59
    1d88:	0f 90       	pop	r0
    1d8a:	09 be       	out	0x39, r0	; 57
    1d8c:	0f 90       	pop	r0
    1d8e:	08 be       	out	0x38, r0	; 56
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	0f 90       	pop	r0
    1d96:	1f 90       	pop	r1
    1d98:	18 95       	reti

00001d9a <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	1f 92       	push	r1
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	8c 01       	movw	r16, r24
    1db4:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1db6:	81 15       	cp	r24, r1
    1db8:	22 e0       	ldi	r18, 0x02	; 2
    1dba:	92 07       	cpc	r25, r18
    1dbc:	71 f4       	brne	.+28     	; 0x1dda <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1dbe:	61 e2       	ldi	r22, 0x21	; 33
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	62 d1       	rcall	.+708    	; 0x208a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1dc6:	c8 2e       	mov	r12, r24
    1dc8:	d1 2c       	mov	r13, r1
    1dca:	60 e2       	ldi	r22, 0x20	; 32
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	5c d1       	rcall	.+696    	; 0x208a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    1dd2:	dc 2c       	mov	r13, r12
    1dd4:	cc 24       	eor	r12, r12
    1dd6:	c8 2a       	or	r12, r24
    1dd8:	10 c0       	rjmp	.+32     	; 0x1dfa <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1dda:	80 34       	cpi	r24, 0x40	; 64
    1ddc:	92 40       	sbci	r25, 0x02	; 2
    1dde:	d1 f5       	brne	.+116    	; 0x1e54 <adc_write_configuration+0xba>
    1de0:	65 e2       	ldi	r22, 0x25	; 37
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	51 d1       	rcall	.+674    	; 0x208a <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1de8:	c8 2e       	mov	r12, r24
    1dea:	d1 2c       	mov	r13, r1
    1dec:	64 e2       	ldi	r22, 0x24	; 36
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	4b d1       	rcall	.+662    	; 0x208a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1df4:	dc 2c       	mov	r13, r12
    1df6:	cc 24       	eor	r12, r12
    1df8:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1dfa:	8f b7       	in	r24, 0x3f	; 63
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1dfe:	f8 94       	cli
	return flags;
    1e00:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1e02:	c8 01       	movw	r24, r16
    1e04:	0e 94 41 01 	call	0x282	; 0x282 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1e08:	f8 01       	movw	r30, r16
    1e0a:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	90 83       	st	Z, r25
	adc->CAL = cal;
    1e10:	c4 86       	std	Z+12, r12	; 0x0c
    1e12:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1e14:	f7 01       	movw	r30, r14
    1e16:	25 81       	ldd	r18, Z+5	; 0x05
    1e18:	36 81       	ldd	r19, Z+6	; 0x06
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	20 8f       	std	Z+24, r18	; 0x18
    1e1e:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1e20:	f7 01       	movw	r30, r14
    1e22:	92 81       	ldd	r25, Z+2	; 0x02
    1e24:	f8 01       	movw	r30, r16
    1e26:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1e28:	f7 01       	movw	r30, r14
    1e2a:	94 81       	ldd	r25, Z+4	; 0x04
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1e30:	f7 01       	movw	r30, r14
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	f8 01       	movw	r30, r16
    1e36:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1e38:	f7 01       	movw	r30, r14
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1e40:	81 70       	andi	r24, 0x01	; 1
    1e42:	f7 01       	movw	r30, r14
    1e44:	90 81       	ld	r25, Z
    1e46:	89 2b       	or	r24, r25
    1e48:	f8 01       	movw	r30, r16
    1e4a:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e52:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	08 95       	ret

00001e6a <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	1f 92       	push	r1
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	8c 01       	movw	r16, r24
    1e80:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e82:	8f b7       	in	r24, 0x3f	; 63
    1e84:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1e86:	f8 94       	cli
	return flags;
    1e88:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 41 01 	call	0x282	; 0x282 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1e90:	f8 01       	movw	r30, r16
    1e92:	80 81       	ld	r24, Z
    1e94:	80 7c       	andi	r24, 0xC0	; 192
    1e96:	f7 01       	movw	r30, r14
    1e98:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 8d       	ldd	r24, Z+24	; 0x18
    1e9e:	91 8d       	ldd	r25, Z+25	; 0x19
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	85 83       	std	Z+5, r24	; 0x05
    1ea4:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	f7 01       	movw	r30, r14
    1eac:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1eae:	f8 01       	movw	r30, r16
    1eb0:	84 81       	ldd	r24, Z+4	; 0x04
    1eb2:	f7 01       	movw	r30, r14
    1eb4:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	83 81       	ldd	r24, Z+3	; 0x03
    1eba:	f7 01       	movw	r30, r14
    1ebc:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	81 81       	ldd	r24, Z+1	; 0x01
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ecc:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1ece:	0f 90       	pop	r0
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	08 95       	ret

00001ee0 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	1f 92       	push	r1
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	6c 01       	movw	r12, r24
    1efc:	b6 2e       	mov	r11, r22
    1efe:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1f00:	86 2f       	mov	r24, r22
    1f02:	83 70       	andi	r24, 0x03	; 3
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1f06:	96 2f       	mov	r25, r22
    1f08:	96 95       	lsr	r25
    1f0a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1f10:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1f14:	90 ff       	sbrs	r25, 0
		index++;
    1f16:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1f18:	86 01       	movw	r16, r12
    1f1a:	00 5e       	subi	r16, 0xE0	; 224
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	98 e0       	ldi	r25, 0x08	; 8
    1f20:	89 9f       	mul	r24, r25
    1f22:	00 0d       	add	r16, r0
    1f24:	11 1d       	adc	r17, r1
    1f26:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f28:	8f b7       	in	r24, 0x3f	; 63
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1f2c:	f8 94       	cli
	return flags;
    1f2e:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 41 01 	call	0x282	; 0x282 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1f36:	f7 01       	movw	r30, r14
    1f38:	80 81       	ld	r24, Z
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1f3e:	f7 01       	movw	r30, r14
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	f8 01       	movw	r30, r16
    1f44:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1f46:	f7 01       	movw	r30, r14
    1f48:	81 81       	ldd	r24, Z+1	; 0x01
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1f4e:	b0 fe       	sbrs	r11, 0
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1f52:	f7 01       	movw	r30, r14
    1f54:	83 81       	ldd	r24, Z+3	; 0x03
    1f56:	f8 01       	movw	r30, r16
    1f58:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1f5a:	c6 01       	movw	r24, r12
    1f5c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f60:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1f62:	0f 90       	pop	r0
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	08 95       	ret

00001f7a <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	1f 92       	push	r1
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	6c 01       	movw	r12, r24
    1f96:	b6 2e       	mov	r11, r22
    1f98:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1f9a:	86 2f       	mov	r24, r22
    1f9c:	83 70       	andi	r24, 0x03	; 3
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1fa0:	96 2f       	mov	r25, r22
    1fa2:	96 95       	lsr	r25
    1fa4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1faa:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1fac:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1fae:	90 ff       	sbrs	r25, 0
		index++;
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1fb2:	86 01       	movw	r16, r12
    1fb4:	00 5e       	subi	r16, 0xE0	; 224
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	98 e0       	ldi	r25, 0x08	; 8
    1fba:	89 9f       	mul	r24, r25
    1fbc:	00 0d       	add	r16, r0
    1fbe:	11 1d       	adc	r17, r1
    1fc0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fc2:	8f b7       	in	r24, 0x3f	; 63
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fc6:	f8 94       	cli
	return flags;
    1fc8:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1fca:	c6 01       	movw	r24, r12
    1fcc:	0e 94 41 01 	call	0x282	; 0x282 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	80 81       	ld	r24, Z
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1fd8:	f8 01       	movw	r30, r16
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	f7 01       	movw	r30, r14
    1fde:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	81 81       	ldd	r24, Z+1	; 0x01
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1fe8:	b0 fe       	sbrs	r11, 0
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1fec:	f8 01       	movw	r30, r16
    1fee:	86 81       	ldd	r24, Z+6	; 0x06
    1ff0:	f7 01       	movw	r30, r14
    1ff2:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1ff4:	c6 01       	movw	r24, r12
    1ff6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ffa:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1ffc:	0f 90       	pop	r0
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    2012:	08 95       	ret

00002014 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    201a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    201e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2022:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2026:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    202a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    202e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2032:	08 95       	ret

00002034 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	1f 92       	push	r1
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    203e:	9f b7       	in	r25, 0x3f	; 63
    2040:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2042:	f8 94       	cli
	return flags;
    2044:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2046:	e8 2f       	mov	r30, r24
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	e0 59       	subi	r30, 0x90	; 144
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 95       	com	r22
    2050:	80 81       	ld	r24, Z
    2052:	68 23       	and	r22, r24
    2054:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2056:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	1f 92       	push	r1
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    206a:	9f b7       	in	r25, 0x3f	; 63
    206c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    206e:	f8 94       	cli
	return flags;
    2070:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2072:	e8 2f       	mov	r30, r24
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	e0 59       	subi	r30, 0x90	; 144
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	68 2b       	or	r22, r24
    207e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2080:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2082:	0f 90       	pop	r0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    208a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    208e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2090:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2092:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2096:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2098:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    209c:	08 95       	ret

0000209e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    20a8:	c6 2f       	mov	r28, r22
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
    20ac:	de 01       	movw	r26, r28
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <ioport_configure_port_pin+0x18>
    20b2:	b5 95       	asr	r27
    20b4:	a7 95       	ror	r26
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <ioport_configure_port_pin+0x14>
    20ba:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20bc:	50 8b       	std	Z+16, r21	; 0x10
    20be:	2f 5f       	subi	r18, 0xFF	; 255
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    20c4:	28 30       	cpi	r18, 0x08	; 8
    20c6:	31 05       	cpc	r19, r1
    20c8:	89 f7       	brne	.-30     	; 0x20ac <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    20ca:	40 ff       	sbrs	r20, 0
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    20ce:	41 ff       	sbrs	r20, 1
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    20d2:	fc 01       	movw	r30, r24
    20d4:	65 83       	std	Z+5, r22	; 0x05
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    20d8:	fc 01       	movw	r30, r24
    20da:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    20dc:	fc 01       	movw	r30, r24
    20de:	61 83       	std	Z+1, r22	; 0x01
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    20e2:	fc 01       	movw	r30, r24
    20e4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	08 95       	ret

000020ec <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	80 e8       	ldi	r24, 0x80	; 128
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	d3 df       	rcall	.-90     	; 0x209e <ioport_configure_port_pin>
    20f8:	43 e0       	ldi	r20, 0x03	; 3
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	62 e0       	ldi	r22, 0x02	; 2
    20fe:	80 e8       	ldi	r24, 0x80	; 128
    2100:	96 e0       	ldi	r25, 0x06	; 6
    2102:	cd df       	rcall	.-102    	; 0x209e <ioport_configure_port_pin>
    2104:	43 e0       	ldi	r20, 0x03	; 3
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	96 e0       	ldi	r25, 0x06	; 6
    210e:	c7 df       	rcall	.-114    	; 0x209e <ioport_configure_port_pin>
    2110:	43 e0       	ldi	r20, 0x03	; 3
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	68 e0       	ldi	r22, 0x08	; 8
    2116:	80 e8       	ldi	r24, 0x80	; 128
    2118:	96 e0       	ldi	r25, 0x06	; 6
    211a:	c1 df       	rcall	.-126    	; 0x209e <ioport_configure_port_pin>
    211c:	43 e0       	ldi	r20, 0x03	; 3
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	60 e1       	ldi	r22, 0x10	; 16
    2122:	80 e8       	ldi	r24, 0x80	; 128
    2124:	96 e0       	ldi	r25, 0x06	; 6
    2126:	bb df       	rcall	.-138    	; 0x209e <ioport_configure_port_pin>
    2128:	43 e0       	ldi	r20, 0x03	; 3
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	60 e2       	ldi	r22, 0x20	; 32
    212e:	80 e8       	ldi	r24, 0x80	; 128
    2130:	96 e0       	ldi	r25, 0x06	; 6
    2132:	b5 df       	rcall	.-150    	; 0x209e <ioport_configure_port_pin>
    2134:	43 e0       	ldi	r20, 0x03	; 3
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	60 e4       	ldi	r22, 0x40	; 64
    213a:	80 e8       	ldi	r24, 0x80	; 128
    213c:	96 e0       	ldi	r25, 0x06	; 6
    213e:	af df       	rcall	.-162    	; 0x209e <ioport_configure_port_pin>
    2140:	43 e0       	ldi	r20, 0x03	; 3
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	60 e8       	ldi	r22, 0x80	; 128
    2146:	80 e8       	ldi	r24, 0x80	; 128
    2148:	96 e0       	ldi	r25, 0x06	; 6
    214a:	a9 df       	rcall	.-174    	; 0x209e <ioport_configure_port_pin>
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	58 e1       	ldi	r21, 0x18	; 24
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	80 e6       	ldi	r24, 0x60	; 96
    2154:	96 e0       	ldi	r25, 0x06	; 6
    2156:	a3 df       	rcall	.-186    	; 0x209e <ioport_configure_port_pin>
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	58 e1       	ldi	r21, 0x18	; 24
    215c:	62 e0       	ldi	r22, 0x02	; 2
    215e:	80 e6       	ldi	r24, 0x60	; 96
    2160:	96 e0       	ldi	r25, 0x06	; 6
    2162:	9d df       	rcall	.-198    	; 0x209e <ioport_configure_port_pin>
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	58 e1       	ldi	r21, 0x18	; 24
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	80 e6       	ldi	r24, 0x60	; 96
    216c:	96 e0       	ldi	r25, 0x06	; 6
    216e:	97 df       	rcall	.-210    	; 0x209e <ioport_configure_port_pin>
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	58 e1       	ldi	r21, 0x18	; 24
    2174:	68 e0       	ldi	r22, 0x08	; 8
    2176:	80 e6       	ldi	r24, 0x60	; 96
    2178:	96 e0       	ldi	r25, 0x06	; 6
    217a:	91 df       	rcall	.-222    	; 0x209e <ioport_configure_port_pin>
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	58 e1       	ldi	r21, 0x18	; 24
    2180:	60 e1       	ldi	r22, 0x10	; 16
    2182:	80 e6       	ldi	r24, 0x60	; 96
    2184:	96 e0       	ldi	r25, 0x06	; 6
    2186:	8b df       	rcall	.-234    	; 0x209e <ioport_configure_port_pin>
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	58 e1       	ldi	r21, 0x18	; 24
    218c:	60 e2       	ldi	r22, 0x20	; 32
    218e:	80 e6       	ldi	r24, 0x60	; 96
    2190:	96 e0       	ldi	r25, 0x06	; 6
    2192:	85 df       	rcall	.-246    	; 0x209e <ioport_configure_port_pin>
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	58 e1       	ldi	r21, 0x18	; 24
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	80 ee       	ldi	r24, 0xE0	; 224
    219c:	97 e0       	ldi	r25, 0x07	; 7
    219e:	7f df       	rcall	.-258    	; 0x209e <ioport_configure_port_pin>
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	58 e1       	ldi	r21, 0x18	; 24
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	80 ee       	ldi	r24, 0xE0	; 224
    21a8:	97 e0       	ldi	r25, 0x07	; 7
    21aa:	79 df       	rcall	.-270    	; 0x209e <ioport_configure_port_pin>
    21ac:	43 e0       	ldi	r20, 0x03	; 3
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	60 e8       	ldi	r22, 0x80	; 128
    21b2:	80 e4       	ldi	r24, 0x40	; 64
    21b4:	96 e0       	ldi	r25, 0x06	; 6
    21b6:	73 df       	rcall	.-282    	; 0x209e <ioport_configure_port_pin>
    21b8:	43 e0       	ldi	r20, 0x03	; 3
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	60 e2       	ldi	r22, 0x20	; 32
    21be:	80 e4       	ldi	r24, 0x40	; 64
    21c0:	96 e0       	ldi	r25, 0x06	; 6
    21c2:	6d df       	rcall	.-294    	; 0x209e <ioport_configure_port_pin>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	60 e4       	ldi	r22, 0x40	; 64
    21ca:	80 e4       	ldi	r24, 0x40	; 64
    21cc:	96 e0       	ldi	r25, 0x06	; 6
    21ce:	67 df       	rcall	.-306    	; 0x209e <ioport_configure_port_pin>
    21d0:	43 e0       	ldi	r20, 0x03	; 3
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	68 e0       	ldi	r22, 0x08	; 8
    21d6:	80 ec       	ldi	r24, 0xC0	; 192
    21d8:	97 e0       	ldi	r25, 0x07	; 7
    21da:	61 df       	rcall	.-318    	; 0x209e <ioport_configure_port_pin>
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	96 e0       	ldi	r25, 0x06	; 6
    21e6:	5b df       	rcall	.-330    	; 0x209e <ioport_configure_port_pin>
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	64 e0       	ldi	r22, 0x04	; 4
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	96 e0       	ldi	r25, 0x06	; 6
    21f2:	55 df       	rcall	.-342    	; 0x209e <ioport_configure_port_pin>
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	62 e0       	ldi	r22, 0x02	; 2
    21fa:	80 e2       	ldi	r24, 0x20	; 32
    21fc:	96 e0       	ldi	r25, 0x06	; 6
    21fe:	4f df       	rcall	.-354    	; 0x209e <ioport_configure_port_pin>
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	57 e0       	ldi	r21, 0x07	; 7
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	96 e0       	ldi	r25, 0x06	; 6
    220a:	49 df       	rcall	.-366    	; 0x209e <ioport_configure_port_pin>
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	57 e0       	ldi	r21, 0x07	; 7
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	80 e2       	ldi	r24, 0x20	; 32
    2214:	96 e0       	ldi	r25, 0x06	; 6
    2216:	43 df       	rcall	.-378    	; 0x209e <ioport_configure_port_pin>
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	68 e0       	ldi	r22, 0x08	; 8
    221e:	80 e2       	ldi	r24, 0x20	; 32
    2220:	96 e0       	ldi	r25, 0x06	; 6
    2222:	3d df       	rcall	.-390    	; 0x209e <ioport_configure_port_pin>
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	57 e0       	ldi	r21, 0x07	; 7
    2228:	64 e0       	ldi	r22, 0x04	; 4
    222a:	80 e2       	ldi	r24, 0x20	; 32
    222c:	96 e0       	ldi	r25, 0x06	; 6
    222e:	37 df       	rcall	.-402    	; 0x209e <ioport_configure_port_pin>
    2230:	43 e0       	ldi	r20, 0x03	; 3
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	68 e0       	ldi	r22, 0x08	; 8
    2236:	80 ec       	ldi	r24, 0xC0	; 192
    2238:	97 e0       	ldi	r25, 0x07	; 7
    223a:	31 df       	rcall	.-414    	; 0x209e <ioport_configure_port_pin>
    223c:	43 e0       	ldi	r20, 0x03	; 3
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	68 e0       	ldi	r22, 0x08	; 8
    2242:	80 e4       	ldi	r24, 0x40	; 64
    2244:	96 e0       	ldi	r25, 0x06	; 6
    2246:	2b df       	rcall	.-426    	; 0x209e <ioport_configure_port_pin>
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	64 e0       	ldi	r22, 0x04	; 4
    224e:	80 e4       	ldi	r24, 0x40	; 64
    2250:	96 e0       	ldi	r25, 0x06	; 6
    2252:	25 df       	rcall	.-438    	; 0x209e <ioport_configure_port_pin>
    2254:	43 e0       	ldi	r20, 0x03	; 3
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	68 e0       	ldi	r22, 0x08	; 8
    225a:	80 e6       	ldi	r24, 0x60	; 96
    225c:	96 e0       	ldi	r25, 0x06	; 6
    225e:	1f df       	rcall	.-450    	; 0x209e <ioport_configure_port_pin>
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	64 e0       	ldi	r22, 0x04	; 4
    2266:	80 e6       	ldi	r24, 0x60	; 96
    2268:	96 e0       	ldi	r25, 0x06	; 6
    226a:	19 cf       	rjmp	.-462    	; 0x209e <ioport_configure_port_pin>
    226c:	08 95       	ret

0000226e <main>:
static uint16_t tempsense;					//Temperature sensor calibration data.
static volatile uint16_t last_temperature;	//The latest, computed temperature.
volatile uint8_t tempArray[] = "0000";

int main (void)
{
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	2c 97       	sbiw	r28, 0x0c	; 12
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	de bf       	out	0x3e, r29	; 62
	
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    227c:	37 df       	rcall	.-402    	; 0x20ec <board_init>
	sysclk_init();
    227e:	ca de       	rcall	.-620    	; 0x2014 <sysclk_init>
    2280:	ec e6       	ldi	r30, 0x6C	; 108
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2282:	f0 e2       	ldi	r31, 0x20	; 32
    2284:	10 82       	st	Z, r1
    2286:	11 82       	std	Z+1, r1	; 0x01
    2288:	12 82       	std	Z+2, r1	; 0x02
    228a:	13 82       	std	Z+3, r1	; 0x03
    228c:	14 82       	std	Z+4, r1	; 0x04
    228e:	81 e0       	ldi	r24, 0x01	; 1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2290:	85 83       	std	Z+5, r24	; 0x05
    2292:	87 e0       	ldi	r24, 0x07	; 7
	sleepmgr_init();
	irq_initialize_vectors();
    2294:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2298:	78 94       	sei
	cpu_irq_enable();
    229a:	60 e0       	ldi	r22, 0x00	; 0
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	// Initialize USART driver in RS232 mode
	usart_init_rs232(USART_SERIAL, &USART_SERIAL_OPTIONS);
    229c:	70 e2       	ldi	r23, 0x20	; 32
    229e:	80 ea       	ldi	r24, 0xA0	; 160
    22a0:	98 e0       	ldi	r25, 0x08	; 8
    22a2:	32 da       	rcall	.-2972   	; 0x1708 <usart_init_rs232>
    22a4:	be 01       	movw	r22, r28

	// Initialize ADC configuration structures.
	adc_read_configuration(&ADCA, &adc_conf);
    22a6:	6f 5f       	subi	r22, 0xFF	; 255
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	dd dd       	rcall	.-1094   	; 0x1e6a <adc_read_configuration>
    22b0:	ae 01       	movw	r20, r28
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    22b2:	48 5f       	subi	r20, 0xF8	; 248
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	5e de       	rcall	.-836    	; 0x1f7a <adcch_read_configuration>
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    22c2:	8f 7c       	andi	r24, 0xCF	; 207
    22c4:	22 e0       	ldi	r18, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    22c6:	2d 83       	std	Y+5, r18	; 0x05
    22c8:	91 7e       	andi	r25, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
    22ce:	81 60       	ori	r24, 0x01	; 1
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    22d2:	be 01       	movw	r22, r28
			ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);

	adc_write_configuration(&ADCA, &adc_conf);
    22d4:	6f 5f       	subi	r22, 0xFF	; 255
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	92 e0       	ldi	r25, 0x02	; 2
    22dc:	5e dd       	rcall	.-1348   	; 0x1d9a <adc_write_configuration>
    22de:	61 ec       	ldi	r22, 0xC1	; 193
	adc_set_callback(&ADCA, &adc_handler);
    22e0:	71 e1       	ldi	r23, 0x11	; 17
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	92 e0       	ldi	r25, 0x02	; 2
    22e6:	0e 94 21 01 	call	0x242	; 0x242 <adc_set_callback>
    22ea:	18 86       	std	Y+8, r1	; 0x08
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    22ec:	19 86       	std	Y+9, r1	; 0x09
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    22ee:	8a 85       	ldd	r24, Y+10	; 0x0a
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    22f0:	80 7f       	andi	r24, 0xF0	; 240
    22f2:	81 60       	ori	r24, 0x01	; 1
    22f4:	8a 87       	std	Y+10, r24	; 0x0a
    22f6:	ae 01       	movw	r20, r28
	adcch_set_input(&adcch_conf, ADCCH_POS_TEMPSENSE, ADCCH_NEG_NONE,
			1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);

	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    22f8:	48 5f       	subi	r20, 0xF8	; 248
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	92 e0       	ldi	r25, 0x02	; 2
    2302:	ee dd       	rcall	.-1060   	; 0x1ee0 <adcch_write_configuration>
    2304:	6f e2       	ldi	r22, 0x2F	; 47
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	bf de       	rcall	.-642    	; 0x208a <nvm_read_byte>
		break;
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    230c:	08 2f       	mov	r16, r24
    230e:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2310:	10 2f       	mov	r17, r16
    2312:	00 27       	eor	r16, r16
    2314:	6e e2       	ldi	r22, 0x2E	; 46
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	b7 de       	rcall	.-658    	; 0x208a <nvm_read_byte>
    231c:	08 2b       	or	r16, r24
	
	// Get measurement for 85 degrees C (358 kelvin) from calibration data.
	tempsense = adc_get_calibration_data(ADC_CAL_TEMPSENSE);
    231e:	00 93 66 20 	sts	0x2066, r16	; 0x802066 <tempsense>
    2322:	10 93 67 20 	sts	0x2067, r17	; 0x802067 <tempsense+0x1>
    2326:	80 e0       	ldi	r24, 0x00	; 0
	// Enable the ADC 
	adc_enable(&ADCA);
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	0e 94 81 01 	call	0x302	; 0x302 <adc_enable>
    232e:	e0 e0       	ldi	r30, 0x00	; 0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    2330:	f2 e0       	ldi	r31, 0x02	; 2
    2332:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2334:	8c 87       	std	Y+12, r24	; 0x0c
    2336:	f8 94       	cli
	cpu_irq_disable();
    2338:	9c 85       	ldd	r25, Y+12	; 0x0c
	return flags;
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	80 83       	st	Z, r24
    2340:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2342:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2344:	84 e3       	ldi	r24, 0x34	; 52
    2346:	9c e0       	ldi	r25, 0x0C	; 12
    2348:	21 50       	subi	r18, 0x01	; 1
    234a:	80 40       	sbci	r24, 0x00	; 0
    234c:	90 40       	sbci	r25, 0x00	; 0
    234e:	e1 f7       	brne	.-8      	; 0x2348 <main+0xda>
    2350:	00 c0       	rjmp	.+0      	; 0x2352 <main+0xe4>
    2352:	00 00       	nop
    2354:	ee cf       	rjmp	.-36     	; 0x2332 <main+0xc4>

00002356 <publishUSARTMessage>:
    2356:	0f 93       	push	r16
/*	
*	Send message on USART
*	str		-	Pointer to char array to be sent
*	length	-	Length of char array to be sent
*/
void publishUSARTMessage(uint8_t *str, uint8_t length) {
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
	for (int i = 0; i < length; i++) {
    235e:	66 23       	and	r22, r22
    2360:	59 f0       	breq	.+22     	; 0x2378 <publishUSARTMessage+0x22>
    2362:	8c 01       	movw	r16, r24
    2364:	ec 01       	movw	r28, r24
    2366:	06 0f       	add	r16, r22
    2368:	11 1d       	adc	r17, r1
		usart_putchar(USART_SERIAL, str[i]);
    236a:	69 91       	ld	r22, Y+
    236c:	80 ea       	ldi	r24, 0xA0	; 160
    236e:	98 e0       	ldi	r25, 0x08	; 8
    2370:	b4 d8       	rcall	.-3736   	; 0x14da <usart_putchar>
*	Send message on USART
*	str		-	Pointer to char array to be sent
*	length	-	Length of char array to be sent
*/
void publishUSARTMessage(uint8_t *str, uint8_t length) {
	for (int i = 0; i < length; i++) {
    2372:	c0 17       	cp	r28, r16
    2374:	d1 07       	cpc	r29, r17
    2376:	c9 f7       	brne	.-14     	; 0x236a <publishUSARTMessage+0x14>
		usart_putchar(USART_SERIAL, str[i]);
	}
}
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <adc_handler>:
 *
 * \param adc Pointer to ADC module.
 * \param ch_mask ADC channel mask.
 * \param result Conversion result from ADC channel.
 */
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result) {
    2382:	9a 01       	movw	r18, r20

	/* Compute current temperature in kelvin, based on the factory
	 * calibration measurement of the temperature sensor. The calibration
	 * has been done at 85 degrees Celsius, which corresponds to 358 kelvin.
	 */
	temperature = (uint32_t)result * 358;
    2384:	a6 e6       	ldi	r26, 0x66	; 102
    2386:	b1 e0       	ldi	r27, 0x01	; 1
    2388:	48 d0       	rcall	.+144    	; 0x241a <__umulhisi3>
	temperature /= tempsense;

	// Store temperature in global variable.
	last_temperature = temperature & 0xffff;
    238a:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <tempsense>
    238e:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <tempsense+0x1>
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	1f d0       	rcall	.+62     	; 0x23d6 <__udivmodsi4>
    2398:	20 93 64 20 	sts	0x2064, r18	; 0x802064 <last_temperature>
    239c:	30 93 65 20 	sts	0x2065, r19	; 0x802065 <last_temperature+0x1>
	float x = 10.1;
	sprintf(tempArray,"%f",x);
    23a0:	81 e4       	ldi	r24, 0x41	; 65
    23a2:	8f 93       	push	r24
    23a4:	81 e2       	ldi	r24, 0x21	; 33
    23a6:	8f 93       	push	r24
    23a8:	89 e9       	ldi	r24, 0x99	; 153
    23aa:	8f 93       	push	r24
    23ac:	8a e9       	ldi	r24, 0x9A	; 154
    23ae:	8f 93       	push	r24
    23b0:	8c e0       	ldi	r24, 0x0C	; 12
    23b2:	90 e2       	ldi	r25, 0x20	; 32
    23b4:	9f 93       	push	r25
    23b6:	8f 93       	push	r24
    23b8:	87 e0       	ldi	r24, 0x07	; 7
    23ba:	90 e2       	ldi	r25, 0x20	; 32
    23bc:	9f 93       	push	r25
    23be:	8f 93       	push	r24
    23c0:	3b d0       	rcall	.+118    	; 0x2438 <sprintf>
	publishUSARTMessage(tempArray,4);
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	87 e0       	ldi	r24, 0x07	; 7
    23c6:	90 e2       	ldi	r25, 0x20	; 32
    23c8:	c6 df       	rcall	.-116    	; 0x2356 <publishUSARTMessage>
	// Start next conversion.
	//adc_start_conversion(adc, ch_mask);
}
    23ca:	8d b7       	in	r24, 0x3d	; 61
    23cc:	9e b7       	in	r25, 0x3e	; 62
    23ce:	08 96       	adiw	r24, 0x08	; 8
    23d0:	8d bf       	out	0x3d, r24	; 61
    23d2:	9e bf       	out	0x3e, r25	; 62
    23d4:	08 95       	ret

000023d6 <__udivmodsi4>:
    23d6:	a1 e2       	ldi	r26, 0x21	; 33
    23d8:	1a 2e       	mov	r1, r26
    23da:	aa 1b       	sub	r26, r26
    23dc:	bb 1b       	sub	r27, r27
    23de:	fd 01       	movw	r30, r26
    23e0:	0d c0       	rjmp	.+26     	; 0x23fc <__udivmodsi4_ep>

000023e2 <__udivmodsi4_loop>:
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	ee 1f       	adc	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	a2 17       	cp	r26, r18
    23ec:	b3 07       	cpc	r27, r19
    23ee:	e4 07       	cpc	r30, r20
    23f0:	f5 07       	cpc	r31, r21
    23f2:	20 f0       	brcs	.+8      	; 0x23fc <__udivmodsi4_ep>
    23f4:	a2 1b       	sub	r26, r18
    23f6:	b3 0b       	sbc	r27, r19
    23f8:	e4 0b       	sbc	r30, r20
    23fa:	f5 0b       	sbc	r31, r21

000023fc <__udivmodsi4_ep>:
    23fc:	66 1f       	adc	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	1a 94       	dec	r1
    2406:	69 f7       	brne	.-38     	; 0x23e2 <__udivmodsi4_loop>
    2408:	60 95       	com	r22
    240a:	70 95       	com	r23
    240c:	80 95       	com	r24
    240e:	90 95       	com	r25
    2410:	9b 01       	movw	r18, r22
    2412:	ac 01       	movw	r20, r24
    2414:	bd 01       	movw	r22, r26
    2416:	cf 01       	movw	r24, r30
    2418:	08 95       	ret

0000241a <__umulhisi3>:
    241a:	a2 9f       	mul	r26, r18
    241c:	b0 01       	movw	r22, r0
    241e:	b3 9f       	mul	r27, r19
    2420:	c0 01       	movw	r24, r0
    2422:	a3 9f       	mul	r26, r19
    2424:	70 0d       	add	r23, r0
    2426:	81 1d       	adc	r24, r1
    2428:	11 24       	eor	r1, r1
    242a:	91 1d       	adc	r25, r1
    242c:	b2 9f       	mul	r27, r18
    242e:	70 0d       	add	r23, r0
    2430:	81 1d       	adc	r24, r1
    2432:	11 24       	eor	r1, r1
    2434:	91 1d       	adc	r25, r1
    2436:	08 95       	ret

00002438 <sprintf>:
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	2e 97       	sbiw	r28, 0x0e	; 14
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0e 89       	ldd	r16, Y+22	; 0x16
    244c:	1f 89       	ldd	r17, Y+23	; 0x17
    244e:	86 e0       	ldi	r24, 0x06	; 6
    2450:	8c 83       	std	Y+4, r24	; 0x04
    2452:	09 83       	std	Y+1, r16	; 0x01
    2454:	1a 83       	std	Y+2, r17	; 0x02
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f e7       	ldi	r25, 0x7F	; 127
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	ae 01       	movw	r20, r28
    2460:	46 5e       	subi	r20, 0xE6	; 230
    2462:	5f 4f       	sbci	r21, 0xFF	; 255
    2464:	68 8d       	ldd	r22, Y+24	; 0x18
    2466:	79 8d       	ldd	r23, Y+25	; 0x19
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	0d d0       	rcall	.+26     	; 0x2488 <vfprintf>
    246e:	ef 81       	ldd	r30, Y+7	; 0x07
    2470:	f8 85       	ldd	r31, Y+8	; 0x08
    2472:	e0 0f       	add	r30, r16
    2474:	f1 1f       	adc	r31, r17
    2476:	10 82       	st	Z, r1
    2478:	2e 96       	adiw	r28, 0x0e	; 14
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

00002488 <vfprintf>:
    2488:	2f 92       	push	r2
    248a:	3f 92       	push	r3
    248c:	4f 92       	push	r4
    248e:	5f 92       	push	r5
    2490:	6f 92       	push	r6
    2492:	7f 92       	push	r7
    2494:	8f 92       	push	r8
    2496:	9f 92       	push	r9
    2498:	af 92       	push	r10
    249a:	bf 92       	push	r11
    249c:	cf 92       	push	r12
    249e:	df 92       	push	r13
    24a0:	ef 92       	push	r14
    24a2:	ff 92       	push	r15
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	2b 97       	sbiw	r28, 0x0b	; 11
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	6c 01       	movw	r12, r24
    24b8:	7b 01       	movw	r14, r22
    24ba:	8a 01       	movw	r16, r20
    24bc:	fc 01       	movw	r30, r24
    24be:	16 82       	std	Z+6, r1	; 0x06
    24c0:	17 82       	std	Z+7, r1	; 0x07
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	81 ff       	sbrs	r24, 1
    24c6:	bf c1       	rjmp	.+894    	; 0x2846 <vfprintf+0x3be>
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	3c 01       	movw	r6, r24
    24ce:	f6 01       	movw	r30, r12
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	f7 01       	movw	r30, r14
    24d4:	93 fd       	sbrc	r25, 3
    24d6:	85 91       	lpm	r24, Z+
    24d8:	93 ff       	sbrs	r25, 3
    24da:	81 91       	ld	r24, Z+
    24dc:	7f 01       	movw	r14, r30
    24de:	88 23       	and	r24, r24
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <vfprintf+0x5c>
    24e2:	ad c1       	rjmp	.+858    	; 0x283e <vfprintf+0x3b6>
    24e4:	85 32       	cpi	r24, 0x25	; 37
    24e6:	39 f4       	brne	.+14     	; 0x24f6 <vfprintf+0x6e>
    24e8:	93 fd       	sbrc	r25, 3
    24ea:	85 91       	lpm	r24, Z+
    24ec:	93 ff       	sbrs	r25, 3
    24ee:	81 91       	ld	r24, Z+
    24f0:	7f 01       	movw	r14, r30
    24f2:	85 32       	cpi	r24, 0x25	; 37
    24f4:	21 f4       	brne	.+8      	; 0x24fe <vfprintf+0x76>
    24f6:	b6 01       	movw	r22, r12
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	d3 d1       	rcall	.+934    	; 0x28a2 <fputc>
    24fc:	e8 cf       	rjmp	.-48     	; 0x24ce <vfprintf+0x46>
    24fe:	91 2c       	mov	r9, r1
    2500:	21 2c       	mov	r2, r1
    2502:	31 2c       	mov	r3, r1
    2504:	ff e1       	ldi	r31, 0x1F	; 31
    2506:	f3 15       	cp	r31, r3
    2508:	d8 f0       	brcs	.+54     	; 0x2540 <vfprintf+0xb8>
    250a:	8b 32       	cpi	r24, 0x2B	; 43
    250c:	79 f0       	breq	.+30     	; 0x252c <vfprintf+0xa4>
    250e:	38 f4       	brcc	.+14     	; 0x251e <vfprintf+0x96>
    2510:	80 32       	cpi	r24, 0x20	; 32
    2512:	79 f0       	breq	.+30     	; 0x2532 <vfprintf+0xaa>
    2514:	83 32       	cpi	r24, 0x23	; 35
    2516:	a1 f4       	brne	.+40     	; 0x2540 <vfprintf+0xb8>
    2518:	23 2d       	mov	r18, r3
    251a:	20 61       	ori	r18, 0x10	; 16
    251c:	1d c0       	rjmp	.+58     	; 0x2558 <vfprintf+0xd0>
    251e:	8d 32       	cpi	r24, 0x2D	; 45
    2520:	61 f0       	breq	.+24     	; 0x253a <vfprintf+0xb2>
    2522:	80 33       	cpi	r24, 0x30	; 48
    2524:	69 f4       	brne	.+26     	; 0x2540 <vfprintf+0xb8>
    2526:	23 2d       	mov	r18, r3
    2528:	21 60       	ori	r18, 0x01	; 1
    252a:	16 c0       	rjmp	.+44     	; 0x2558 <vfprintf+0xd0>
    252c:	83 2d       	mov	r24, r3
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	38 2e       	mov	r3, r24
    2532:	e3 2d       	mov	r30, r3
    2534:	e4 60       	ori	r30, 0x04	; 4
    2536:	3e 2e       	mov	r3, r30
    2538:	2a c0       	rjmp	.+84     	; 0x258e <vfprintf+0x106>
    253a:	f3 2d       	mov	r31, r3
    253c:	f8 60       	ori	r31, 0x08	; 8
    253e:	1d c0       	rjmp	.+58     	; 0x257a <vfprintf+0xf2>
    2540:	37 fc       	sbrc	r3, 7
    2542:	2d c0       	rjmp	.+90     	; 0x259e <vfprintf+0x116>
    2544:	20 ed       	ldi	r18, 0xD0	; 208
    2546:	28 0f       	add	r18, r24
    2548:	2a 30       	cpi	r18, 0x0A	; 10
    254a:	40 f0       	brcs	.+16     	; 0x255c <vfprintf+0xd4>
    254c:	8e 32       	cpi	r24, 0x2E	; 46
    254e:	b9 f4       	brne	.+46     	; 0x257e <vfprintf+0xf6>
    2550:	36 fc       	sbrc	r3, 6
    2552:	75 c1       	rjmp	.+746    	; 0x283e <vfprintf+0x3b6>
    2554:	23 2d       	mov	r18, r3
    2556:	20 64       	ori	r18, 0x40	; 64
    2558:	32 2e       	mov	r3, r18
    255a:	19 c0       	rjmp	.+50     	; 0x258e <vfprintf+0x106>
    255c:	36 fe       	sbrs	r3, 6
    255e:	06 c0       	rjmp	.+12     	; 0x256c <vfprintf+0xe4>
    2560:	8a e0       	ldi	r24, 0x0A	; 10
    2562:	98 9e       	mul	r9, r24
    2564:	20 0d       	add	r18, r0
    2566:	11 24       	eor	r1, r1
    2568:	92 2e       	mov	r9, r18
    256a:	11 c0       	rjmp	.+34     	; 0x258e <vfprintf+0x106>
    256c:	ea e0       	ldi	r30, 0x0A	; 10
    256e:	2e 9e       	mul	r2, r30
    2570:	20 0d       	add	r18, r0
    2572:	11 24       	eor	r1, r1
    2574:	22 2e       	mov	r2, r18
    2576:	f3 2d       	mov	r31, r3
    2578:	f0 62       	ori	r31, 0x20	; 32
    257a:	3f 2e       	mov	r3, r31
    257c:	08 c0       	rjmp	.+16     	; 0x258e <vfprintf+0x106>
    257e:	8c 36       	cpi	r24, 0x6C	; 108
    2580:	21 f4       	brne	.+8      	; 0x258a <vfprintf+0x102>
    2582:	83 2d       	mov	r24, r3
    2584:	80 68       	ori	r24, 0x80	; 128
    2586:	38 2e       	mov	r3, r24
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0x106>
    258a:	88 36       	cpi	r24, 0x68	; 104
    258c:	41 f4       	brne	.+16     	; 0x259e <vfprintf+0x116>
    258e:	f7 01       	movw	r30, r14
    2590:	93 fd       	sbrc	r25, 3
    2592:	85 91       	lpm	r24, Z+
    2594:	93 ff       	sbrs	r25, 3
    2596:	81 91       	ld	r24, Z+
    2598:	7f 01       	movw	r14, r30
    259a:	81 11       	cpse	r24, r1
    259c:	b3 cf       	rjmp	.-154    	; 0x2504 <vfprintf+0x7c>
    259e:	98 2f       	mov	r25, r24
    25a0:	9f 7d       	andi	r25, 0xDF	; 223
    25a2:	95 54       	subi	r25, 0x45	; 69
    25a4:	93 30       	cpi	r25, 0x03	; 3
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <vfprintf+0x12a>
    25a8:	0c 5f       	subi	r16, 0xFC	; 252
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	9f e3       	ldi	r25, 0x3F	; 63
    25ae:	99 83       	std	Y+1, r25	; 0x01
    25b0:	0d c0       	rjmp	.+26     	; 0x25cc <vfprintf+0x144>
    25b2:	83 36       	cpi	r24, 0x63	; 99
    25b4:	31 f0       	breq	.+12     	; 0x25c2 <vfprintf+0x13a>
    25b6:	83 37       	cpi	r24, 0x73	; 115
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <vfprintf+0x14e>
    25ba:	83 35       	cpi	r24, 0x53	; 83
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <vfprintf+0x138>
    25be:	55 c0       	rjmp	.+170    	; 0x266a <vfprintf+0x1e2>
    25c0:	20 c0       	rjmp	.+64     	; 0x2602 <vfprintf+0x17a>
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 81       	ld	r24, Z
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	88 24       	eor	r8, r8
    25ce:	83 94       	inc	r8
    25d0:	91 2c       	mov	r9, r1
    25d2:	53 01       	movw	r10, r6
    25d4:	12 c0       	rjmp	.+36     	; 0x25fa <vfprintf+0x172>
    25d6:	28 01       	movw	r4, r16
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	4f 0e       	add	r4, r31
    25dc:	51 1c       	adc	r5, r1
    25de:	f8 01       	movw	r30, r16
    25e0:	a0 80       	ld	r10, Z
    25e2:	b1 80       	ldd	r11, Z+1	; 0x01
    25e4:	36 fe       	sbrs	r3, 6
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <vfprintf+0x166>
    25e8:	69 2d       	mov	r22, r9
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <vfprintf+0x16a>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	c5 01       	movw	r24, r10
    25f4:	4b d1       	rcall	.+662    	; 0x288c <strnlen>
    25f6:	4c 01       	movw	r8, r24
    25f8:	82 01       	movw	r16, r4
    25fa:	f3 2d       	mov	r31, r3
    25fc:	ff 77       	andi	r31, 0x7F	; 127
    25fe:	3f 2e       	mov	r3, r31
    2600:	15 c0       	rjmp	.+42     	; 0x262c <vfprintf+0x1a4>
    2602:	28 01       	movw	r4, r16
    2604:	22 e0       	ldi	r18, 0x02	; 2
    2606:	42 0e       	add	r4, r18
    2608:	51 1c       	adc	r5, r1
    260a:	f8 01       	movw	r30, r16
    260c:	a0 80       	ld	r10, Z
    260e:	b1 80       	ldd	r11, Z+1	; 0x01
    2610:	36 fe       	sbrs	r3, 6
    2612:	03 c0       	rjmp	.+6      	; 0x261a <vfprintf+0x192>
    2614:	69 2d       	mov	r22, r9
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x196>
    261a:	6f ef       	ldi	r22, 0xFF	; 255
    261c:	7f ef       	ldi	r23, 0xFF	; 255
    261e:	c5 01       	movw	r24, r10
    2620:	2a d1       	rcall	.+596    	; 0x2876 <strnlen_P>
    2622:	4c 01       	movw	r8, r24
    2624:	f3 2d       	mov	r31, r3
    2626:	f0 68       	ori	r31, 0x80	; 128
    2628:	3f 2e       	mov	r3, r31
    262a:	82 01       	movw	r16, r4
    262c:	33 fc       	sbrc	r3, 3
    262e:	19 c0       	rjmp	.+50     	; 0x2662 <vfprintf+0x1da>
    2630:	82 2d       	mov	r24, r2
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	88 16       	cp	r8, r24
    2636:	99 06       	cpc	r9, r25
    2638:	a0 f4       	brcc	.+40     	; 0x2662 <vfprintf+0x1da>
    263a:	b6 01       	movw	r22, r12
    263c:	80 e2       	ldi	r24, 0x20	; 32
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	30 d1       	rcall	.+608    	; 0x28a2 <fputc>
    2642:	2a 94       	dec	r2
    2644:	f5 cf       	rjmp	.-22     	; 0x2630 <vfprintf+0x1a8>
    2646:	f5 01       	movw	r30, r10
    2648:	37 fc       	sbrc	r3, 7
    264a:	85 91       	lpm	r24, Z+
    264c:	37 fe       	sbrs	r3, 7
    264e:	81 91       	ld	r24, Z+
    2650:	5f 01       	movw	r10, r30
    2652:	b6 01       	movw	r22, r12
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	25 d1       	rcall	.+586    	; 0x28a2 <fputc>
    2658:	21 10       	cpse	r2, r1
    265a:	2a 94       	dec	r2
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	82 1a       	sub	r8, r18
    2660:	91 08       	sbc	r9, r1
    2662:	81 14       	cp	r8, r1
    2664:	91 04       	cpc	r9, r1
    2666:	79 f7       	brne	.-34     	; 0x2646 <vfprintf+0x1be>
    2668:	e1 c0       	rjmp	.+450    	; 0x282c <vfprintf+0x3a4>
    266a:	84 36       	cpi	r24, 0x64	; 100
    266c:	11 f0       	breq	.+4      	; 0x2672 <vfprintf+0x1ea>
    266e:	89 36       	cpi	r24, 0x69	; 105
    2670:	39 f5       	brne	.+78     	; 0x26c0 <vfprintf+0x238>
    2672:	f8 01       	movw	r30, r16
    2674:	37 fe       	sbrs	r3, 7
    2676:	07 c0       	rjmp	.+14     	; 0x2686 <vfprintf+0x1fe>
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0c 5f       	subi	r16, 0xFC	; 252
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	08 c0       	rjmp	.+16     	; 0x2696 <vfprintf+0x20e>
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	07 2e       	mov	r0, r23
    268c:	00 0c       	add	r0, r0
    268e:	88 0b       	sbc	r24, r24
    2690:	99 0b       	sbc	r25, r25
    2692:	0e 5f       	subi	r16, 0xFE	; 254
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	f3 2d       	mov	r31, r3
    2698:	ff 76       	andi	r31, 0x6F	; 111
    269a:	3f 2e       	mov	r3, r31
    269c:	97 ff       	sbrs	r25, 7
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <vfprintf+0x22a>
    26a0:	90 95       	com	r25
    26a2:	80 95       	com	r24
    26a4:	70 95       	com	r23
    26a6:	61 95       	neg	r22
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	8f 4f       	sbci	r24, 0xFF	; 255
    26ac:	9f 4f       	sbci	r25, 0xFF	; 255
    26ae:	f0 68       	ori	r31, 0x80	; 128
    26b0:	3f 2e       	mov	r3, r31
    26b2:	2a e0       	ldi	r18, 0x0A	; 10
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	a3 01       	movw	r20, r6
    26b8:	30 d1       	rcall	.+608    	; 0x291a <__ultoa_invert>
    26ba:	88 2e       	mov	r8, r24
    26bc:	86 18       	sub	r8, r6
    26be:	44 c0       	rjmp	.+136    	; 0x2748 <vfprintf+0x2c0>
    26c0:	85 37       	cpi	r24, 0x75	; 117
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <vfprintf+0x248>
    26c4:	23 2d       	mov	r18, r3
    26c6:	2f 7e       	andi	r18, 0xEF	; 239
    26c8:	b2 2e       	mov	r11, r18
    26ca:	2a e0       	ldi	r18, 0x0A	; 10
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	25 c0       	rjmp	.+74     	; 0x271a <vfprintf+0x292>
    26d0:	93 2d       	mov	r25, r3
    26d2:	99 7f       	andi	r25, 0xF9	; 249
    26d4:	b9 2e       	mov	r11, r25
    26d6:	8f 36       	cpi	r24, 0x6F	; 111
    26d8:	c1 f0       	breq	.+48     	; 0x270a <vfprintf+0x282>
    26da:	18 f4       	brcc	.+6      	; 0x26e2 <vfprintf+0x25a>
    26dc:	88 35       	cpi	r24, 0x58	; 88
    26de:	79 f0       	breq	.+30     	; 0x26fe <vfprintf+0x276>
    26e0:	ae c0       	rjmp	.+348    	; 0x283e <vfprintf+0x3b6>
    26e2:	80 37       	cpi	r24, 0x70	; 112
    26e4:	19 f0       	breq	.+6      	; 0x26ec <vfprintf+0x264>
    26e6:	88 37       	cpi	r24, 0x78	; 120
    26e8:	21 f0       	breq	.+8      	; 0x26f2 <vfprintf+0x26a>
    26ea:	a9 c0       	rjmp	.+338    	; 0x283e <vfprintf+0x3b6>
    26ec:	e9 2f       	mov	r30, r25
    26ee:	e0 61       	ori	r30, 0x10	; 16
    26f0:	be 2e       	mov	r11, r30
    26f2:	b4 fe       	sbrs	r11, 4
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <vfprintf+0x288>
    26f6:	fb 2d       	mov	r31, r11
    26f8:	f4 60       	ori	r31, 0x04	; 4
    26fa:	bf 2e       	mov	r11, r31
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <vfprintf+0x288>
    26fe:	34 fe       	sbrs	r3, 4
    2700:	0a c0       	rjmp	.+20     	; 0x2716 <vfprintf+0x28e>
    2702:	29 2f       	mov	r18, r25
    2704:	26 60       	ori	r18, 0x06	; 6
    2706:	b2 2e       	mov	r11, r18
    2708:	06 c0       	rjmp	.+12     	; 0x2716 <vfprintf+0x28e>
    270a:	28 e0       	ldi	r18, 0x08	; 8
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	05 c0       	rjmp	.+10     	; 0x271a <vfprintf+0x292>
    2710:	20 e1       	ldi	r18, 0x10	; 16
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	02 c0       	rjmp	.+4      	; 0x271a <vfprintf+0x292>
    2716:	20 e1       	ldi	r18, 0x10	; 16
    2718:	32 e0       	ldi	r19, 0x02	; 2
    271a:	f8 01       	movw	r30, r16
    271c:	b7 fe       	sbrs	r11, 7
    271e:	07 c0       	rjmp	.+14     	; 0x272e <vfprintf+0x2a6>
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0c 5f       	subi	r16, 0xFC	; 252
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0x2b2>
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 5f       	subi	r16, 0xFE	; 254
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	a3 01       	movw	r20, r6
    273c:	ee d0       	rcall	.+476    	; 0x291a <__ultoa_invert>
    273e:	88 2e       	mov	r8, r24
    2740:	86 18       	sub	r8, r6
    2742:	fb 2d       	mov	r31, r11
    2744:	ff 77       	andi	r31, 0x7F	; 127
    2746:	3f 2e       	mov	r3, r31
    2748:	36 fe       	sbrs	r3, 6
    274a:	0d c0       	rjmp	.+26     	; 0x2766 <vfprintf+0x2de>
    274c:	23 2d       	mov	r18, r3
    274e:	2e 7f       	andi	r18, 0xFE	; 254
    2750:	a2 2e       	mov	r10, r18
    2752:	89 14       	cp	r8, r9
    2754:	58 f4       	brcc	.+22     	; 0x276c <vfprintf+0x2e4>
    2756:	34 fe       	sbrs	r3, 4
    2758:	0b c0       	rjmp	.+22     	; 0x2770 <vfprintf+0x2e8>
    275a:	32 fc       	sbrc	r3, 2
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <vfprintf+0x2e8>
    275e:	83 2d       	mov	r24, r3
    2760:	8e 7e       	andi	r24, 0xEE	; 238
    2762:	a8 2e       	mov	r10, r24
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <vfprintf+0x2e8>
    2766:	b8 2c       	mov	r11, r8
    2768:	a3 2c       	mov	r10, r3
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <vfprintf+0x2ea>
    276c:	b8 2c       	mov	r11, r8
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <vfprintf+0x2ea>
    2770:	b9 2c       	mov	r11, r9
    2772:	a4 fe       	sbrs	r10, 4
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <vfprintf+0x30c>
    2776:	fe 01       	movw	r30, r28
    2778:	e8 0d       	add	r30, r8
    277a:	f1 1d       	adc	r31, r1
    277c:	80 81       	ld	r24, Z
    277e:	80 33       	cpi	r24, 0x30	; 48
    2780:	21 f4       	brne	.+8      	; 0x278a <vfprintf+0x302>
    2782:	9a 2d       	mov	r25, r10
    2784:	99 7e       	andi	r25, 0xE9	; 233
    2786:	a9 2e       	mov	r10, r25
    2788:	09 c0       	rjmp	.+18     	; 0x279c <vfprintf+0x314>
    278a:	a2 fe       	sbrs	r10, 2
    278c:	06 c0       	rjmp	.+12     	; 0x279a <vfprintf+0x312>
    278e:	b3 94       	inc	r11
    2790:	b3 94       	inc	r11
    2792:	04 c0       	rjmp	.+8      	; 0x279c <vfprintf+0x314>
    2794:	8a 2d       	mov	r24, r10
    2796:	86 78       	andi	r24, 0x86	; 134
    2798:	09 f0       	breq	.+2      	; 0x279c <vfprintf+0x314>
    279a:	b3 94       	inc	r11
    279c:	a3 fc       	sbrc	r10, 3
    279e:	10 c0       	rjmp	.+32     	; 0x27c0 <vfprintf+0x338>
    27a0:	a0 fe       	sbrs	r10, 0
    27a2:	06 c0       	rjmp	.+12     	; 0x27b0 <vfprintf+0x328>
    27a4:	b2 14       	cp	r11, r2
    27a6:	80 f4       	brcc	.+32     	; 0x27c8 <vfprintf+0x340>
    27a8:	28 0c       	add	r2, r8
    27aa:	92 2c       	mov	r9, r2
    27ac:	9b 18       	sub	r9, r11
    27ae:	0d c0       	rjmp	.+26     	; 0x27ca <vfprintf+0x342>
    27b0:	b2 14       	cp	r11, r2
    27b2:	58 f4       	brcc	.+22     	; 0x27ca <vfprintf+0x342>
    27b4:	b6 01       	movw	r22, r12
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	73 d0       	rcall	.+230    	; 0x28a2 <fputc>
    27bc:	b3 94       	inc	r11
    27be:	f8 cf       	rjmp	.-16     	; 0x27b0 <vfprintf+0x328>
    27c0:	b2 14       	cp	r11, r2
    27c2:	18 f4       	brcc	.+6      	; 0x27ca <vfprintf+0x342>
    27c4:	2b 18       	sub	r2, r11
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vfprintf+0x344>
    27c8:	98 2c       	mov	r9, r8
    27ca:	21 2c       	mov	r2, r1
    27cc:	a4 fe       	sbrs	r10, 4
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <vfprintf+0x366>
    27d0:	b6 01       	movw	r22, r12
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	65 d0       	rcall	.+202    	; 0x28a2 <fputc>
    27d8:	a2 fe       	sbrs	r10, 2
    27da:	16 c0       	rjmp	.+44     	; 0x2808 <vfprintf+0x380>
    27dc:	a1 fc       	sbrc	r10, 1
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <vfprintf+0x35e>
    27e0:	88 e7       	ldi	r24, 0x78	; 120
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <vfprintf+0x362>
    27e6:	88 e5       	ldi	r24, 0x58	; 88
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	b6 01       	movw	r22, r12
    27ec:	0c c0       	rjmp	.+24     	; 0x2806 <vfprintf+0x37e>
    27ee:	8a 2d       	mov	r24, r10
    27f0:	86 78       	andi	r24, 0x86	; 134
    27f2:	51 f0       	breq	.+20     	; 0x2808 <vfprintf+0x380>
    27f4:	a1 fe       	sbrs	r10, 1
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <vfprintf+0x374>
    27f8:	8b e2       	ldi	r24, 0x2B	; 43
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <vfprintf+0x376>
    27fc:	80 e2       	ldi	r24, 0x20	; 32
    27fe:	a7 fc       	sbrc	r10, 7
    2800:	8d e2       	ldi	r24, 0x2D	; 45
    2802:	b6 01       	movw	r22, r12
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	4d d0       	rcall	.+154    	; 0x28a2 <fputc>
    2808:	89 14       	cp	r8, r9
    280a:	30 f4       	brcc	.+12     	; 0x2818 <vfprintf+0x390>
    280c:	b6 01       	movw	r22, r12
    280e:	80 e3       	ldi	r24, 0x30	; 48
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	47 d0       	rcall	.+142    	; 0x28a2 <fputc>
    2814:	9a 94       	dec	r9
    2816:	f8 cf       	rjmp	.-16     	; 0x2808 <vfprintf+0x380>
    2818:	8a 94       	dec	r8
    281a:	f3 01       	movw	r30, r6
    281c:	e8 0d       	add	r30, r8
    281e:	f1 1d       	adc	r31, r1
    2820:	80 81       	ld	r24, Z
    2822:	b6 01       	movw	r22, r12
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	3d d0       	rcall	.+122    	; 0x28a2 <fputc>
    2828:	81 10       	cpse	r8, r1
    282a:	f6 cf       	rjmp	.-20     	; 0x2818 <vfprintf+0x390>
    282c:	22 20       	and	r2, r2
    282e:	09 f4       	brne	.+2      	; 0x2832 <vfprintf+0x3aa>
    2830:	4e ce       	rjmp	.-868    	; 0x24ce <vfprintf+0x46>
    2832:	b6 01       	movw	r22, r12
    2834:	80 e2       	ldi	r24, 0x20	; 32
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	34 d0       	rcall	.+104    	; 0x28a2 <fputc>
    283a:	2a 94       	dec	r2
    283c:	f7 cf       	rjmp	.-18     	; 0x282c <vfprintf+0x3a4>
    283e:	f6 01       	movw	r30, r12
    2840:	86 81       	ldd	r24, Z+6	; 0x06
    2842:	97 81       	ldd	r25, Z+7	; 0x07
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfprintf+0x3c2>
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	9f ef       	ldi	r25, 0xFF	; 255
    284a:	2b 96       	adiw	r28, 0x0b	; 11
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	df 90       	pop	r13
    285e:	cf 90       	pop	r12
    2860:	bf 90       	pop	r11
    2862:	af 90       	pop	r10
    2864:	9f 90       	pop	r9
    2866:	8f 90       	pop	r8
    2868:	7f 90       	pop	r7
    286a:	6f 90       	pop	r6
    286c:	5f 90       	pop	r5
    286e:	4f 90       	pop	r4
    2870:	3f 90       	pop	r3
    2872:	2f 90       	pop	r2
    2874:	08 95       	ret

00002876 <strnlen_P>:
    2876:	fc 01       	movw	r30, r24
    2878:	05 90       	lpm	r0, Z+
    287a:	61 50       	subi	r22, 0x01	; 1
    287c:	70 40       	sbci	r23, 0x00	; 0
    287e:	01 10       	cpse	r0, r1
    2880:	d8 f7       	brcc	.-10     	; 0x2878 <strnlen_P+0x2>
    2882:	80 95       	com	r24
    2884:	90 95       	com	r25
    2886:	8e 0f       	add	r24, r30
    2888:	9f 1f       	adc	r25, r31
    288a:	08 95       	ret

0000288c <strnlen>:
    288c:	fc 01       	movw	r30, r24
    288e:	61 50       	subi	r22, 0x01	; 1
    2890:	70 40       	sbci	r23, 0x00	; 0
    2892:	01 90       	ld	r0, Z+
    2894:	01 10       	cpse	r0, r1
    2896:	d8 f7       	brcc	.-10     	; 0x288e <strnlen+0x2>
    2898:	80 95       	com	r24
    289a:	90 95       	com	r25
    289c:	8e 0f       	add	r24, r30
    289e:	9f 1f       	adc	r25, r31
    28a0:	08 95       	ret

000028a2 <fputc>:
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	fb 01       	movw	r30, r22
    28ac:	23 81       	ldd	r18, Z+3	; 0x03
    28ae:	21 fd       	sbrc	r18, 1
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <fputc+0x16>
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	9f ef       	ldi	r25, 0xFF	; 255
    28b6:	2c c0       	rjmp	.+88     	; 0x2910 <fputc+0x6e>
    28b8:	22 ff       	sbrs	r18, 2
    28ba:	16 c0       	rjmp	.+44     	; 0x28e8 <fputc+0x46>
    28bc:	46 81       	ldd	r20, Z+6	; 0x06
    28be:	57 81       	ldd	r21, Z+7	; 0x07
    28c0:	24 81       	ldd	r18, Z+4	; 0x04
    28c2:	35 81       	ldd	r19, Z+5	; 0x05
    28c4:	42 17       	cp	r20, r18
    28c6:	53 07       	cpc	r21, r19
    28c8:	44 f4       	brge	.+16     	; 0x28da <fputc+0x38>
    28ca:	a0 81       	ld	r26, Z
    28cc:	b1 81       	ldd	r27, Z+1	; 0x01
    28ce:	9d 01       	movw	r18, r26
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	20 83       	st	Z, r18
    28d6:	31 83       	std	Z+1, r19	; 0x01
    28d8:	8c 93       	st	X, r24
    28da:	26 81       	ldd	r18, Z+6	; 0x06
    28dc:	37 81       	ldd	r19, Z+7	; 0x07
    28de:	2f 5f       	subi	r18, 0xFF	; 255
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	26 83       	std	Z+6, r18	; 0x06
    28e4:	37 83       	std	Z+7, r19	; 0x07
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <fputc+0x6e>
    28e8:	8b 01       	movw	r16, r22
    28ea:	ec 01       	movw	r28, r24
    28ec:	fb 01       	movw	r30, r22
    28ee:	00 84       	ldd	r0, Z+8	; 0x08
    28f0:	f1 85       	ldd	r31, Z+9	; 0x09
    28f2:	e0 2d       	mov	r30, r0
    28f4:	19 95       	eicall
    28f6:	89 2b       	or	r24, r25
    28f8:	e1 f6       	brne	.-72     	; 0x28b2 <fputc+0x10>
    28fa:	d8 01       	movw	r26, r16
    28fc:	16 96       	adiw	r26, 0x06	; 6
    28fe:	8d 91       	ld	r24, X+
    2900:	9c 91       	ld	r25, X
    2902:	17 97       	sbiw	r26, 0x07	; 7
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	16 96       	adiw	r26, 0x06	; 6
    2908:	8d 93       	st	X+, r24
    290a:	9c 93       	st	X, r25
    290c:	17 97       	sbiw	r26, 0x07	; 7
    290e:	ce 01       	movw	r24, r28
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	08 95       	ret

0000291a <__ultoa_invert>:
    291a:	fa 01       	movw	r30, r20
    291c:	aa 27       	eor	r26, r26
    291e:	28 30       	cpi	r18, 0x08	; 8
    2920:	51 f1       	breq	.+84     	; 0x2976 <__ultoa_invert+0x5c>
    2922:	20 31       	cpi	r18, 0x10	; 16
    2924:	81 f1       	breq	.+96     	; 0x2986 <__ultoa_invert+0x6c>
    2926:	e8 94       	clt
    2928:	6f 93       	push	r22
    292a:	6e 7f       	andi	r22, 0xFE	; 254
    292c:	6e 5f       	subi	r22, 0xFE	; 254
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	af 4f       	sbci	r26, 0xFF	; 255
    2936:	b1 e0       	ldi	r27, 0x01	; 1
    2938:	3e d0       	rcall	.+124    	; 0x29b6 <__ultoa_invert+0x9c>
    293a:	b4 e0       	ldi	r27, 0x04	; 4
    293c:	3c d0       	rcall	.+120    	; 0x29b6 <__ultoa_invert+0x9c>
    293e:	67 0f       	add	r22, r23
    2940:	78 1f       	adc	r23, r24
    2942:	89 1f       	adc	r24, r25
    2944:	9a 1f       	adc	r25, r26
    2946:	a1 1d       	adc	r26, r1
    2948:	68 0f       	add	r22, r24
    294a:	79 1f       	adc	r23, r25
    294c:	8a 1f       	adc	r24, r26
    294e:	91 1d       	adc	r25, r1
    2950:	a1 1d       	adc	r26, r1
    2952:	6a 0f       	add	r22, r26
    2954:	71 1d       	adc	r23, r1
    2956:	81 1d       	adc	r24, r1
    2958:	91 1d       	adc	r25, r1
    295a:	a1 1d       	adc	r26, r1
    295c:	20 d0       	rcall	.+64     	; 0x299e <__ultoa_invert+0x84>
    295e:	09 f4       	brne	.+2      	; 0x2962 <__ultoa_invert+0x48>
    2960:	68 94       	set
    2962:	3f 91       	pop	r19
    2964:	2a e0       	ldi	r18, 0x0A	; 10
    2966:	26 9f       	mul	r18, r22
    2968:	11 24       	eor	r1, r1
    296a:	30 19       	sub	r19, r0
    296c:	30 5d       	subi	r19, 0xD0	; 208
    296e:	31 93       	st	Z+, r19
    2970:	de f6       	brtc	.-74     	; 0x2928 <__ultoa_invert+0xe>
    2972:	cf 01       	movw	r24, r30
    2974:	08 95       	ret
    2976:	46 2f       	mov	r20, r22
    2978:	47 70       	andi	r20, 0x07	; 7
    297a:	40 5d       	subi	r20, 0xD0	; 208
    297c:	41 93       	st	Z+, r20
    297e:	b3 e0       	ldi	r27, 0x03	; 3
    2980:	0f d0       	rcall	.+30     	; 0x29a0 <__ultoa_invert+0x86>
    2982:	c9 f7       	brne	.-14     	; 0x2976 <__ultoa_invert+0x5c>
    2984:	f6 cf       	rjmp	.-20     	; 0x2972 <__ultoa_invert+0x58>
    2986:	46 2f       	mov	r20, r22
    2988:	4f 70       	andi	r20, 0x0F	; 15
    298a:	40 5d       	subi	r20, 0xD0	; 208
    298c:	4a 33       	cpi	r20, 0x3A	; 58
    298e:	18 f0       	brcs	.+6      	; 0x2996 <__ultoa_invert+0x7c>
    2990:	49 5d       	subi	r20, 0xD9	; 217
    2992:	31 fd       	sbrc	r19, 1
    2994:	40 52       	subi	r20, 0x20	; 32
    2996:	41 93       	st	Z+, r20
    2998:	02 d0       	rcall	.+4      	; 0x299e <__ultoa_invert+0x84>
    299a:	a9 f7       	brne	.-22     	; 0x2986 <__ultoa_invert+0x6c>
    299c:	ea cf       	rjmp	.-44     	; 0x2972 <__ultoa_invert+0x58>
    299e:	b4 e0       	ldi	r27, 0x04	; 4
    29a0:	a6 95       	lsr	r26
    29a2:	97 95       	ror	r25
    29a4:	87 95       	ror	r24
    29a6:	77 95       	ror	r23
    29a8:	67 95       	ror	r22
    29aa:	ba 95       	dec	r27
    29ac:	c9 f7       	brne	.-14     	; 0x29a0 <__ultoa_invert+0x86>
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	61 05       	cpc	r22, r1
    29b2:	71 05       	cpc	r23, r1
    29b4:	08 95       	ret
    29b6:	9b 01       	movw	r18, r22
    29b8:	ac 01       	movw	r20, r24
    29ba:	0a 2e       	mov	r0, r26
    29bc:	06 94       	lsr	r0
    29be:	57 95       	ror	r21
    29c0:	47 95       	ror	r20
    29c2:	37 95       	ror	r19
    29c4:	27 95       	ror	r18
    29c6:	ba 95       	dec	r27
    29c8:	c9 f7       	brne	.-14     	; 0x29bc <__ultoa_invert+0xa2>
    29ca:	62 0f       	add	r22, r18
    29cc:	73 1f       	adc	r23, r19
    29ce:	84 1f       	adc	r24, r20
    29d0:	95 1f       	adc	r25, r21
    29d2:	a0 1d       	adc	r26, r0
    29d4:	08 95       	ret

000029d6 <_exit>:
    29d6:	f8 94       	cli

000029d8 <__stop_program>:
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <__stop_program>
